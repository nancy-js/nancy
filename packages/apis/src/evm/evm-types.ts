/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type TransactionInfo = {
  blockHash: string;
  blockNumber: string;
  from: string;
  hash: string;
  transactionIndex: string;
} & (Transaction1559Signed | Transaction2930Signed | TransactionLegacySigned);
export type Transaction1559Signed = Transaction1559Unsigned & {
  /**
   * The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.
   */
  yParity: string;
  /**
   * For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.
   */
  v?: string;
  r: string;
  s: string;
};
/**
 * EIP-2930 access list
 */
export type AccessList = AccessListEntry[];
export type Transaction2930Signed = Transaction2930Unsigned & {
  /**
   * The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.
   */
  yParity: string;
  /**
   * For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.
   */
  v?: string;
  r: string;
  s: string;
};
/**
 * EIP-2930 access list
 */
export type AccessList1 = AccessListEntry[];
export type TransactionLegacySigned = TransactionLegacyUnsigned & {
  v: string;
  r: string;
  s: string;
};
export type Withdrawals = WithdrawalV1[];
export type Transactions = string[];
export type Withdrawals1 = WithdrawalV1[];
/**
 * EIP-2930 access list
 */
export type AccessList2 = AccessListEntry[];
export type AccessList3 = AccessListEntry[];
export type Addresses = string[];
export type FilterTopics = (null | string | string[])[];

export interface EvmJSONRPCMethods {
  /**
   * Returns an array of recent bad blocks that the client has seen on the network.
   */
  debug_getBadBlocks: {
    /**
     * @minItems 0
     */
    params: [];
    result: BadBlock[];
  };
  /**
   * Returns an RLP-encoded block.
   */
  debug_getRawBlock: {
    /**
     * @minItems 1
     */
    params: [string | ("earliest" | "finalized" | "safe" | "latest" | "pending")];
    result: string;
  };
  /**
   * Returns an RLP-encoded header.
   */
  debug_getRawHeader: {
    /**
     * @minItems 1
     */
    params: [string | ("earliest" | "finalized" | "safe" | "latest" | "pending")];
    result: string;
  };
  /**
   * Returns an array of EIP-2718 binary-encoded receipts.
   */
  debug_getRawReceipts: {
    /**
     * @minItems 1
     */
    params: [string | ("earliest" | "finalized" | "safe" | "latest" | "pending")];
    result: string[];
  };
  /**
   * Returns an array of EIP-2718 binary-encoded transactions.
   */
  debug_getRawTransaction: {
    /**
     * @minItems 1
     */
    params: [string];
    result: string;
  };
  /**
   * Exchanges list of supported Engine API methods
   */
  engine_exchangeCapabilities: {
    /**
     * @minItems 1
     */
    params: [string[]];
    result: string[];
  };
  /**
   * Exchanges transition configuration
   */
  engine_exchangeTransitionConfigurationV1: {
    /**
     * @minItems 1
     */
    params: [TransitionConfigurationV1];
    result: TransitionConfigurationV1;
  };
  /**
   * Updates the forkchoice state
   */
  engine_forkchoiceUpdatedV1: {
    /**
     * @minItems 1
     */
    params: [ForkchoiceStateV1] | [ForkchoiceStateV1, PayloadAttributesV1];
    result: ForkchoiceUpdatedResponseV1;
    errors:
      | {
          code: -38002;
          message: "Invalid forkchoice state";
        }
      | {
          code: -38003;
          message: "Invalid payload attributes";
        };
  };
  /**
   * Updates the forkchoice state
   */
  engine_forkchoiceUpdatedV2: {
    /**
     * @minItems 1
     */
    params: [ForkchoiceStateV1] | [ForkchoiceStateV1, PayloadAttributesV2];
    result: ForkchoiceUpdatedResponseV1;
    errors:
      | {
          code: -38002;
          message: "Invalid forkchoice state";
        }
      | {
          code: -38003;
          message: "Invalid payload attributes";
        };
  };
  /**
   * Updates the forkchoice state
   */
  engine_forkchoiceUpdatedV3: {
    /**
     * @minItems 1
     */
    params: [ForkchoiceStateV1] | [ForkchoiceStateV1, PayloadAttributesV3];
    result: ForkchoiceUpdatedResponseV1;
    errors:
      | {
          code: -38002;
          message: "Invalid forkchoice state";
        }
      | {
          code: -38003;
          message: "Invalid payload attributes";
        }
      | {
          code: -32602;
          message: "Invalid params";
        }
      | {
          code: -38005;
          message: "Unsupported fork";
        };
  };
  /**
   * Given block hashes returns bodies of the corresponding execution payloads
   */
  engine_getPayloadBodiesByHashV1: {
    /**
     * @minItems 1
     */
    params: [string[]];
    result: ExecutionPayloadBodyV1[];
    errors: {
      code: -38004;
      message: "Too large request";
    };
  };
  /**
   * Given a range of block numbers returns bodies of the corresponding execution payloads
   */
  engine_getPayloadBodiesByRangeV1: {
    /**
     * @minItems 2
     */
    params: [string, string];
    result: ExecutionPayloadBodyV1[];
    errors: {
      code: -38004;
      message: "Too large request";
    };
  };
  /**
   * Obtains execution payload from payload build process
   */
  engine_getPayloadV1: {
    /**
     * @minItems 1
     */
    params: [string];
    result: ExecutionPayloadV1;
    errors: {
      code: -38001;
      message: "Unknown payload";
    };
  };
  /**
   * Obtains execution payload from payload build process
   */
  engine_getPayloadV2: {
    /**
     * @minItems 1
     */
    params: [string];
    result: {
      executionPayload: ExecutionPayloadV1 | ExecutionPayloadV2;
      blockValue: string;
    };
    errors: {
      code: -38001;
      message: "Unknown payload";
    };
  };
  /**
   * Obtains execution payload from payload build process
   */
  engine_getPayloadV3: {
    /**
     * @minItems 1
     */
    params: [string];
    result: {
      executionPayload: ExecutionPayloadV3;
      blockValue: string;
      blobsBundle: BlobsBundleV1;
      shouldOverrideBuilder: boolean;
    };
    errors:
      | {
          code: -38001;
          message: "Unknown payload";
        }
      | {
          code: -38005;
          message: "Unsupported fork";
        };
  };
  /**
   * Runs execution payload validation
   */
  engine_newPayloadV1: {
    /**
     * @minItems 1
     */
    params: [ExecutionPayloadV1];
    result: PayloadStatusV1;
  };
  /**
   * Runs execution payload validation
   */
  engine_newPayloadV2: {
    /**
     * @minItems 1
     */
    params: [ExecutionPayloadV1 | ExecutionPayloadV2];
    result: PayloadStatusNoInvalidBlockHash;
    errors: {
      code: -32602;
      message: "Invalid params";
    };
  };
  /**
   * Runs execution payload validation
   */
  engine_newPayloadV3: {
    /**
     * @minItems 3
     */
    params: [ExecutionPayloadV3, string[], string];
    result: PayloadStatusNoInvalidBlockHash;
    errors:
      | {
          code: -32602;
          message: "Invalid params";
        }
      | {
          code: -38005;
          message: "Unsupported fork";
        };
  };
  /**
   * Returns a list of addresses owned by client.
   */
  eth_accounts: {
    /**
     * @minItems 0
     */
    params: [];
    result: string[];
  };
  /**
   * Returns the number of most recent block.
   */
  eth_blockNumber: {
    /**
     * @minItems 0
     */
    params: [];
    result: string;
  };
  /**
   * Executes a new message call immediately without creating a transaction on the block chain.
   */
  eth_call: {
    /**
     * @minItems 1
     */
    params:
      | [GenericTransaction]
      | [GenericTransaction, string | ("earliest" | "finalized" | "safe" | "latest" | "pending") | string];
    result: string;
  };
  /**
   * Returns the chain ID of the current network.
   */
  eth_chainId: {
    /**
     * @minItems 0
     */
    params: [];
    result: string;
  };
  /**
   * Returns the client coinbase address.
   */
  eth_coinbase: {
    /**
     * @minItems 0
     */
    params: [];
    result: string;
  };
  /**
   * Generates an access list for a transaction.
   */
  eth_createAccessList: {
    /**
     * @minItems 1
     */
    params:
      | [GenericTransaction]
      | [GenericTransaction, string | ("earliest" | "finalized" | "safe" | "latest" | "pending")];
    result: {
      accessList?: AccessList3;
      error?: string;
      gasUsed?: string;
    };
  };
  /**
   * Generates and returns an estimate of how much gas is necessary to allow the transaction to complete.
   */
  eth_estimateGas: {
    /**
     * @minItems 1
     */
    params:
      | [GenericTransaction]
      | [GenericTransaction, string | ("earliest" | "finalized" | "safe" | "latest" | "pending")];
    result: string;
  };
  /**
   * Returns transaction base fee per gas and effective priority fee per gas for the requested/supported block range.
   */
  eth_feeHistory: {
    /**
     * @minItems 3
     */
    params: [string, string | ("earliest" | "finalized" | "safe" | "latest" | "pending"), number[]];
    /**
     * Fee history results.
     */
    result: {
      /**
       * Lowest number block of returned range.
       */
      oldestBlock: string;
      /**
       * An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks.
       */
      baseFeePerGas: string[];
      /**
       * An array of block gas used ratios. These are calculated as the ratio of gasUsed and gasLimit.
       */
      gasUsedRatio: number[];
      /**
       * A two-dimensional array of effective priority fees per gas at the requested block percentiles.
       */
      reward?: string[][];
    };
  };
  /**
   * Returns the current price per gas in wei.
   */
  eth_gasPrice: {
    /**
     * @minItems 0
     */
    params: [];
    result: string;
  };
  /**
   * Returns the balance of the account of given address.
   */
  eth_getBalance: {
    /**
     * @minItems 1
     */
    params: [string] | [string, string | ("earliest" | "finalized" | "safe" | "latest" | "pending") | string];
    result: string;
  };
  /**
   * Returns information about a block by hash.
   */
  eth_getBlockByHash: {
    /**
     * @minItems 2
     */
    params: [string, boolean];
    result: null | Block;
  };
  /**
   * Returns information about a block by number.
   */
  eth_getBlockByNumber: {
    /**
     * @minItems 2
     */
    params: [string | ("earliest" | "finalized" | "safe" | "latest" | "pending"), boolean];
    result: null | Block;
  };
  /**
   * Returns the receipts of a block by number or hash.
   */
  eth_getBlockReceipts: {
    /**
     * @minItems 1
     */
    params: [string | ("earliest" | "finalized" | "safe" | "latest" | "pending") | string];
    result: null | ReceiptInfo[];
  };
  /**
   * Returns the number of transactions in a block from a block matching the given block hash.
   */
  eth_getBlockTransactionCountByHash: {
    /**
     * @minItems 0
     */
    params: [] | [string];
    result: null | string;
  };
  /**
   * Returns the number of transactions in a block matching the given block number.
   */
  eth_getBlockTransactionCountByNumber: {
    /**
     * @minItems 0
     */
    params: [] | [string | ("earliest" | "finalized" | "safe" | "latest" | "pending")];
    result: null | string;
  };
  /**
   * Returns code at a given address.
   */
  eth_getCode: {
    /**
     * @minItems 1
     */
    params: [string] | [string, string | ("earliest" | "finalized" | "safe" | "latest" | "pending") | string];
    result: string;
  };
  /**
   * Polling method for a filter, which returns an array of logs which occurred since last poll.
   */
  eth_getFilterChanges: {
    /**
     * @minItems 0
     */
    params: [] | [string];
    result: string[] | Log[];
  };
  /**
   * Returns an array of all logs matching filter with given id.
   */
  eth_getFilterLogs: {
    /**
     * @minItems 0
     */
    params: [] | [string];
    result: string[] | Log[];
  };
  /**
   * Returns an array of all logs matching filter with given id.
   */
  eth_getLogs: {
    /**
     * @minItems 0
     */
    params: [] | [Filter];
    result: string[] | Log[];
  };
  /**
   * Returns the merkle proof for a given account and optionally some storage keys.
   */
  eth_getProof: {
    /**
     * @minItems 3
     */
    params: [string, string[], string | ("earliest" | "finalized" | "safe" | "latest" | "pending") | string];
    result: AccountProof;
  };
  /**
   * Returns the value from a storage position at a given address.
   */
  eth_getStorageAt: {
    /**
     * @minItems 2
     */
    params:
      | [string, string]
      | [string, string, string | ("earliest" | "finalized" | "safe" | "latest" | "pending") | string];
    result: string;
  };
  /**
   * Returns information about a transaction by block hash and transaction index position.
   */
  eth_getTransactionByBlockHashAndIndex: {
    /**
     * @minItems 2
     */
    params: [string, string];
    result: null | TransactionInfo;
  };
  /**
   * Returns information about a transaction by block number and transaction index position.
   */
  eth_getTransactionByBlockNumberAndIndex: {
    /**
     * @minItems 2
     */
    params: [string | ("earliest" | "finalized" | "safe" | "latest" | "pending"), string];
    result: null | TransactionInfo;
  };
  /**
   * Returns the information about a transaction requested by transaction hash.
   */
  eth_getTransactionByHash: {
    /**
     * @minItems 1
     */
    params: [string];
    result: null | TransactionInfo;
  };
  /**
   * Returns the number of transactions sent from an address.
   */
  eth_getTransactionCount: {
    /**
     * @minItems 1
     */
    params: [string] | [string, string | ("earliest" | "finalized" | "safe" | "latest" | "pending") | string];
    result: string;
  };
  /**
   * Returns the receipt of a transaction by transaction hash.
   */
  eth_getTransactionReceipt: {
    /**
     * @minItems 1
     */
    params: [string];
    result: null | ReceiptInfo;
  };
  /**
   * Returns the number of uncles in a block from a block matching the given block hash.
   */
  eth_getUncleCountByBlockHash: {
    /**
     * @minItems 0
     */
    params: [] | [string];
    result: null | string;
  };
  /**
   * Returns the number of transactions in a block matching the given block number.
   */
  eth_getUncleCountByBlockNumber: {
    /**
     * @minItems 0
     */
    params: [] | [string | ("earliest" | "finalized" | "safe" | "latest" | "pending")];
    result: null | string;
  };
  /**
   * Returns the current maxPriorityFeePerGas per gas in wei.
   */
  eth_maxPriorityFeePerGas: {
    /**
     * @minItems 0
     */
    params: [];
    result: string;
  };
  /**
   * Creates a filter in the node, to notify when a new block arrives.
   */
  eth_newBlockFilter: {
    /**
     * @minItems 0
     */
    params: [];
    result: string;
  };
  /**
   * Creates a filter object, based on filter options, to notify when the state changes (logs).
   */
  eth_newFilter: {
    /**
     * @minItems 0
     */
    params: [] | [Filter];
    result: string;
  };
  /**
   * Creates a filter in the node, to notify when new pending transactions arrive.
   */
  eth_newPendingTransactionFilter: {
    /**
     * @minItems 0
     */
    params: [];
    result: string;
  };
  /**
   * Submits a raw transaction.
   */
  eth_sendRawTransaction: {
    /**
     * @minItems 1
     */
    params: [string];
    result: string;
  };
  /**
   * Signs and submits a transaction.
   */
  eth_sendTransaction: {
    /**
     * @minItems 1
     */
    params: [GenericTransaction];
    result: string;
  };
  /**
   * Returns an EIP-191 signature over the provided data.
   */
  eth_sign: {
    /**
     * @minItems 2
     */
    params: [string, string];
    result: string;
  };
  /**
   * Returns an RLP encoded transaction signed by the specified account.
   */
  eth_signTransaction: {
    /**
     * @minItems 1
     */
    params: [GenericTransaction];
    result: string;
  };
  /**
   * Returns an object with data about the sync status or false.
   */
  eth_syncing: {
    /**
     * @minItems 0
     */
    params: [];
    result:
      | {
          startingBlock?: string;
          currentBlock?: string;
          highestBlock?: string;
        }
      | boolean;
  };
  /**
   * Uninstalls a filter with given id.
   */
  eth_uninstallFilter: {
    /**
     * @minItems 0
     */
    params: [] | [string];
    result: boolean;
  };
}
export interface BadBlock {
  block: Block;
  hash: string;
  rlp: string;
}
export interface Block {
  hash: string;
  parentHash: string;
  sha3Uncles: string;
  miner: string;
  stateRoot: string;
  transactionsRoot: string;
  receiptsRoot: string;
  logsBloom: string;
  difficulty?: string;
  number: string;
  gasLimit: string;
  gasUsed: string;
  timestamp: string;
  extraData: string;
  mixHash: string;
  nonce: string;
  totalDifficulty?: string;
  baseFeePerGas?: string;
  withdrawalsRoot?: string;
  size: string;
  transactions: string[] | TransactionInfo[];
  withdrawals?: Withdrawal[];
  uncles: string[];
}
export interface Transaction1559Unsigned {
  type: string;
  nonce: string;
  to?: null | string;
  gas: string;
  value: string;
  input: string;
  /**
   * Maximum fee per gas the sender is willing to pay to miners in wei
   */
  maxPriorityFeePerGas: string;
  /**
   * The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei
   */
  maxFeePerGas: string;
  /**
   * The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using effectiveGasPrice in the receipt object going forward.
   */
  gasPrice: string;
  accessList: AccessList;
  /**
   * Chain ID that this transaction is valid on.
   */
  chainId: string;
}
export interface AccessListEntry {
  address?: string;
  storageKeys?: string[];
}
export interface Transaction2930Unsigned {
  type: string;
  nonce: string;
  to?: null | string;
  gas: string;
  value: string;
  input: string;
  /**
   * The gas price willing to be paid by the sender in wei
   */
  gasPrice: string;
  accessList: AccessList1;
  /**
   * Chain ID that this transaction is valid on.
   */
  chainId: string;
}
export interface TransactionLegacyUnsigned {
  type: string;
  nonce: string;
  to?: null | string;
  gas: string;
  value: string;
  input: string;
  /**
   * The gas price willing to be paid by the sender in wei
   */
  gasPrice: string;
  /**
   * Chain ID that this transaction is valid on.
   */
  chainId?: string;
}
export interface Withdrawal {
  index: string;
  validatorIndex: string;
  address: string;
  amount: string;
}
export interface TransitionConfigurationV1 {
  terminalTotalDifficulty: string;
  terminalBlockHash: string;
  terminalBlockNumber: string;
}
export interface ForkchoiceStateV1 {
  headBlockHash: string;
  safeBlockHash: string;
  finalizedBlockHash: string;
}
export interface PayloadAttributesV1 {
  timestamp: string;
  prevRandao: string;
  suggestedFeeRecipient: string;
}
export interface ForkchoiceUpdatedResponseV1 {
  payloadStatus: RestrictedPayloadStatusV1;
  payloadId?: string;
}
export interface RestrictedPayloadStatusV1 {
  /**
   * Set of possible values is restricted to VALID, INVALID, SYNCING
   */
  status: "VALID" | "INVALID" | "SYNCING";
  latestValidHash?: string;
  validationError?: string;
}
export interface PayloadAttributesV2 {
  timestamp: string;
  prevRandao: string;
  suggestedFeeRecipient: string;
  withdrawals: Withdrawals;
}
export interface WithdrawalV1 {
  index: string;
  validatorIndex: string;
  address: string;
  amount: string;
}
export interface PayloadAttributesV3 {
  timestamp: string;
  prevRandao: string;
  suggestedFeeRecipient: string;
  withdrawals: Withdrawals;
  parentBeaconBlockRoot: string;
}
export interface ExecutionPayloadBodyV1 {
  transactions: Transactions;
  withdrawals?: WithdrawalV1[] | null;
}
export interface ExecutionPayloadV1 {
  parentHash: string;
  feeRecipient: string;
  stateRoot: string;
  receiptsRoot: string;
  logsBloom: string;
  prevRandao: string;
  blockNumber: string;
  gasLimit: string;
  gasUsed: string;
  timestamp: string;
  extraData: string;
  baseFeePerGas: string;
  blockHash: string;
  transactions: Transactions;
}
export interface ExecutionPayloadV2 {
  parentHash: string;
  feeRecipient: string;
  stateRoot: string;
  receiptsRoot: string;
  logsBloom: string;
  prevRandao: string;
  blockNumber: string;
  gasLimit: string;
  gasUsed: string;
  timestamp: string;
  extraData: string;
  baseFeePerGas: string;
  blockHash: string;
  transactions: Transactions;
  withdrawals: Withdrawals1;
}
export interface ExecutionPayloadV3 {
  parentHash: string;
  feeRecipient: string;
  stateRoot: string;
  receiptsRoot: string;
  logsBloom: string;
  prevRandao: string;
  blockNumber: string;
  gasLimit: string;
  gasUsed: string;
  timestamp: string;
  extraData: string;
  baseFeePerGas: string;
  blockHash: string;
  transactions: Transactions;
  withdrawals: Withdrawals1;
  blobGasUsed: string;
  excessBlobGas: string;
}
export interface BlobsBundleV1 {
  commitments: string[];
  proofs: string[];
  blobs: string[];
}
export interface PayloadStatusV1 {
  status: "VALID" | "INVALID" | "SYNCING" | "ACCEPTED" | "INVALID_BLOCK_HASH";
  latestValidHash?: string;
  validationError?: string;
}
export interface PayloadStatusNoInvalidBlockHash {
  status: "VALID" | "INVALID" | "SYNCING" | "ACCEPTED";
  latestValidHash?: string;
  validationError?: string;
}
export interface GenericTransaction {
  type?: string;
  nonce?: string;
  to?: null | string;
  from?: string;
  gas?: string;
  value?: string;
  input?: string;
  /**
   * The gas price willing to be paid by the sender in wei
   */
  gasPrice?: string;
  /**
   * Maximum fee per gas the sender is willing to pay to miners in wei
   */
  maxPriorityFeePerGas?: string;
  /**
   * The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei
   */
  maxFeePerGas?: string;
  accessList?: AccessList2;
  /**
   * Chain ID that this transaction is valid on.
   */
  chainId?: string;
}
export interface ReceiptInfo {
  type?: string;
  transactionHash: string;
  transactionIndex: string;
  blockHash: string;
  blockNumber: string;
  from: string;
  /**
   * Address of the receiver or null in a contract creation transaction.
   */
  to?: null | string;
  /**
   * The sum of gas used by this transaction and all preceding transactions in the same block.
   */
  cumulativeGasUsed: string;
  /**
   * The amount of gas used for this specific transaction alone.
   */
  gasUsed: string;
  /**
   * The contract address created, if the transaction was a contract creation, otherwise null.
   */
  contractAddress?: string | null;
  logs: Log[];
  logsBloom: string;
  /**
   * The post-transaction state root. Only specified for transactions included before the Byzantium upgrade.
   */
  root?: string;
  /**
   * Either 1 (success) or 0 (failure). Only specified for transactions included after the Byzantium upgrade.
   */
  status?: string;
  /**
   * The actual value per gas deducted from the senders account. Before EIP-1559, this is equal to the transaction's gas price. After, it is equal to baseFeePerGas + min(maxFeePerGas - baseFeePerGas, maxPriorityFeePerGas).
   */
  effectiveGasPrice: string;
}
export interface Log {
  removed?: boolean;
  logIndex?: string;
  transactionIndex?: string;
  transactionHash: string;
  blockHash?: string;
  blockNumber?: string;
  address?: string;
  data?: string;
  topics?: string[];
}
export interface Filter {
  fromBlock?: string;
  toBlock?: string;
  address?: string | Addresses;
  topics?: FilterTopics;
}
export interface AccountProof {
  address: string;
  accountProof: string[];
  balance: string;
  codeHash: string;
  nonce: string;
  storageHash: string;
  storageProof: StorageProof[];
}
export interface StorageProof {
  key: string;
  value: string;
  proof: string[];
}
