{
  "openapi": "3.0.1",
  "info": {
    "title": "Cosmos SDK - gRPC Gateway docs",
    "description": "A REST interface for state queries.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "paths": {
    "/cosmos/auth/v1beta1/account_info/{address}": {
      "get": {
        "tags": ["Query"],
        "summary": "AccountInfo queries account info which is common to all account types.",
        "description": "Since: cosmos-sdk 0.47",
        "operationId": "AccountInfo",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the account address string.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "info": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "type": "string"
                        },
                        "pub_key": {
                          "type": "object",
                          "properties": {
                            "type_url": {
                              "type": "string",
                              "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                            },
                            "value": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Must be a valid serialized protocol buffer of the above specified type.",
                              "format": "byte"
                            }
                          },
                          "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                        },
                        "account_number": {
                          "type": "string",
                          "format": "uint64"
                        },
                        "sequence": {
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "info is the account info which is represented by BaseAccount."
                    }
                  },
                  "description": "QueryAccountInfoResponse is the Query/AccountInfo response type.\n\nSince: cosmos-sdk 0.47"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/accounts": {
      "get": {
        "tags": ["Query"],
        "summary": "Accounts returns all the existing accounts.",
        "description": "When called from another module, this query might consume a high amount of\ngas if the pagination field is incorrectly set.\n\nSince: cosmos-sdk 0.43",
        "operationId": "Accounts",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accounts": {
                      "title": "accounts are the existing accounts",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryAccountsResponse is the response type for the Query/Accounts RPC method.\n\nSince: cosmos-sdk 0.43"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/accounts/{address}": {
      "get": {
        "tags": ["Query"],
        "summary": "Account returns account details based on address.",
        "operationId": "Account",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address defines the address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "account": {
                      "type": "object",
                      "properties": {
                        "type_url": {
                          "type": "string",
                          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                        },
                        "value": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "Must be a valid serialized protocol buffer of the above specified type.",
                          "format": "byte"
                        }
                      },
                      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                    }
                  },
                  "description": "QueryAccountResponse is the response type for the Query/Account RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/address_by_id/{id}": {
      "get": {
        "tags": ["Query"],
        "summary": "AccountAddressByID returns account address based on account number.",
        "description": "Since: cosmos-sdk 0.46.2",
        "operationId": "AccountAddressByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Deprecated, use account_id instead\n\nid is the account number of the address to be queried. This field\nshould have been an uint64 (like all account numbers), and will be\nupdated to uint64 in a future version of the auth query.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "description": "account_id is the account number of the address to be queried.\n\nSince: cosmos-sdk 0.47",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QueryAccountAddressByIDResponse is the response type for AccountAddressByID rpc method",
                  "type": "object",
                  "properties": {
                    "account_address": {
                      "type": "string"
                    }
                  },
                  "description": "Since: cosmos-sdk 0.46.2"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/bech32": {
      "get": {
        "tags": ["Query"],
        "summary": "Bech32Prefix queries bech32Prefix",
        "description": "Since: cosmos-sdk 0.46",
        "operationId": "Bech32Prefix",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bech32_prefix": {
                      "type": "string"
                    }
                  },
                  "description": "Bech32PrefixResponse is the response type for Bech32Prefix rpc method.\n\nSince: cosmos-sdk 0.46"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/bech32/{address_bytes}": {
      "get": {
        "tags": ["Query"],
        "summary": "AddressBytesToString converts Account Address bytes to string",
        "description": "Since: cosmos-sdk 0.46",
        "operationId": "AddressBytesToString",
        "parameters": [
          {
            "name": "address_bytes",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address_string": {
                      "type": "string"
                    }
                  },
                  "description": "AddressBytesToStringResponse is the response type for AddressString rpc method.\n\nSince: cosmos-sdk 0.46"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/bech32/{address_string}": {
      "get": {
        "tags": ["Query"],
        "summary": "AddressStringToBytes converts Address string to bytes",
        "description": "Since: cosmos-sdk 0.46",
        "operationId": "AddressStringToBytes",
        "parameters": [
          {
            "name": "address_string",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address_bytes": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    }
                  },
                  "description": "AddressStringToBytesResponse is the response type for AddressBytes rpc method.\n\nSince: cosmos-sdk 0.46"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/module_accounts": {
      "get": {
        "tags": ["Query"],
        "summary": "ModuleAccounts returns all the existing module accounts.",
        "description": "Since: cosmos-sdk 0.46",
        "operationId": "ModuleAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accounts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  },
                  "description": "QueryModuleAccountsResponse is the response type for the Query/ModuleAccounts RPC method.\n\nSince: cosmos-sdk 0.46"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/module_accounts/{name}": {
      "get": {
        "tags": ["Query"],
        "summary": "ModuleAccountByName returns the module account info by module name",
        "operationId": "ModuleAccountByName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "account": {
                      "type": "object",
                      "properties": {
                        "type_url": {
                          "type": "string",
                          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                        },
                        "value": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "Must be a valid serialized protocol buffer of the above specified type.",
                          "format": "byte"
                        }
                      },
                      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                    }
                  },
                  "description": "QueryModuleAccountByNameResponse is the response type for the Query/ModuleAccountByName RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/params": {
      "get": {
        "tags": ["Query"],
        "summary": "Params queries all parameters.",
        "operationId": "AuthParams",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "params": {
                      "type": "object",
                      "properties": {
                        "max_memo_characters": {
                          "type": "string",
                          "format": "uint64"
                        },
                        "tx_sig_limit": {
                          "type": "string",
                          "format": "uint64"
                        },
                        "tx_size_cost_per_byte": {
                          "type": "string",
                          "format": "uint64"
                        },
                        "sig_verify_cost_ed25519": {
                          "type": "string",
                          "format": "uint64"
                        },
                        "sig_verify_cost_secp256k1": {
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "params defines the parameters of the module."
                    }
                  },
                  "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/balances/{address}": {
      "get": {
        "tags": ["Query"],
        "summary": "AllBalances queries the balance of all coins for a single account.",
        "description": "When called from another module, this query might consume a high amount of\ngas if the pagination field is incorrectly set.",
        "operationId": "AllBalances",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the address to query balances for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "resolve_denom",
            "in": "query",
            "description": "resolve_denom is the flag to resolve the denom into a human-readable form from the metadata.\n\nSince: cosmos-sdk 0.50",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "balances": {
                      "type": "array",
                      "description": "balances is the balances of all the coins.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "denom": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "string"
                          }
                        },
                        "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryAllBalancesResponse is the response type for the Query/AllBalances RPC\nmethod."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/balances/{address}/by_denom": {
      "get": {
        "tags": ["Query"],
        "summary": "Balance queries the balance of a single coin for a single account.",
        "operationId": "Balance",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the address to query balances for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "denom",
            "in": "query",
            "description": "denom is the coin denom to query balances for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "balance": {
                      "type": "object",
                      "properties": {
                        "denom": {
                          "type": "string"
                        },
                        "amount": {
                          "type": "string"
                        }
                      },
                      "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                    }
                  },
                  "description": "QueryBalanceResponse is the response type for the Query/Balance RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/denom_owners/{denom}": {
      "get": {
        "tags": ["Query"],
        "summary": "DenomOwners queries for all account addresses that own a particular token\ndenomination.",
        "description": "When called from another module, this query might consume a high amount of\ngas if the pagination field is incorrectly set.\n\nSince: cosmos-sdk 0.46",
        "operationId": "DenomOwners",
        "parameters": [
          {
            "name": "denom",
            "in": "path",
            "description": "denom defines the coin denomination to query all account holders for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "denom_owners": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string",
                            "description": "address defines the address that owns a particular denomination."
                          },
                          "balance": {
                            "type": "object",
                            "properties": {
                              "denom": {
                                "type": "string"
                              },
                              "amount": {
                                "type": "string"
                              }
                            },
                            "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                          }
                        },
                        "description": "DenomOwner defines structure representing an account that owns or holds a\nparticular denominated token. It contains the account address and account\nbalance of the denominated token.\n\nSince: cosmos-sdk 0.46"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryDenomOwnersResponse defines the RPC response of a DenomOwners RPC query.\n\nSince: cosmos-sdk 0.46"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/denoms_metadata": {
      "get": {
        "tags": ["Query"],
        "summary": "DenomsMetadata queries the client metadata for all registered coin\ndenominations.",
        "operationId": "DenomsMetadata",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadatas": {
                      "type": "array",
                      "description": "metadata provides the client information for all the registered tokens.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "description": {
                            "type": "string"
                          },
                          "denom_units": {
                            "title": "denom_units represents the list of DenomUnit's for a given coin",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "denom": {
                                  "type": "string",
                                  "description": "denom represents the string name of the given denom unit (e.g uatom)."
                                },
                                "exponent": {
                                  "type": "integer",
                                  "description": "exponent represents power of 10 exponent that one must\nraise the base_denom to in order to equal the given DenomUnit's denom\n1 denom = 10^exponent base_denom\n(e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with\nexponent = 6, thus: 1 atom = 10^6 uatom).",
                                  "format": "int64"
                                },
                                "aliases": {
                                  "title": "aliases is a list of string aliases for the given denom",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "description": "DenomUnit represents a struct that describes a given\ndenomination unit of the basic token."
                            }
                          },
                          "base": {
                            "type": "string",
                            "description": "base represents the base denom (should be the DenomUnit with exponent = 0)."
                          },
                          "display": {
                            "type": "string",
                            "description": "display indicates the suggested denom that should be\ndisplayed in clients."
                          },
                          "name": {
                            "title": "name defines the name of the token (eg: Cosmos Atom)",
                            "type": "string",
                            "description": "Since: cosmos-sdk 0.43"
                          },
                          "symbol": {
                            "type": "string",
                            "description": "symbol is the token symbol usually shown on exchanges (eg: ATOM). This can\nbe the same as the display.\n\nSince: cosmos-sdk 0.43"
                          },
                          "uri": {
                            "type": "string",
                            "description": "URI to a document (on or off-chain) that contains additional information. Optional.\n\nSince: cosmos-sdk 0.46"
                          },
                          "uri_hash": {
                            "type": "string",
                            "description": "URIHash is a sha256 hash of a document pointed by URI. It's used to verify that\nthe document didn't change. Optional.\n\nSince: cosmos-sdk 0.46"
                          }
                        },
                        "description": "Metadata represents a struct that describes\na basic token."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC\nmethod."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/denoms_metadata/{denom}": {
      "get": {
        "tags": ["Query"],
        "summary": "DenomsMetadata queries the client metadata of a given coin denomination.",
        "operationId": "DenomMetadata",
        "parameters": [
          {
            "name": "denom",
            "in": "path",
            "description": "denom is the coin denom to query the metadata for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        },
                        "denom_units": {
                          "title": "denom_units represents the list of DenomUnit's for a given coin",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "denom": {
                                "type": "string",
                                "description": "denom represents the string name of the given denom unit (e.g uatom)."
                              },
                              "exponent": {
                                "type": "integer",
                                "description": "exponent represents power of 10 exponent that one must\nraise the base_denom to in order to equal the given DenomUnit's denom\n1 denom = 10^exponent base_denom\n(e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with\nexponent = 6, thus: 1 atom = 10^6 uatom).",
                                "format": "int64"
                              },
                              "aliases": {
                                "title": "aliases is a list of string aliases for the given denom",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "description": "DenomUnit represents a struct that describes a given\ndenomination unit of the basic token."
                          }
                        },
                        "base": {
                          "type": "string",
                          "description": "base represents the base denom (should be the DenomUnit with exponent = 0)."
                        },
                        "display": {
                          "type": "string",
                          "description": "display indicates the suggested denom that should be\ndisplayed in clients."
                        },
                        "name": {
                          "title": "name defines the name of the token (eg: Cosmos Atom)",
                          "type": "string",
                          "description": "Since: cosmos-sdk 0.43"
                        },
                        "symbol": {
                          "type": "string",
                          "description": "symbol is the token symbol usually shown on exchanges (eg: ATOM). This can\nbe the same as the display.\n\nSince: cosmos-sdk 0.43"
                        },
                        "uri": {
                          "type": "string",
                          "description": "URI to a document (on or off-chain) that contains additional information. Optional.\n\nSince: cosmos-sdk 0.46"
                        },
                        "uri_hash": {
                          "type": "string",
                          "description": "URIHash is a sha256 hash of a document pointed by URI. It's used to verify that\nthe document didn't change. Optional.\n\nSince: cosmos-sdk 0.46"
                        }
                      },
                      "description": "Metadata represents a struct that describes\na basic token."
                    }
                  },
                  "description": "QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC\nmethod."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/denoms_metadata_by_query_string": {
      "get": {
        "tags": ["Query"],
        "summary": "DenomsMetadata queries the client metadata of a given coin denomination.",
        "operationId": "DenomMetadataByQueryString",
        "parameters": [
          {
            "name": "denom",
            "in": "query",
            "description": "denom is the coin denom to query the metadata for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        },
                        "denom_units": {
                          "title": "denom_units represents the list of DenomUnit's for a given coin",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "denom": {
                                "type": "string",
                                "description": "denom represents the string name of the given denom unit (e.g uatom)."
                              },
                              "exponent": {
                                "type": "integer",
                                "description": "exponent represents power of 10 exponent that one must\nraise the base_denom to in order to equal the given DenomUnit's denom\n1 denom = 10^exponent base_denom\n(e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with\nexponent = 6, thus: 1 atom = 10^6 uatom).",
                                "format": "int64"
                              },
                              "aliases": {
                                "title": "aliases is a list of string aliases for the given denom",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "description": "DenomUnit represents a struct that describes a given\ndenomination unit of the basic token."
                          }
                        },
                        "base": {
                          "type": "string",
                          "description": "base represents the base denom (should be the DenomUnit with exponent = 0)."
                        },
                        "display": {
                          "type": "string",
                          "description": "display indicates the suggested denom that should be\ndisplayed in clients."
                        },
                        "name": {
                          "title": "name defines the name of the token (eg: Cosmos Atom)",
                          "type": "string",
                          "description": "Since: cosmos-sdk 0.43"
                        },
                        "symbol": {
                          "type": "string",
                          "description": "symbol is the token symbol usually shown on exchanges (eg: ATOM). This can\nbe the same as the display.\n\nSince: cosmos-sdk 0.43"
                        },
                        "uri": {
                          "type": "string",
                          "description": "URI to a document (on or off-chain) that contains additional information. Optional.\n\nSince: cosmos-sdk 0.46"
                        },
                        "uri_hash": {
                          "type": "string",
                          "description": "URIHash is a sha256 hash of a document pointed by URI. It's used to verify that\nthe document didn't change. Optional.\n\nSince: cosmos-sdk 0.46"
                        }
                      },
                      "description": "Metadata represents a struct that describes\na basic token."
                    }
                  },
                  "description": "QueryDenomMetadataByQueryStringResponse is the response type for the Query/DenomMetadata RPC\nmethod. Identical with QueryDenomMetadataResponse but receives denom as query string in request."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/params": {
      "get": {
        "tags": ["Query"],
        "summary": "Params queries the parameters of x/bank module.",
        "operationId": "BankParams",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "params": {
                      "type": "object",
                      "properties": {
                        "send_enabled": {
                          "type": "array",
                          "description": "Deprecated: Use of SendEnabled in params is deprecated.\nFor genesis, use the newly added send_enabled field in the genesis object.\nStorage, lookup, and manipulation of this information is now in the keeper.\n\nAs of cosmos-sdk 0.47, this only exists for backwards compatibility of genesis files.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "denom": {
                                "type": "string"
                              },
                              "enabled": {
                                "type": "boolean"
                              }
                            },
                            "description": "SendEnabled maps coin denom to a send_enabled status (whether a denom is\nsendable)."
                          }
                        },
                        "default_send_enabled": {
                          "type": "boolean"
                        }
                      },
                      "description": "params provides the parameters of the bank module."
                    }
                  },
                  "description": "QueryParamsResponse defines the response type for querying x/bank parameters."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/send_enabled": {
      "get": {
        "tags": ["Query"],
        "summary": "SendEnabled queries for SendEnabled entries.",
        "description": "This query only returns denominations that have specific SendEnabled settings.\nAny denomination that does not have a specific setting will use the default\nparams.default_send_enabled, and will not be returned by this query.\n\nSince: cosmos-sdk 0.47",
        "operationId": "SendEnabled",
        "parameters": [
          {
            "name": "denoms",
            "in": "query",
            "description": "denoms is the specific denoms you want look up. Leave empty to get all entries.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "send_enabled": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "denom": {
                            "type": "string"
                          },
                          "enabled": {
                            "type": "boolean"
                          }
                        },
                        "description": "SendEnabled maps coin denom to a send_enabled status (whether a denom is\nsendable)."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response. This field is only\npopulated if the denoms field in the request is empty."
                    }
                  },
                  "description": "QuerySendEnabledResponse defines the RPC response of a SendEnable query.\n\nSince: cosmos-sdk 0.47"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/spendable_balances/{address}": {
      "get": {
        "tags": ["Query"],
        "summary": "SpendableBalances queries the spendable balance of all coins for a single\naccount.",
        "description": "When called from another module, this query might consume a high amount of\ngas if the pagination field is incorrectly set.\n\nSince: cosmos-sdk 0.46",
        "operationId": "SpendableBalances",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the address to query spendable balances for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "balances": {
                      "type": "array",
                      "description": "balances is the spendable balances of all the coins.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "denom": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "string"
                          }
                        },
                        "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QuerySpendableBalancesResponse defines the gRPC response structure for querying\nan account's spendable balances.\n\nSince: cosmos-sdk 0.46"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/spendable_balances/{address}/by_denom": {
      "get": {
        "tags": ["Query"],
        "summary": "SpendableBalanceByDenom queries the spendable balance of a single denom for\na single account.",
        "description": "When called from another module, this query might consume a high amount of\ngas if the pagination field is incorrectly set.\n\nSince: cosmos-sdk 0.47",
        "operationId": "SpendableBalanceByDenom",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the address to query balances for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "denom",
            "in": "query",
            "description": "denom is the coin denom to query balances for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "balance": {
                      "type": "object",
                      "properties": {
                        "denom": {
                          "type": "string"
                        },
                        "amount": {
                          "type": "string"
                        }
                      },
                      "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                    }
                  },
                  "description": "QuerySpendableBalanceByDenomResponse defines the gRPC response structure for\nquerying an account's spendable balance for a specific denom.\n\nSince: cosmos-sdk 0.47"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/supply": {
      "get": {
        "tags": ["Query"],
        "summary": "TotalSupply queries the total supply of all coins.",
        "description": "When called from another module, this query might consume a high amount of\ngas if the pagination field is incorrectly set.",
        "operationId": "TotalSupply",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC\nmethod",
                  "type": "object",
                  "properties": {
                    "supply": {
                      "title": "supply is the supply of the coins",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "denom": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "string"
                          }
                        },
                        "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response.\n\nSince: cosmos-sdk 0.43"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/supply/by_denom": {
      "get": {
        "tags": ["Query"],
        "summary": "SupplyOf queries the supply of a single coin.",
        "description": "When called from another module, this query might consume a high amount of\ngas if the pagination field is incorrectly set.",
        "operationId": "SupplyOf",
        "parameters": [
          {
            "name": "denom",
            "in": "query",
            "description": "denom is the coin denom to query balances for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "object",
                      "properties": {
                        "denom": {
                          "type": "string"
                        },
                        "amount": {
                          "type": "string"
                        }
                      },
                      "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                    }
                  },
                  "description": "QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/tendermint/v1beta1/abci_query": {
      "get": {
        "tags": ["Service"],
        "summary": "ABCIQuery defines a query handler that supports ABCI queries directly to the\napplication, bypassing Tendermint completely. The ABCI query must contain\na valid and supported path, including app, custom, p2p, and store.",
        "description": "Since: cosmos-sdk 0.46",
        "operationId": "ABCIQuery",
        "parameters": [
          {
            "name": "data",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "path",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "prove",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "log": {
                      "type": "string"
                    },
                    "info": {
                      "type": "string"
                    },
                    "index": {
                      "type": "string",
                      "format": "int64"
                    },
                    "key": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    },
                    "proof_ops": {
                      "type": "object",
                      "properties": {
                        "ops": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "key": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "format": "byte"
                              },
                              "data": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "format": "byte"
                              }
                            },
                            "description": "ProofOp defines an operation used for calculating Merkle root. The data could\nbe arbitrary format, providing necessary data for example neighbouring node\nhash.\n\nNote: This type is a duplicate of the ProofOp proto type defined in Tendermint."
                          }
                        }
                      },
                      "description": "ProofOps is Merkle proof defined by the list of ProofOps.\n\nNote: This type is a duplicate of the ProofOps proto type defined in Tendermint."
                    },
                    "height": {
                      "type": "string",
                      "format": "int64"
                    },
                    "codespace": {
                      "type": "string"
                    }
                  },
                  "description": "ABCIQueryResponse defines the response structure for the ABCIQuery gRPC query.\n\nNote: This type is a duplicate of the ResponseQuery proto type defined in\nTendermint."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/tendermint/v1beta1/blocks/latest": {
      "get": {
        "tags": ["Service"],
        "summary": "GetLatestBlock returns the latest block.",
        "operationId": "GetLatestBlock",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "block_id": {
                      "title": "BlockID",
                      "type": "object",
                      "properties": {
                        "hash": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        },
                        "part_set_header": {
                          "title": "PartsetHeader",
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            }
                          }
                        }
                      }
                    },
                    "block": {
                      "title": "Deprecated: please use `sdk_block` instead",
                      "type": "object",
                      "properties": {
                        "header": {
                          "type": "object",
                          "properties": {
                            "version": {
                              "title": "basic block info",
                              "type": "object",
                              "properties": {
                                "block": {
                                  "type": "string",
                                  "format": "uint64"
                                },
                                "app": {
                                  "type": "string",
                                  "format": "uint64"
                                }
                              },
                              "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                            },
                            "chain_id": {
                              "type": "string"
                            },
                            "height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "time": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "last_block_id": {
                              "title": "BlockID",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "part_set_header": {
                                  "title": "PartsetHeader",
                                  "type": "object",
                                  "properties": {
                                    "total": {
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    }
                                  }
                                }
                              }
                            },
                            "last_commit_hash": {
                              "title": "hashes of block data",
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "data_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "validators_hash": {
                              "title": "hashes from the app output from the prev block",
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "next_validators_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "consensus_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "app_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "last_results_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "evidence_hash": {
                              "title": "consensus info",
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "proposer_address": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            }
                          },
                          "description": "Header defines the structure of a block header."
                        },
                        "data": {
                          "title": "Data contains the set of transactions included in the block",
                          "type": "object",
                          "properties": {
                            "txs": {
                              "type": "array",
                              "description": "Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs.",
                              "items": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "format": "byte"
                              }
                            }
                          }
                        },
                        "evidence": {
                          "type": "object",
                          "properties": {
                            "evidence": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "duplicate_vote_evidence": {
                                    "type": "object",
                                    "properties": {
                                      "vote_a": {
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                            "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                            "enum": [
                                              "SIGNED_MSG_TYPE_UNKNOWN",
                                              "SIGNED_MSG_TYPE_PREVOTE",
                                              "SIGNED_MSG_TYPE_PRECOMMIT",
                                              "SIGNED_MSG_TYPE_PROPOSAL"
                                            ]
                                          },
                                          "height": {
                                            "type": "string",
                                            "format": "int64"
                                          },
                                          "round": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "block_id": {
                                            "title": "BlockID",
                                            "type": "object",
                                            "properties": {
                                              "hash": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "part_set_header": {
                                                "title": "PartsetHeader",
                                                "type": "object",
                                                "properties": {
                                                  "total": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                  },
                                                  "hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "timestamp": {
                                            "type": "string",
                                            "format": "date-time"
                                          },
                                          "validator_address": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "validator_index": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                            "format": "byte"
                                          },
                                          "extension": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                            "format": "byte"
                                          },
                                          "extension_signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                            "format": "byte"
                                          }
                                        },
                                        "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                                      },
                                      "vote_b": {
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                            "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                            "enum": [
                                              "SIGNED_MSG_TYPE_UNKNOWN",
                                              "SIGNED_MSG_TYPE_PREVOTE",
                                              "SIGNED_MSG_TYPE_PRECOMMIT",
                                              "SIGNED_MSG_TYPE_PROPOSAL"
                                            ]
                                          },
                                          "height": {
                                            "type": "string",
                                            "format": "int64"
                                          },
                                          "round": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "block_id": {
                                            "title": "BlockID",
                                            "type": "object",
                                            "properties": {
                                              "hash": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "part_set_header": {
                                                "title": "PartsetHeader",
                                                "type": "object",
                                                "properties": {
                                                  "total": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                  },
                                                  "hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "timestamp": {
                                            "type": "string",
                                            "format": "date-time"
                                          },
                                          "validator_address": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "validator_index": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                            "format": "byte"
                                          },
                                          "extension": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                            "format": "byte"
                                          },
                                          "extension_signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                            "format": "byte"
                                          }
                                        },
                                        "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                                      },
                                      "total_voting_power": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "validator_power": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "timestamp": {
                                        "type": "string",
                                        "format": "date-time"
                                      }
                                    },
                                    "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
                                  },
                                  "light_client_attack_evidence": {
                                    "type": "object",
                                    "properties": {
                                      "conflicting_block": {
                                        "type": "object",
                                        "properties": {
                                          "signed_header": {
                                            "type": "object",
                                            "properties": {
                                              "header": {
                                                "type": "object",
                                                "properties": {
                                                  "version": {
                                                    "title": "basic block info",
                                                    "type": "object",
                                                    "properties": {
                                                      "block": {
                                                        "type": "string",
                                                        "format": "uint64"
                                                      },
                                                      "app": {
                                                        "type": "string",
                                                        "format": "uint64"
                                                      }
                                                    },
                                                    "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                                                  },
                                                  "chain_id": {
                                                    "type": "string"
                                                  },
                                                  "height": {
                                                    "type": "string",
                                                    "format": "int64"
                                                  },
                                                  "time": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                  },
                                                  "last_block_id": {
                                                    "title": "BlockID",
                                                    "type": "object",
                                                    "properties": {
                                                      "hash": {
                                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                        "type": "string",
                                                        "format": "byte"
                                                      },
                                                      "part_set_header": {
                                                        "title": "PartsetHeader",
                                                        "type": "object",
                                                        "properties": {
                                                          "total": {
                                                            "type": "integer",
                                                            "format": "int64"
                                                          },
                                                          "hash": {
                                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                            "type": "string",
                                                            "format": "byte"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "last_commit_hash": {
                                                    "title": "hashes of block data",
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "data_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "validators_hash": {
                                                    "title": "hashes from the app output from the prev block",
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "next_validators_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "consensus_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "app_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "last_results_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "evidence_hash": {
                                                    "title": "consensus info",
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "proposer_address": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  }
                                                },
                                                "description": "Header defines the structure of a block header."
                                              },
                                              "commit": {
                                                "type": "object",
                                                "properties": {
                                                  "height": {
                                                    "type": "string",
                                                    "format": "int64"
                                                  },
                                                  "round": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  },
                                                  "block_id": {
                                                    "title": "BlockID",
                                                    "type": "object",
                                                    "properties": {
                                                      "hash": {
                                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                        "type": "string",
                                                        "format": "byte"
                                                      },
                                                      "part_set_header": {
                                                        "title": "PartsetHeader",
                                                        "type": "object",
                                                        "properties": {
                                                          "total": {
                                                            "type": "integer",
                                                            "format": "int64"
                                                          },
                                                          "hash": {
                                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                            "type": "string",
                                                            "format": "byte"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "signatures": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "block_id_flag": {
                                                          "title": "BlockIdFlag indicates which BlockID the signature is for",
                                                          "type": "string",
                                                          "default": "BLOCK_ID_FLAG_UNKNOWN",
                                                          "enum": [
                                                            "BLOCK_ID_FLAG_UNKNOWN",
                                                            "BLOCK_ID_FLAG_ABSENT",
                                                            "BLOCK_ID_FLAG_COMMIT",
                                                            "BLOCK_ID_FLAG_NIL"
                                                          ]
                                                        },
                                                        "validator_address": {
                                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                          "type": "string",
                                                          "format": "byte"
                                                        },
                                                        "timestamp": {
                                                          "type": "string",
                                                          "format": "date-time"
                                                        },
                                                        "signature": {
                                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                          "type": "string",
                                                          "format": "byte"
                                                        }
                                                      },
                                                      "description": "CommitSig is a part of the Vote included in a Commit."
                                                    }
                                                  }
                                                },
                                                "description": "Commit contains the evidence that a block was committed by a set of validators."
                                              }
                                            }
                                          },
                                          "validator_set": {
                                            "type": "object",
                                            "properties": {
                                              "validators": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "address": {
                                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                      "type": "string",
                                                      "format": "byte"
                                                    },
                                                    "pub_key": {
                                                      "title": "PublicKey defines the keys available for use with Validators",
                                                      "type": "object",
                                                      "properties": {
                                                        "ed25519": {
                                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                          "type": "string",
                                                          "format": "byte"
                                                        },
                                                        "secp256k1": {
                                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                          "type": "string",
                                                          "format": "byte"
                                                        }
                                                      }
                                                    },
                                                    "voting_power": {
                                                      "type": "string",
                                                      "format": "int64"
                                                    },
                                                    "proposer_priority": {
                                                      "type": "string",
                                                      "format": "int64"
                                                    }
                                                  }
                                                }
                                              },
                                              "proposer": {
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "pub_key": {
                                                    "title": "PublicKey defines the keys available for use with Validators",
                                                    "type": "object",
                                                    "properties": {
                                                      "ed25519": {
                                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                        "type": "string",
                                                        "format": "byte"
                                                      },
                                                      "secp256k1": {
                                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                        "type": "string",
                                                        "format": "byte"
                                                      }
                                                    }
                                                  },
                                                  "voting_power": {
                                                    "type": "string",
                                                    "format": "int64"
                                                  },
                                                  "proposer_priority": {
                                                    "type": "string",
                                                    "format": "int64"
                                                  }
                                                }
                                              },
                                              "total_voting_power": {
                                                "type": "string",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "common_height": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "byzantine_validators": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "address": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "pub_key": {
                                              "title": "PublicKey defines the keys available for use with Validators",
                                              "type": "object",
                                              "properties": {
                                                "ed25519": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                },
                                                "secp256k1": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                }
                                              }
                                            },
                                            "voting_power": {
                                              "type": "string",
                                              "format": "int64"
                                            },
                                            "proposer_priority": {
                                              "type": "string",
                                              "format": "int64"
                                            }
                                          }
                                        }
                                      },
                                      "total_voting_power": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "timestamp": {
                                        "type": "string",
                                        "format": "date-time"
                                      }
                                    },
                                    "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
                                  }
                                }
                              }
                            }
                          }
                        },
                        "last_commit": {
                          "type": "object",
                          "properties": {
                            "height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "round": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "block_id": {
                              "title": "BlockID",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "part_set_header": {
                                  "title": "PartsetHeader",
                                  "type": "object",
                                  "properties": {
                                    "total": {
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    }
                                  }
                                }
                              }
                            },
                            "signatures": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "block_id_flag": {
                                    "title": "BlockIdFlag indicates which BlockID the signature is for",
                                    "type": "string",
                                    "default": "BLOCK_ID_FLAG_UNKNOWN",
                                    "enum": [
                                      "BLOCK_ID_FLAG_UNKNOWN",
                                      "BLOCK_ID_FLAG_ABSENT",
                                      "BLOCK_ID_FLAG_COMMIT",
                                      "BLOCK_ID_FLAG_NIL"
                                    ]
                                  },
                                  "validator_address": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  },
                                  "timestamp": {
                                    "type": "string",
                                    "format": "date-time"
                                  },
                                  "signature": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  }
                                },
                                "description": "CommitSig is a part of the Vote included in a Commit."
                              }
                            }
                          },
                          "description": "Commit contains the evidence that a block was committed by a set of validators."
                        }
                      }
                    },
                    "sdk_block": {
                      "title": "Since: cosmos-sdk 0.47",
                      "type": "object",
                      "properties": {
                        "header": {
                          "type": "object",
                          "properties": {
                            "version": {
                              "title": "basic block info",
                              "type": "object",
                              "properties": {
                                "block": {
                                  "type": "string",
                                  "format": "uint64"
                                },
                                "app": {
                                  "type": "string",
                                  "format": "uint64"
                                }
                              },
                              "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                            },
                            "chain_id": {
                              "type": "string"
                            },
                            "height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "time": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "last_block_id": {
                              "title": "BlockID",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "part_set_header": {
                                  "title": "PartsetHeader",
                                  "type": "object",
                                  "properties": {
                                    "total": {
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    }
                                  }
                                }
                              }
                            },
                            "last_commit_hash": {
                              "title": "hashes of block data",
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "data_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "validators_hash": {
                              "title": "hashes from the app output from the prev block",
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "next_validators_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "consensus_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "app_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "last_results_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "evidence_hash": {
                              "title": "consensus info",
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "proposer_address": {
                              "type": "string",
                              "description": "proposer_address is the original block proposer address, formatted as a Bech32 string.\nIn Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string\nfor better UX."
                            }
                          },
                          "description": "Header defines the structure of a Tendermint block header."
                        },
                        "data": {
                          "title": "Data contains the set of transactions included in the block",
                          "type": "object",
                          "properties": {
                            "txs": {
                              "type": "array",
                              "description": "Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs.",
                              "items": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "format": "byte"
                              }
                            }
                          }
                        },
                        "evidence": {
                          "type": "object",
                          "properties": {
                            "evidence": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "duplicate_vote_evidence": {
                                    "type": "object",
                                    "properties": {
                                      "vote_a": {
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                            "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                            "enum": [
                                              "SIGNED_MSG_TYPE_UNKNOWN",
                                              "SIGNED_MSG_TYPE_PREVOTE",
                                              "SIGNED_MSG_TYPE_PRECOMMIT",
                                              "SIGNED_MSG_TYPE_PROPOSAL"
                                            ]
                                          },
                                          "height": {
                                            "type": "string",
                                            "format": "int64"
                                          },
                                          "round": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "block_id": {
                                            "title": "BlockID",
                                            "type": "object",
                                            "properties": {
                                              "hash": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "part_set_header": {
                                                "title": "PartsetHeader",
                                                "type": "object",
                                                "properties": {
                                                  "total": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                  },
                                                  "hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "timestamp": {
                                            "type": "string",
                                            "format": "date-time"
                                          },
                                          "validator_address": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "validator_index": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                            "format": "byte"
                                          },
                                          "extension": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                            "format": "byte"
                                          },
                                          "extension_signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                            "format": "byte"
                                          }
                                        },
                                        "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                                      },
                                      "vote_b": {
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                            "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                            "enum": [
                                              "SIGNED_MSG_TYPE_UNKNOWN",
                                              "SIGNED_MSG_TYPE_PREVOTE",
                                              "SIGNED_MSG_TYPE_PRECOMMIT",
                                              "SIGNED_MSG_TYPE_PROPOSAL"
                                            ]
                                          },
                                          "height": {
                                            "type": "string",
                                            "format": "int64"
                                          },
                                          "round": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "block_id": {
                                            "title": "BlockID",
                                            "type": "object",
                                            "properties": {
                                              "hash": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "part_set_header": {
                                                "title": "PartsetHeader",
                                                "type": "object",
                                                "properties": {
                                                  "total": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                  },
                                                  "hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "timestamp": {
                                            "type": "string",
                                            "format": "date-time"
                                          },
                                          "validator_address": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "validator_index": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                            "format": "byte"
                                          },
                                          "extension": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                            "format": "byte"
                                          },
                                          "extension_signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                            "format": "byte"
                                          }
                                        },
                                        "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                                      },
                                      "total_voting_power": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "validator_power": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "timestamp": {
                                        "type": "string",
                                        "format": "date-time"
                                      }
                                    },
                                    "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
                                  },
                                  "light_client_attack_evidence": {
                                    "type": "object",
                                    "properties": {
                                      "conflicting_block": {
                                        "type": "object",
                                        "properties": {
                                          "signed_header": {
                                            "type": "object",
                                            "properties": {
                                              "header": {
                                                "type": "object",
                                                "properties": {
                                                  "version": {
                                                    "title": "basic block info",
                                                    "type": "object",
                                                    "properties": {
                                                      "block": {
                                                        "type": "string",
                                                        "format": "uint64"
                                                      },
                                                      "app": {
                                                        "type": "string",
                                                        "format": "uint64"
                                                      }
                                                    },
                                                    "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                                                  },
                                                  "chain_id": {
                                                    "type": "string"
                                                  },
                                                  "height": {
                                                    "type": "string",
                                                    "format": "int64"
                                                  },
                                                  "time": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                  },
                                                  "last_block_id": {
                                                    "title": "BlockID",
                                                    "type": "object",
                                                    "properties": {
                                                      "hash": {
                                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                        "type": "string",
                                                        "format": "byte"
                                                      },
                                                      "part_set_header": {
                                                        "title": "PartsetHeader",
                                                        "type": "object",
                                                        "properties": {
                                                          "total": {
                                                            "type": "integer",
                                                            "format": "int64"
                                                          },
                                                          "hash": {
                                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                            "type": "string",
                                                            "format": "byte"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "last_commit_hash": {
                                                    "title": "hashes of block data",
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "data_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "validators_hash": {
                                                    "title": "hashes from the app output from the prev block",
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "next_validators_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "consensus_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "app_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "last_results_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "evidence_hash": {
                                                    "title": "consensus info",
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "proposer_address": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  }
                                                },
                                                "description": "Header defines the structure of a block header."
                                              },
                                              "commit": {
                                                "type": "object",
                                                "properties": {
                                                  "height": {
                                                    "type": "string",
                                                    "format": "int64"
                                                  },
                                                  "round": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  },
                                                  "block_id": {
                                                    "title": "BlockID",
                                                    "type": "object",
                                                    "properties": {
                                                      "hash": {
                                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                        "type": "string",
                                                        "format": "byte"
                                                      },
                                                      "part_set_header": {
                                                        "title": "PartsetHeader",
                                                        "type": "object",
                                                        "properties": {
                                                          "total": {
                                                            "type": "integer",
                                                            "format": "int64"
                                                          },
                                                          "hash": {
                                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                            "type": "string",
                                                            "format": "byte"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "signatures": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "block_id_flag": {
                                                          "title": "BlockIdFlag indicates which BlockID the signature is for",
                                                          "type": "string",
                                                          "default": "BLOCK_ID_FLAG_UNKNOWN",
                                                          "enum": [
                                                            "BLOCK_ID_FLAG_UNKNOWN",
                                                            "BLOCK_ID_FLAG_ABSENT",
                                                            "BLOCK_ID_FLAG_COMMIT",
                                                            "BLOCK_ID_FLAG_NIL"
                                                          ]
                                                        },
                                                        "validator_address": {
                                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                          "type": "string",
                                                          "format": "byte"
                                                        },
                                                        "timestamp": {
                                                          "type": "string",
                                                          "format": "date-time"
                                                        },
                                                        "signature": {
                                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                          "type": "string",
                                                          "format": "byte"
                                                        }
                                                      },
                                                      "description": "CommitSig is a part of the Vote included in a Commit."
                                                    }
                                                  }
                                                },
                                                "description": "Commit contains the evidence that a block was committed by a set of validators."
                                              }
                                            }
                                          },
                                          "validator_set": {
                                            "type": "object",
                                            "properties": {
                                              "validators": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "address": {
                                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                      "type": "string",
                                                      "format": "byte"
                                                    },
                                                    "pub_key": {
                                                      "title": "PublicKey defines the keys available for use with Validators",
                                                      "type": "object",
                                                      "properties": {
                                                        "ed25519": {
                                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                          "type": "string",
                                                          "format": "byte"
                                                        },
                                                        "secp256k1": {
                                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                          "type": "string",
                                                          "format": "byte"
                                                        }
                                                      }
                                                    },
                                                    "voting_power": {
                                                      "type": "string",
                                                      "format": "int64"
                                                    },
                                                    "proposer_priority": {
                                                      "type": "string",
                                                      "format": "int64"
                                                    }
                                                  }
                                                }
                                              },
                                              "proposer": {
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "pub_key": {
                                                    "title": "PublicKey defines the keys available for use with Validators",
                                                    "type": "object",
                                                    "properties": {
                                                      "ed25519": {
                                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                        "type": "string",
                                                        "format": "byte"
                                                      },
                                                      "secp256k1": {
                                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                        "type": "string",
                                                        "format": "byte"
                                                      }
                                                    }
                                                  },
                                                  "voting_power": {
                                                    "type": "string",
                                                    "format": "int64"
                                                  },
                                                  "proposer_priority": {
                                                    "type": "string",
                                                    "format": "int64"
                                                  }
                                                }
                                              },
                                              "total_voting_power": {
                                                "type": "string",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "common_height": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "byzantine_validators": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "address": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "pub_key": {
                                              "title": "PublicKey defines the keys available for use with Validators",
                                              "type": "object",
                                              "properties": {
                                                "ed25519": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                },
                                                "secp256k1": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                }
                                              }
                                            },
                                            "voting_power": {
                                              "type": "string",
                                              "format": "int64"
                                            },
                                            "proposer_priority": {
                                              "type": "string",
                                              "format": "int64"
                                            }
                                          }
                                        }
                                      },
                                      "total_voting_power": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "timestamp": {
                                        "type": "string",
                                        "format": "date-time"
                                      }
                                    },
                                    "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
                                  }
                                }
                              }
                            }
                          }
                        },
                        "last_commit": {
                          "type": "object",
                          "properties": {
                            "height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "round": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "block_id": {
                              "title": "BlockID",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "part_set_header": {
                                  "title": "PartsetHeader",
                                  "type": "object",
                                  "properties": {
                                    "total": {
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    }
                                  }
                                }
                              }
                            },
                            "signatures": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "block_id_flag": {
                                    "title": "BlockIdFlag indicates which BlockID the signature is for",
                                    "type": "string",
                                    "default": "BLOCK_ID_FLAG_UNKNOWN",
                                    "enum": [
                                      "BLOCK_ID_FLAG_UNKNOWN",
                                      "BLOCK_ID_FLAG_ABSENT",
                                      "BLOCK_ID_FLAG_COMMIT",
                                      "BLOCK_ID_FLAG_NIL"
                                    ]
                                  },
                                  "validator_address": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  },
                                  "timestamp": {
                                    "type": "string",
                                    "format": "date-time"
                                  },
                                  "signature": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  }
                                },
                                "description": "CommitSig is a part of the Vote included in a Commit."
                              }
                            }
                          },
                          "description": "Commit contains the evidence that a block was committed by a set of validators."
                        }
                      },
                      "description": "Block is tendermint type Block, with the Header proposer address\nfield converted to bech32 string."
                    }
                  },
                  "description": "GetLatestBlockResponse is the response type for the Query/GetLatestBlock RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/tendermint/v1beta1/blocks/{height}": {
      "get": {
        "tags": ["Service"],
        "summary": "GetBlockByHeight queries block for given height.",
        "operationId": "GetBlockByHeight",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "block_id": {
                      "title": "BlockID",
                      "type": "object",
                      "properties": {
                        "hash": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        },
                        "part_set_header": {
                          "title": "PartsetHeader",
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            }
                          }
                        }
                      }
                    },
                    "block": {
                      "title": "Deprecated: please use `sdk_block` instead",
                      "type": "object",
                      "properties": {
                        "header": {
                          "type": "object",
                          "properties": {
                            "version": {
                              "title": "basic block info",
                              "type": "object",
                              "properties": {
                                "block": {
                                  "type": "string",
                                  "format": "uint64"
                                },
                                "app": {
                                  "type": "string",
                                  "format": "uint64"
                                }
                              },
                              "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                            },
                            "chain_id": {
                              "type": "string"
                            },
                            "height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "time": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "last_block_id": {
                              "title": "BlockID",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "part_set_header": {
                                  "title": "PartsetHeader",
                                  "type": "object",
                                  "properties": {
                                    "total": {
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    }
                                  }
                                }
                              }
                            },
                            "last_commit_hash": {
                              "title": "hashes of block data",
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "data_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "validators_hash": {
                              "title": "hashes from the app output from the prev block",
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "next_validators_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "consensus_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "app_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "last_results_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "evidence_hash": {
                              "title": "consensus info",
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "proposer_address": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            }
                          },
                          "description": "Header defines the structure of a block header."
                        },
                        "data": {
                          "title": "Data contains the set of transactions included in the block",
                          "type": "object",
                          "properties": {
                            "txs": {
                              "type": "array",
                              "description": "Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs.",
                              "items": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "format": "byte"
                              }
                            }
                          }
                        },
                        "evidence": {
                          "type": "object",
                          "properties": {
                            "evidence": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "duplicate_vote_evidence": {
                                    "type": "object",
                                    "properties": {
                                      "vote_a": {
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                            "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                            "enum": [
                                              "SIGNED_MSG_TYPE_UNKNOWN",
                                              "SIGNED_MSG_TYPE_PREVOTE",
                                              "SIGNED_MSG_TYPE_PRECOMMIT",
                                              "SIGNED_MSG_TYPE_PROPOSAL"
                                            ]
                                          },
                                          "height": {
                                            "type": "string",
                                            "format": "int64"
                                          },
                                          "round": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "block_id": {
                                            "title": "BlockID",
                                            "type": "object",
                                            "properties": {
                                              "hash": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "part_set_header": {
                                                "title": "PartsetHeader",
                                                "type": "object",
                                                "properties": {
                                                  "total": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                  },
                                                  "hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "timestamp": {
                                            "type": "string",
                                            "format": "date-time"
                                          },
                                          "validator_address": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "validator_index": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                            "format": "byte"
                                          },
                                          "extension": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                            "format": "byte"
                                          },
                                          "extension_signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                            "format": "byte"
                                          }
                                        },
                                        "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                                      },
                                      "vote_b": {
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                            "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                            "enum": [
                                              "SIGNED_MSG_TYPE_UNKNOWN",
                                              "SIGNED_MSG_TYPE_PREVOTE",
                                              "SIGNED_MSG_TYPE_PRECOMMIT",
                                              "SIGNED_MSG_TYPE_PROPOSAL"
                                            ]
                                          },
                                          "height": {
                                            "type": "string",
                                            "format": "int64"
                                          },
                                          "round": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "block_id": {
                                            "title": "BlockID",
                                            "type": "object",
                                            "properties": {
                                              "hash": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "part_set_header": {
                                                "title": "PartsetHeader",
                                                "type": "object",
                                                "properties": {
                                                  "total": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                  },
                                                  "hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "timestamp": {
                                            "type": "string",
                                            "format": "date-time"
                                          },
                                          "validator_address": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "validator_index": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                            "format": "byte"
                                          },
                                          "extension": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                            "format": "byte"
                                          },
                                          "extension_signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                            "format": "byte"
                                          }
                                        },
                                        "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                                      },
                                      "total_voting_power": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "validator_power": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "timestamp": {
                                        "type": "string",
                                        "format": "date-time"
                                      }
                                    },
                                    "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
                                  },
                                  "light_client_attack_evidence": {
                                    "type": "object",
                                    "properties": {
                                      "conflicting_block": {
                                        "type": "object",
                                        "properties": {
                                          "signed_header": {
                                            "type": "object",
                                            "properties": {
                                              "header": {
                                                "type": "object",
                                                "properties": {
                                                  "version": {
                                                    "title": "basic block info",
                                                    "type": "object",
                                                    "properties": {
                                                      "block": {
                                                        "type": "string",
                                                        "format": "uint64"
                                                      },
                                                      "app": {
                                                        "type": "string",
                                                        "format": "uint64"
                                                      }
                                                    },
                                                    "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                                                  },
                                                  "chain_id": {
                                                    "type": "string"
                                                  },
                                                  "height": {
                                                    "type": "string",
                                                    "format": "int64"
                                                  },
                                                  "time": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                  },
                                                  "last_block_id": {
                                                    "title": "BlockID",
                                                    "type": "object",
                                                    "properties": {
                                                      "hash": {
                                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                        "type": "string",
                                                        "format": "byte"
                                                      },
                                                      "part_set_header": {
                                                        "title": "PartsetHeader",
                                                        "type": "object",
                                                        "properties": {
                                                          "total": {
                                                            "type": "integer",
                                                            "format": "int64"
                                                          },
                                                          "hash": {
                                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                            "type": "string",
                                                            "format": "byte"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "last_commit_hash": {
                                                    "title": "hashes of block data",
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "data_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "validators_hash": {
                                                    "title": "hashes from the app output from the prev block",
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "next_validators_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "consensus_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "app_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "last_results_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "evidence_hash": {
                                                    "title": "consensus info",
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "proposer_address": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  }
                                                },
                                                "description": "Header defines the structure of a block header."
                                              },
                                              "commit": {
                                                "type": "object",
                                                "properties": {
                                                  "height": {
                                                    "type": "string",
                                                    "format": "int64"
                                                  },
                                                  "round": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  },
                                                  "block_id": {
                                                    "title": "BlockID",
                                                    "type": "object",
                                                    "properties": {
                                                      "hash": {
                                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                        "type": "string",
                                                        "format": "byte"
                                                      },
                                                      "part_set_header": {
                                                        "title": "PartsetHeader",
                                                        "type": "object",
                                                        "properties": {
                                                          "total": {
                                                            "type": "integer",
                                                            "format": "int64"
                                                          },
                                                          "hash": {
                                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                            "type": "string",
                                                            "format": "byte"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "signatures": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "block_id_flag": {
                                                          "title": "BlockIdFlag indicates which BlockID the signature is for",
                                                          "type": "string",
                                                          "default": "BLOCK_ID_FLAG_UNKNOWN",
                                                          "enum": [
                                                            "BLOCK_ID_FLAG_UNKNOWN",
                                                            "BLOCK_ID_FLAG_ABSENT",
                                                            "BLOCK_ID_FLAG_COMMIT",
                                                            "BLOCK_ID_FLAG_NIL"
                                                          ]
                                                        },
                                                        "validator_address": {
                                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                          "type": "string",
                                                          "format": "byte"
                                                        },
                                                        "timestamp": {
                                                          "type": "string",
                                                          "format": "date-time"
                                                        },
                                                        "signature": {
                                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                          "type": "string",
                                                          "format": "byte"
                                                        }
                                                      },
                                                      "description": "CommitSig is a part of the Vote included in a Commit."
                                                    }
                                                  }
                                                },
                                                "description": "Commit contains the evidence that a block was committed by a set of validators."
                                              }
                                            }
                                          },
                                          "validator_set": {
                                            "type": "object",
                                            "properties": {
                                              "validators": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "address": {
                                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                      "type": "string",
                                                      "format": "byte"
                                                    },
                                                    "pub_key": {
                                                      "title": "PublicKey defines the keys available for use with Validators",
                                                      "type": "object",
                                                      "properties": {
                                                        "ed25519": {
                                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                          "type": "string",
                                                          "format": "byte"
                                                        },
                                                        "secp256k1": {
                                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                          "type": "string",
                                                          "format": "byte"
                                                        }
                                                      }
                                                    },
                                                    "voting_power": {
                                                      "type": "string",
                                                      "format": "int64"
                                                    },
                                                    "proposer_priority": {
                                                      "type": "string",
                                                      "format": "int64"
                                                    }
                                                  }
                                                }
                                              },
                                              "proposer": {
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "pub_key": {
                                                    "title": "PublicKey defines the keys available for use with Validators",
                                                    "type": "object",
                                                    "properties": {
                                                      "ed25519": {
                                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                        "type": "string",
                                                        "format": "byte"
                                                      },
                                                      "secp256k1": {
                                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                        "type": "string",
                                                        "format": "byte"
                                                      }
                                                    }
                                                  },
                                                  "voting_power": {
                                                    "type": "string",
                                                    "format": "int64"
                                                  },
                                                  "proposer_priority": {
                                                    "type": "string",
                                                    "format": "int64"
                                                  }
                                                }
                                              },
                                              "total_voting_power": {
                                                "type": "string",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "common_height": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "byzantine_validators": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "address": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "pub_key": {
                                              "title": "PublicKey defines the keys available for use with Validators",
                                              "type": "object",
                                              "properties": {
                                                "ed25519": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                },
                                                "secp256k1": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                }
                                              }
                                            },
                                            "voting_power": {
                                              "type": "string",
                                              "format": "int64"
                                            },
                                            "proposer_priority": {
                                              "type": "string",
                                              "format": "int64"
                                            }
                                          }
                                        }
                                      },
                                      "total_voting_power": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "timestamp": {
                                        "type": "string",
                                        "format": "date-time"
                                      }
                                    },
                                    "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
                                  }
                                }
                              }
                            }
                          }
                        },
                        "last_commit": {
                          "type": "object",
                          "properties": {
                            "height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "round": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "block_id": {
                              "title": "BlockID",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "part_set_header": {
                                  "title": "PartsetHeader",
                                  "type": "object",
                                  "properties": {
                                    "total": {
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    }
                                  }
                                }
                              }
                            },
                            "signatures": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "block_id_flag": {
                                    "title": "BlockIdFlag indicates which BlockID the signature is for",
                                    "type": "string",
                                    "default": "BLOCK_ID_FLAG_UNKNOWN",
                                    "enum": [
                                      "BLOCK_ID_FLAG_UNKNOWN",
                                      "BLOCK_ID_FLAG_ABSENT",
                                      "BLOCK_ID_FLAG_COMMIT",
                                      "BLOCK_ID_FLAG_NIL"
                                    ]
                                  },
                                  "validator_address": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  },
                                  "timestamp": {
                                    "type": "string",
                                    "format": "date-time"
                                  },
                                  "signature": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  }
                                },
                                "description": "CommitSig is a part of the Vote included in a Commit."
                              }
                            }
                          },
                          "description": "Commit contains the evidence that a block was committed by a set of validators."
                        }
                      }
                    },
                    "sdk_block": {
                      "title": "Since: cosmos-sdk 0.47",
                      "type": "object",
                      "properties": {
                        "header": {
                          "type": "object",
                          "properties": {
                            "version": {
                              "title": "basic block info",
                              "type": "object",
                              "properties": {
                                "block": {
                                  "type": "string",
                                  "format": "uint64"
                                },
                                "app": {
                                  "type": "string",
                                  "format": "uint64"
                                }
                              },
                              "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                            },
                            "chain_id": {
                              "type": "string"
                            },
                            "height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "time": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "last_block_id": {
                              "title": "BlockID",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "part_set_header": {
                                  "title": "PartsetHeader",
                                  "type": "object",
                                  "properties": {
                                    "total": {
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    }
                                  }
                                }
                              }
                            },
                            "last_commit_hash": {
                              "title": "hashes of block data",
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "data_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "validators_hash": {
                              "title": "hashes from the app output from the prev block",
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "next_validators_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "consensus_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "app_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "last_results_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "evidence_hash": {
                              "title": "consensus info",
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "proposer_address": {
                              "type": "string",
                              "description": "proposer_address is the original block proposer address, formatted as a Bech32 string.\nIn Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string\nfor better UX."
                            }
                          },
                          "description": "Header defines the structure of a Tendermint block header."
                        },
                        "data": {
                          "title": "Data contains the set of transactions included in the block",
                          "type": "object",
                          "properties": {
                            "txs": {
                              "type": "array",
                              "description": "Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs.",
                              "items": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "format": "byte"
                              }
                            }
                          }
                        },
                        "evidence": {
                          "type": "object",
                          "properties": {
                            "evidence": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "duplicate_vote_evidence": {
                                    "type": "object",
                                    "properties": {
                                      "vote_a": {
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                            "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                            "enum": [
                                              "SIGNED_MSG_TYPE_UNKNOWN",
                                              "SIGNED_MSG_TYPE_PREVOTE",
                                              "SIGNED_MSG_TYPE_PRECOMMIT",
                                              "SIGNED_MSG_TYPE_PROPOSAL"
                                            ]
                                          },
                                          "height": {
                                            "type": "string",
                                            "format": "int64"
                                          },
                                          "round": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "block_id": {
                                            "title": "BlockID",
                                            "type": "object",
                                            "properties": {
                                              "hash": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "part_set_header": {
                                                "title": "PartsetHeader",
                                                "type": "object",
                                                "properties": {
                                                  "total": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                  },
                                                  "hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "timestamp": {
                                            "type": "string",
                                            "format": "date-time"
                                          },
                                          "validator_address": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "validator_index": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                            "format": "byte"
                                          },
                                          "extension": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                            "format": "byte"
                                          },
                                          "extension_signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                            "format": "byte"
                                          }
                                        },
                                        "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                                      },
                                      "vote_b": {
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                            "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                            "enum": [
                                              "SIGNED_MSG_TYPE_UNKNOWN",
                                              "SIGNED_MSG_TYPE_PREVOTE",
                                              "SIGNED_MSG_TYPE_PRECOMMIT",
                                              "SIGNED_MSG_TYPE_PROPOSAL"
                                            ]
                                          },
                                          "height": {
                                            "type": "string",
                                            "format": "int64"
                                          },
                                          "round": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "block_id": {
                                            "title": "BlockID",
                                            "type": "object",
                                            "properties": {
                                              "hash": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "part_set_header": {
                                                "title": "PartsetHeader",
                                                "type": "object",
                                                "properties": {
                                                  "total": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                  },
                                                  "hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "timestamp": {
                                            "type": "string",
                                            "format": "date-time"
                                          },
                                          "validator_address": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "validator_index": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                            "format": "byte"
                                          },
                                          "extension": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                            "format": "byte"
                                          },
                                          "extension_signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                            "format": "byte"
                                          }
                                        },
                                        "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                                      },
                                      "total_voting_power": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "validator_power": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "timestamp": {
                                        "type": "string",
                                        "format": "date-time"
                                      }
                                    },
                                    "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
                                  },
                                  "light_client_attack_evidence": {
                                    "type": "object",
                                    "properties": {
                                      "conflicting_block": {
                                        "type": "object",
                                        "properties": {
                                          "signed_header": {
                                            "type": "object",
                                            "properties": {
                                              "header": {
                                                "type": "object",
                                                "properties": {
                                                  "version": {
                                                    "title": "basic block info",
                                                    "type": "object",
                                                    "properties": {
                                                      "block": {
                                                        "type": "string",
                                                        "format": "uint64"
                                                      },
                                                      "app": {
                                                        "type": "string",
                                                        "format": "uint64"
                                                      }
                                                    },
                                                    "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                                                  },
                                                  "chain_id": {
                                                    "type": "string"
                                                  },
                                                  "height": {
                                                    "type": "string",
                                                    "format": "int64"
                                                  },
                                                  "time": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                  },
                                                  "last_block_id": {
                                                    "title": "BlockID",
                                                    "type": "object",
                                                    "properties": {
                                                      "hash": {
                                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                        "type": "string",
                                                        "format": "byte"
                                                      },
                                                      "part_set_header": {
                                                        "title": "PartsetHeader",
                                                        "type": "object",
                                                        "properties": {
                                                          "total": {
                                                            "type": "integer",
                                                            "format": "int64"
                                                          },
                                                          "hash": {
                                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                            "type": "string",
                                                            "format": "byte"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "last_commit_hash": {
                                                    "title": "hashes of block data",
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "data_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "validators_hash": {
                                                    "title": "hashes from the app output from the prev block",
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "next_validators_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "consensus_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "app_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "last_results_hash": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "evidence_hash": {
                                                    "title": "consensus info",
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "proposer_address": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  }
                                                },
                                                "description": "Header defines the structure of a block header."
                                              },
                                              "commit": {
                                                "type": "object",
                                                "properties": {
                                                  "height": {
                                                    "type": "string",
                                                    "format": "int64"
                                                  },
                                                  "round": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  },
                                                  "block_id": {
                                                    "title": "BlockID",
                                                    "type": "object",
                                                    "properties": {
                                                      "hash": {
                                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                        "type": "string",
                                                        "format": "byte"
                                                      },
                                                      "part_set_header": {
                                                        "title": "PartsetHeader",
                                                        "type": "object",
                                                        "properties": {
                                                          "total": {
                                                            "type": "integer",
                                                            "format": "int64"
                                                          },
                                                          "hash": {
                                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                            "type": "string",
                                                            "format": "byte"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "signatures": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "block_id_flag": {
                                                          "title": "BlockIdFlag indicates which BlockID the signature is for",
                                                          "type": "string",
                                                          "default": "BLOCK_ID_FLAG_UNKNOWN",
                                                          "enum": [
                                                            "BLOCK_ID_FLAG_UNKNOWN",
                                                            "BLOCK_ID_FLAG_ABSENT",
                                                            "BLOCK_ID_FLAG_COMMIT",
                                                            "BLOCK_ID_FLAG_NIL"
                                                          ]
                                                        },
                                                        "validator_address": {
                                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                          "type": "string",
                                                          "format": "byte"
                                                        },
                                                        "timestamp": {
                                                          "type": "string",
                                                          "format": "date-time"
                                                        },
                                                        "signature": {
                                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                          "type": "string",
                                                          "format": "byte"
                                                        }
                                                      },
                                                      "description": "CommitSig is a part of the Vote included in a Commit."
                                                    }
                                                  }
                                                },
                                                "description": "Commit contains the evidence that a block was committed by a set of validators."
                                              }
                                            }
                                          },
                                          "validator_set": {
                                            "type": "object",
                                            "properties": {
                                              "validators": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "address": {
                                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                      "type": "string",
                                                      "format": "byte"
                                                    },
                                                    "pub_key": {
                                                      "title": "PublicKey defines the keys available for use with Validators",
                                                      "type": "object",
                                                      "properties": {
                                                        "ed25519": {
                                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                          "type": "string",
                                                          "format": "byte"
                                                        },
                                                        "secp256k1": {
                                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                          "type": "string",
                                                          "format": "byte"
                                                        }
                                                      }
                                                    },
                                                    "voting_power": {
                                                      "type": "string",
                                                      "format": "int64"
                                                    },
                                                    "proposer_priority": {
                                                      "type": "string",
                                                      "format": "int64"
                                                    }
                                                  }
                                                }
                                              },
                                              "proposer": {
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                    "type": "string",
                                                    "format": "byte"
                                                  },
                                                  "pub_key": {
                                                    "title": "PublicKey defines the keys available for use with Validators",
                                                    "type": "object",
                                                    "properties": {
                                                      "ed25519": {
                                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                        "type": "string",
                                                        "format": "byte"
                                                      },
                                                      "secp256k1": {
                                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                        "type": "string",
                                                        "format": "byte"
                                                      }
                                                    }
                                                  },
                                                  "voting_power": {
                                                    "type": "string",
                                                    "format": "int64"
                                                  },
                                                  "proposer_priority": {
                                                    "type": "string",
                                                    "format": "int64"
                                                  }
                                                }
                                              },
                                              "total_voting_power": {
                                                "type": "string",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "common_height": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "byzantine_validators": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "address": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "pub_key": {
                                              "title": "PublicKey defines the keys available for use with Validators",
                                              "type": "object",
                                              "properties": {
                                                "ed25519": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                },
                                                "secp256k1": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                }
                                              }
                                            },
                                            "voting_power": {
                                              "type": "string",
                                              "format": "int64"
                                            },
                                            "proposer_priority": {
                                              "type": "string",
                                              "format": "int64"
                                            }
                                          }
                                        }
                                      },
                                      "total_voting_power": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "timestamp": {
                                        "type": "string",
                                        "format": "date-time"
                                      }
                                    },
                                    "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
                                  }
                                }
                              }
                            }
                          }
                        },
                        "last_commit": {
                          "type": "object",
                          "properties": {
                            "height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "round": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "block_id": {
                              "title": "BlockID",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "part_set_header": {
                                  "title": "PartsetHeader",
                                  "type": "object",
                                  "properties": {
                                    "total": {
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    }
                                  }
                                }
                              }
                            },
                            "signatures": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "block_id_flag": {
                                    "title": "BlockIdFlag indicates which BlockID the signature is for",
                                    "type": "string",
                                    "default": "BLOCK_ID_FLAG_UNKNOWN",
                                    "enum": [
                                      "BLOCK_ID_FLAG_UNKNOWN",
                                      "BLOCK_ID_FLAG_ABSENT",
                                      "BLOCK_ID_FLAG_COMMIT",
                                      "BLOCK_ID_FLAG_NIL"
                                    ]
                                  },
                                  "validator_address": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  },
                                  "timestamp": {
                                    "type": "string",
                                    "format": "date-time"
                                  },
                                  "signature": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  }
                                },
                                "description": "CommitSig is a part of the Vote included in a Commit."
                              }
                            }
                          },
                          "description": "Commit contains the evidence that a block was committed by a set of validators."
                        }
                      },
                      "description": "Block is tendermint type Block, with the Header proposer address\nfield converted to bech32 string."
                    }
                  },
                  "description": "GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/tendermint/v1beta1/node_info": {
      "get": {
        "tags": ["Service"],
        "summary": "GetNodeInfo queries the current node info.",
        "operationId": "GetNodeInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "default_node_info": {
                      "type": "object",
                      "properties": {
                        "protocol_version": {
                          "type": "object",
                          "properties": {
                            "p2p": {
                              "type": "string",
                              "format": "uint64"
                            },
                            "block": {
                              "type": "string",
                              "format": "uint64"
                            },
                            "app": {
                              "type": "string",
                              "format": "uint64"
                            }
                          }
                        },
                        "default_node_id": {
                          "type": "string"
                        },
                        "listen_addr": {
                          "type": "string"
                        },
                        "network": {
                          "type": "string"
                        },
                        "version": {
                          "type": "string"
                        },
                        "channels": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        },
                        "moniker": {
                          "type": "string"
                        },
                        "other": {
                          "type": "object",
                          "properties": {
                            "tx_index": {
                              "type": "string"
                            },
                            "rpc_address": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "application_version": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "app_name": {
                          "type": "string"
                        },
                        "version": {
                          "type": "string"
                        },
                        "git_commit": {
                          "type": "string"
                        },
                        "build_tags": {
                          "type": "string"
                        },
                        "go_version": {
                          "type": "string"
                        },
                        "build_deps": {
                          "type": "array",
                          "items": {
                            "title": "Module is the type for VersionInfo",
                            "type": "object",
                            "properties": {
                              "path": {
                                "title": "module path",
                                "type": "string"
                              },
                              "version": {
                                "title": "module version",
                                "type": "string"
                              },
                              "sum": {
                                "title": "checksum",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "cosmos_sdk_version": {
                          "title": "Since: cosmos-sdk 0.43",
                          "type": "string"
                        }
                      },
                      "description": "VersionInfo is the type for the GetNodeInfoResponse message."
                    }
                  },
                  "description": "GetNodeInfoResponse is the response type for the Query/GetNodeInfo RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/tendermint/v1beta1/syncing": {
      "get": {
        "tags": ["Service"],
        "summary": "GetSyncing queries node syncing.",
        "operationId": "GetSyncing",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "syncing": {
                      "type": "boolean"
                    }
                  },
                  "description": "GetSyncingResponse is the response type for the Query/GetSyncing RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/tendermint/v1beta1/validatorsets/latest": {
      "get": {
        "tags": ["Service"],
        "summary": "GetLatestValidatorSet queries latest validator-set.",
        "operationId": "GetLatestValidatorSet",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "block_height": {
                      "type": "string",
                      "format": "int64"
                    },
                    "validators": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string"
                          },
                          "pub_key": {
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                          },
                          "voting_power": {
                            "type": "string",
                            "format": "int64"
                          },
                          "proposer_priority": {
                            "type": "string",
                            "format": "int64"
                          }
                        },
                        "description": "Validator is the type for the validator-set."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines an pagination for the response."
                    }
                  },
                  "description": "GetLatestValidatorSetResponse is the response type for the Query/GetValidatorSetByHeight RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/tendermint/v1beta1/validatorsets/{height}": {
      "get": {
        "tags": ["Service"],
        "summary": "GetValidatorSetByHeight queries validator-set at a given height.",
        "operationId": "GetValidatorSetByHeight",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "block_height": {
                      "type": "string",
                      "format": "int64"
                    },
                    "validators": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string"
                          },
                          "pub_key": {
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                          },
                          "voting_power": {
                            "type": "string",
                            "format": "int64"
                          },
                          "proposer_priority": {
                            "type": "string",
                            "format": "int64"
                          }
                        },
                        "description": "Validator is the type for the validator-set."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines an pagination for the response."
                    }
                  },
                  "description": "GetValidatorSetByHeightResponse is the response type for the Query/GetValidatorSetByHeight RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/node/v1beta1/config": {
      "get": {
        "tags": ["Service"],
        "summary": "Config queries for the operator configuration.",
        "operationId": "Config",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "minimum_gas_price": {
                      "type": "string"
                    },
                    "pruning_keep_recent": {
                      "title": "pruning settings",
                      "type": "string"
                    },
                    "pruning_interval": {
                      "type": "string"
                    }
                  },
                  "description": "ConfigResponse defines the response structure for the Config gRPC query."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/node/v1beta1/status": {
      "get": {
        "tags": ["Service"],
        "summary": "Status queries for the node status.",
        "operationId": "Status",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "earliest_store_height": {
                      "type": "string",
                      "format": "uint64"
                    },
                    "height": {
                      "type": "string",
                      "format": "uint64"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "app_hash": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    },
                    "validator_hash": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    }
                  },
                  "description": "StateResponse defines the response structure for the status of a node."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/community_pool": {
      "get": {
        "tags": ["Query"],
        "summary": "CommunityPool queries the community pool coins.",
        "operationId": "CommunityPool",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pool": {
                      "type": "array",
                      "description": "pool defines community pool's coins.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "denom": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "string"
                          }
                        },
                        "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
                      }
                    }
                  },
                  "description": "QueryCommunityPoolResponse is the response type for the Query/CommunityPool\nRPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards": {
      "get": {
        "tags": ["Query"],
        "summary": "DelegationTotalRewards queries the total rewards accrued by each\nvalidator.",
        "operationId": "DelegationTotalRewards",
        "parameters": [
          {
            "name": "delegator_address",
            "in": "path",
            "description": "delegator_address defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rewards": {
                      "type": "array",
                      "description": "rewards defines all the rewards accrued by a delegator.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "validator_address": {
                            "type": "string"
                          },
                          "reward": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "denom": {
                                  "type": "string"
                                },
                                "amount": {
                                  "type": "string"
                                }
                              },
                              "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
                            }
                          }
                        },
                        "description": "DelegationDelegatorReward represents the properties\nof a delegator's delegation reward."
                      }
                    },
                    "total": {
                      "type": "array",
                      "description": "total defines the sum of all the rewards.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "denom": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "string"
                          }
                        },
                        "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
                      }
                    }
                  },
                  "description": "QueryDelegationTotalRewardsResponse is the response type for the\nQuery/DelegationTotalRewards RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}": {
      "get": {
        "tags": ["Query"],
        "summary": "DelegationRewards queries the total rewards accrued by a delegation.",
        "operationId": "DelegationRewards",
        "parameters": [
          {
            "name": "delegator_address",
            "in": "path",
            "description": "delegator_address defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validator_address",
            "in": "path",
            "description": "validator_address defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rewards": {
                      "type": "array",
                      "description": "rewards defines the rewards accrued by a delegation.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "denom": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "string"
                          }
                        },
                        "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
                      }
                    }
                  },
                  "description": "QueryDelegationRewardsResponse is the response type for the\nQuery/DelegationRewards RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/delegators/{delegator_address}/validators": {
      "get": {
        "tags": ["Query"],
        "summary": "DelegatorValidators queries the validators of a delegator.",
        "operationId": "DelegatorValidators",
        "parameters": [
          {
            "name": "delegator_address",
            "in": "path",
            "description": "delegator_address defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "validators": {
                      "type": "array",
                      "description": "validators defines the validators a delegator is delegating for.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "QueryDelegatorValidatorsResponse is the response type for the\nQuery/DelegatorValidators RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address": {
      "get": {
        "tags": ["Query"],
        "summary": "DelegatorWithdrawAddress queries withdraw address of a delegator.",
        "operationId": "DelegatorWithdrawAddress",
        "parameters": [
          {
            "name": "delegator_address",
            "in": "path",
            "description": "delegator_address defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "withdraw_address": {
                      "type": "string",
                      "description": "withdraw_address defines the delegator address to query for."
                    }
                  },
                  "description": "QueryDelegatorWithdrawAddressResponse is the response type for the\nQuery/DelegatorWithdrawAddress RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/params": {
      "get": {
        "tags": ["Query"],
        "summary": "Params queries params of the distribution module.",
        "operationId": "DistributionParams",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "params": {
                      "type": "object",
                      "properties": {
                        "community_tax": {
                          "type": "string"
                        },
                        "base_proposer_reward": {
                          "type": "string",
                          "description": "Deprecated: The base_proposer_reward field is deprecated and is no longer used\nin the x/distribution module's reward mechanism."
                        },
                        "bonus_proposer_reward": {
                          "type": "string",
                          "description": "Deprecated: The bonus_proposer_reward field is deprecated and is no longer used\nin the x/distribution module's reward mechanism."
                        },
                        "withdraw_addr_enabled": {
                          "type": "boolean"
                        }
                      },
                      "description": "params defines the parameters of the module."
                    }
                  },
                  "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/validators/{validator_address}": {
      "get": {
        "tags": ["Query"],
        "summary": "ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator",
        "operationId": "ValidatorDistributionInfo",
        "parameters": [
          {
            "name": "validator_address",
            "in": "path",
            "description": "validator_address defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operator_address": {
                      "type": "string",
                      "description": "operator_address defines the validator operator address."
                    },
                    "self_bond_rewards": {
                      "type": "array",
                      "description": "self_bond_rewards defines the self delegations rewards.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "denom": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "string"
                          }
                        },
                        "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
                      }
                    },
                    "commission": {
                      "type": "array",
                      "description": "commission defines the commission the validator received.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "denom": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "string"
                          }
                        },
                        "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
                      }
                    }
                  },
                  "description": "QueryValidatorDistributionInfoResponse is the response type for the Query/ValidatorDistributionInfo RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/validators/{validator_address}/commission": {
      "get": {
        "tags": ["Query"],
        "summary": "ValidatorCommission queries accumulated commission for a validator.",
        "operationId": "ValidatorCommission",
        "parameters": [
          {
            "name": "validator_address",
            "in": "path",
            "description": "validator_address defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QueryValidatorCommissionResponse is the response type for the\nQuery/ValidatorCommission RPC method",
                  "type": "object",
                  "properties": {
                    "commission": {
                      "type": "object",
                      "properties": {
                        "commission": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "denom": {
                                "type": "string"
                              },
                              "amount": {
                                "type": "string"
                              }
                            },
                            "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
                          }
                        }
                      },
                      "description": "commission defines the commission the validator received."
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards": {
      "get": {
        "tags": ["Query"],
        "summary": "ValidatorOutstandingRewards queries rewards of a validator address.",
        "operationId": "ValidatorOutstandingRewards",
        "parameters": [
          {
            "name": "validator_address",
            "in": "path",
            "description": "validator_address defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rewards": {
                      "type": "object",
                      "properties": {
                        "rewards": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "denom": {
                                "type": "string"
                              },
                              "amount": {
                                "type": "string"
                              }
                            },
                            "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
                          }
                        }
                      },
                      "description": "ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards\nfor a validator inexpensive to track, allows simple sanity checks."
                    }
                  },
                  "description": "QueryValidatorOutstandingRewardsResponse is the response type for the\nQuery/ValidatorOutstandingRewards RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/validators/{validator_address}/slashes": {
      "get": {
        "tags": ["Query"],
        "summary": "ValidatorSlashes queries slash events of a validator.",
        "operationId": "ValidatorSlashes",
        "parameters": [
          {
            "name": "validator_address",
            "in": "path",
            "description": "validator_address defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "starting_height",
            "in": "query",
            "description": "starting_height defines the optional starting height to query the slashes.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "ending_height",
            "in": "query",
            "description": "starting_height defines the optional ending height to query the slashes.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "slashes": {
                      "type": "array",
                      "description": "slashes defines the slashes the validator received.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "validator_period": {
                            "type": "string",
                            "format": "uint64"
                          },
                          "fraction": {
                            "type": "string"
                          }
                        },
                        "description": "ValidatorSlashEvent represents a validator slash event.\nHeight is implicit within the store key.\nThis is needed to calculate appropriate amount of staking tokens\nfor delegations which are withdrawn after a slash has occurred."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryValidatorSlashesResponse is the response type for the\nQuery/ValidatorSlashes RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/evidence/v1beta1/evidence": {
      "get": {
        "tags": ["Query"],
        "summary": "AllEvidence queries all evidence.",
        "operationId": "AllEvidence",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "evidence": {
                      "type": "array",
                      "description": "evidence returns all evidences.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC\nmethod."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/evidence/v1beta1/evidence/{hash}": {
      "get": {
        "tags": ["Query"],
        "summary": "Evidence queries evidence based on evidence hash.",
        "operationId": "Evidence",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "hash defines the evidence hash of the requested evidence.\n\nSince: cosmos-sdk 0.47",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evidence_hash",
            "in": "query",
            "description": "evidence_hash defines the hash of the requested evidence.\nDeprecated: Use hash, a HEX encoded string, instead.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "evidence": {
                      "type": "object",
                      "properties": {
                        "type_url": {
                          "type": "string",
                          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                        },
                        "value": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "Must be a valid serialized protocol buffer of the above specified type.",
                          "format": "byte"
                        }
                      },
                      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                    }
                  },
                  "description": "QueryEvidenceResponse is the response type for the Query/Evidence RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1beta1/params/{params_type}": {
      "get": {
        "tags": ["Query"],
        "summary": "Params queries all parameters of the gov module.",
        "operationId": "GovParams",
        "parameters": [
          {
            "name": "params_type",
            "in": "path",
            "description": "params_type defines which parameters to query for, can be one of \"voting\",\n\"tallying\" or \"deposit\".",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "voting_params": {
                      "type": "object",
                      "properties": {
                        "voting_period": {
                          "type": "string",
                          "description": "Duration of the voting period."
                        }
                      },
                      "description": "voting_params defines the parameters related to voting."
                    },
                    "deposit_params": {
                      "type": "object",
                      "properties": {
                        "min_deposit": {
                          "type": "array",
                          "description": "Minimum deposit for a proposal to enter voting period.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "denom": {
                                "type": "string"
                              },
                              "amount": {
                                "type": "string"
                              }
                            },
                            "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                          }
                        },
                        "max_deposit_period": {
                          "type": "string",
                          "description": "Maximum period for Atom holders to deposit on a proposal. Initial value: 2\nmonths."
                        }
                      },
                      "description": "deposit_params defines the parameters related to deposit."
                    },
                    "tally_params": {
                      "type": "object",
                      "properties": {
                        "quorum": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "Minimum percentage of total stake needed to vote for a result to be\nconsidered valid.",
                          "format": "byte"
                        },
                        "threshold": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.",
                          "format": "byte"
                        },
                        "veto_threshold": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "Minimum value of Veto votes to Total votes ratio for proposal to be\nvetoed. Default value: 1/3.",
                          "format": "byte"
                        }
                      },
                      "description": "tally_params defines the parameters related to tally."
                    }
                  },
                  "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1beta1/proposals": {
      "get": {
        "tags": ["Query"],
        "summary": "Proposals queries all proposals based on given status.",
        "operationId": "Proposals",
        "parameters": [
          {
            "name": "proposal_status",
            "in": "query",
            "description": "proposal_status defines the status of the proposals.\n\n - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.\n - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit\nperiod.\n - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting\nperiod.\n - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has\npassed.\n - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has\nbeen rejected.\n - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has\nfailed.",
            "schema": {
              "type": "string",
              "default": "PROPOSAL_STATUS_UNSPECIFIED",
              "enum": [
                "PROPOSAL_STATUS_UNSPECIFIED",
                "PROPOSAL_STATUS_DEPOSIT_PERIOD",
                "PROPOSAL_STATUS_VOTING_PERIOD",
                "PROPOSAL_STATUS_PASSED",
                "PROPOSAL_STATUS_REJECTED",
                "PROPOSAL_STATUS_FAILED"
              ]
            }
          },
          {
            "name": "voter",
            "in": "query",
            "description": "voter defines the voter address for the proposals.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositor",
            "in": "query",
            "description": "depositor defines the deposit addresses from the proposals.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "proposals": {
                      "type": "array",
                      "description": "proposals defines all the requested governance proposals.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "proposal_id": {
                            "type": "string",
                            "description": "proposal_id defines the unique id of the proposal.",
                            "format": "uint64"
                          },
                          "content": {
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                          },
                          "status": {
                            "type": "string",
                            "description": "status defines the proposal status.",
                            "default": "PROPOSAL_STATUS_UNSPECIFIED",
                            "enum": [
                              "PROPOSAL_STATUS_UNSPECIFIED",
                              "PROPOSAL_STATUS_DEPOSIT_PERIOD",
                              "PROPOSAL_STATUS_VOTING_PERIOD",
                              "PROPOSAL_STATUS_PASSED",
                              "PROPOSAL_STATUS_REJECTED",
                              "PROPOSAL_STATUS_FAILED"
                            ]
                          },
                          "final_tally_result": {
                            "type": "object",
                            "properties": {
                              "yes": {
                                "type": "string",
                                "description": "yes is the number of yes votes on a proposal."
                              },
                              "abstain": {
                                "type": "string",
                                "description": "abstain is the number of abstain votes on a proposal."
                              },
                              "no": {
                                "type": "string",
                                "description": "no is the number of no votes on a proposal."
                              },
                              "no_with_veto": {
                                "type": "string",
                                "description": "no_with_veto is the number of no with veto votes on a proposal."
                              }
                            },
                            "description": "final_tally_result is the final tally result of the proposal. When\nquerying a proposal via gRPC, this field is not populated until the\nproposal's voting period has ended."
                          },
                          "submit_time": {
                            "type": "string",
                            "description": "submit_time is the time of proposal submission.",
                            "format": "date-time"
                          },
                          "deposit_end_time": {
                            "type": "string",
                            "description": "deposit_end_time is the end time for deposition.",
                            "format": "date-time"
                          },
                          "total_deposit": {
                            "type": "array",
                            "description": "total_deposit is the total deposit on the proposal.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "denom": {
                                  "type": "string"
                                },
                                "amount": {
                                  "type": "string"
                                }
                              },
                              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                            }
                          },
                          "voting_start_time": {
                            "type": "string",
                            "description": "voting_start_time is the starting time to vote on a proposal.",
                            "format": "date-time"
                          },
                          "voting_end_time": {
                            "type": "string",
                            "description": "voting_end_time is the end time of voting on a proposal.",
                            "format": "date-time"
                          }
                        },
                        "description": "Proposal defines the core field members of a governance proposal."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryProposalsResponse is the response type for the Query/Proposals RPC\nmethod."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposal_id}": {
      "get": {
        "tags": ["Query"],
        "summary": "Proposal queries proposal details based on ProposalID.",
        "operationId": "Proposal",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "proposal": {
                      "type": "object",
                      "properties": {
                        "proposal_id": {
                          "type": "string",
                          "description": "proposal_id defines the unique id of the proposal.",
                          "format": "uint64"
                        },
                        "content": {
                          "type": "object",
                          "properties": {
                            "type_url": {
                              "type": "string",
                              "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                            },
                            "value": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Must be a valid serialized protocol buffer of the above specified type.",
                              "format": "byte"
                            }
                          },
                          "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                        },
                        "status": {
                          "type": "string",
                          "description": "status defines the proposal status.",
                          "default": "PROPOSAL_STATUS_UNSPECIFIED",
                          "enum": [
                            "PROPOSAL_STATUS_UNSPECIFIED",
                            "PROPOSAL_STATUS_DEPOSIT_PERIOD",
                            "PROPOSAL_STATUS_VOTING_PERIOD",
                            "PROPOSAL_STATUS_PASSED",
                            "PROPOSAL_STATUS_REJECTED",
                            "PROPOSAL_STATUS_FAILED"
                          ]
                        },
                        "final_tally_result": {
                          "type": "object",
                          "properties": {
                            "yes": {
                              "type": "string",
                              "description": "yes is the number of yes votes on a proposal."
                            },
                            "abstain": {
                              "type": "string",
                              "description": "abstain is the number of abstain votes on a proposal."
                            },
                            "no": {
                              "type": "string",
                              "description": "no is the number of no votes on a proposal."
                            },
                            "no_with_veto": {
                              "type": "string",
                              "description": "no_with_veto is the number of no with veto votes on a proposal."
                            }
                          },
                          "description": "final_tally_result is the final tally result of the proposal. When\nquerying a proposal via gRPC, this field is not populated until the\nproposal's voting period has ended."
                        },
                        "submit_time": {
                          "type": "string",
                          "description": "submit_time is the time of proposal submission.",
                          "format": "date-time"
                        },
                        "deposit_end_time": {
                          "type": "string",
                          "description": "deposit_end_time is the end time for deposition.",
                          "format": "date-time"
                        },
                        "total_deposit": {
                          "type": "array",
                          "description": "total_deposit is the total deposit on the proposal.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "denom": {
                                "type": "string"
                              },
                              "amount": {
                                "type": "string"
                              }
                            },
                            "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                          }
                        },
                        "voting_start_time": {
                          "type": "string",
                          "description": "voting_start_time is the starting time to vote on a proposal.",
                          "format": "date-time"
                        },
                        "voting_end_time": {
                          "type": "string",
                          "description": "voting_end_time is the end time of voting on a proposal.",
                          "format": "date-time"
                        }
                      },
                      "description": "Proposal defines the core field members of a governance proposal."
                    }
                  },
                  "description": "QueryProposalResponse is the response type for the Query/Proposal RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits": {
      "get": {
        "tags": ["Query"],
        "summary": "Deposits queries all deposits of a single proposal.",
        "operationId": "Deposits",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deposits": {
                      "type": "array",
                      "description": "deposits defines the requested deposits.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "proposal_id": {
                            "type": "string",
                            "description": "proposal_id defines the unique id of the proposal.",
                            "format": "uint64"
                          },
                          "depositor": {
                            "type": "string",
                            "description": "depositor defines the deposit addresses from the proposals."
                          },
                          "amount": {
                            "type": "array",
                            "description": "amount to be deposited by depositor.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "denom": {
                                  "type": "string"
                                },
                                "amount": {
                                  "type": "string"
                                }
                              },
                              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                            }
                          }
                        },
                        "description": "Deposit defines an amount deposited by an account address to an active\nproposal."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryDepositsResponse is the response type for the Query/Deposits RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}": {
      "get": {
        "tags": ["Query"],
        "summary": "Deposit queries single deposit information based on proposalID, depositor address.",
        "operationId": "Deposit",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "depositor",
            "in": "path",
            "description": "depositor defines the deposit addresses from the proposals.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deposit": {
                      "type": "object",
                      "properties": {
                        "proposal_id": {
                          "type": "string",
                          "description": "proposal_id defines the unique id of the proposal.",
                          "format": "uint64"
                        },
                        "depositor": {
                          "type": "string",
                          "description": "depositor defines the deposit addresses from the proposals."
                        },
                        "amount": {
                          "type": "array",
                          "description": "amount to be deposited by depositor.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "denom": {
                                "type": "string"
                              },
                              "amount": {
                                "type": "string"
                              }
                            },
                            "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                          }
                        }
                      },
                      "description": "Deposit defines an amount deposited by an account address to an active\nproposal."
                    }
                  },
                  "description": "QueryDepositResponse is the response type for the Query/Deposit RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposal_id}/tally": {
      "get": {
        "tags": ["Query"],
        "summary": "TallyResult queries the tally of a proposal vote.",
        "operationId": "TallyResult",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tally": {
                      "type": "object",
                      "properties": {
                        "yes": {
                          "type": "string",
                          "description": "yes is the number of yes votes on a proposal."
                        },
                        "abstain": {
                          "type": "string",
                          "description": "abstain is the number of abstain votes on a proposal."
                        },
                        "no": {
                          "type": "string",
                          "description": "no is the number of no votes on a proposal."
                        },
                        "no_with_veto": {
                          "type": "string",
                          "description": "no_with_veto is the number of no with veto votes on a proposal."
                        }
                      },
                      "description": "tally defines the requested tally."
                    }
                  },
                  "description": "QueryTallyResultResponse is the response type for the Query/Tally RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposal_id}/votes": {
      "get": {
        "tags": ["Query"],
        "summary": "Votes queries votes of a given proposal.",
        "operationId": "Votes",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "votes": {
                      "type": "array",
                      "description": "votes defines the queried votes.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "proposal_id": {
                            "type": "string",
                            "description": "proposal_id defines the unique id of the proposal.",
                            "format": "uint64"
                          },
                          "voter": {
                            "type": "string",
                            "description": "voter is the voter address of the proposal."
                          },
                          "option": {
                            "type": "string",
                            "description": "Deprecated: Prefer to use `options` instead. This field is set in queries\nif and only if `len(options) == 1` and that option has weight 1. In all\nother cases, this field will default to VOTE_OPTION_UNSPECIFIED.",
                            "default": "VOTE_OPTION_UNSPECIFIED",
                            "enum": [
                              "VOTE_OPTION_UNSPECIFIED",
                              "VOTE_OPTION_YES",
                              "VOTE_OPTION_ABSTAIN",
                              "VOTE_OPTION_NO",
                              "VOTE_OPTION_NO_WITH_VETO"
                            ]
                          },
                          "options": {
                            "type": "array",
                            "description": "options is the weighted vote options.\n\nSince: cosmos-sdk 0.43",
                            "items": {
                              "type": "object",
                              "properties": {
                                "option": {
                                  "type": "string",
                                  "description": "option defines the valid vote options, it must not contain duplicate vote options.",
                                  "default": "VOTE_OPTION_UNSPECIFIED",
                                  "enum": [
                                    "VOTE_OPTION_UNSPECIFIED",
                                    "VOTE_OPTION_YES",
                                    "VOTE_OPTION_ABSTAIN",
                                    "VOTE_OPTION_NO",
                                    "VOTE_OPTION_NO_WITH_VETO"
                                  ]
                                },
                                "weight": {
                                  "type": "string",
                                  "description": "weight is the vote weight associated with the vote option."
                                }
                              },
                              "description": "WeightedVoteOption defines a unit of vote for vote split.\n\nSince: cosmos-sdk 0.43"
                            }
                          }
                        },
                        "description": "Vote defines a vote on a governance proposal.\nA Vote consists of a proposal ID, the voter, and the vote option."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryVotesResponse is the response type for the Query/Votes RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}": {
      "get": {
        "tags": ["Query"],
        "summary": "Vote queries voted information based on proposalID, voterAddr.",
        "operationId": "Vote",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "voter",
            "in": "path",
            "description": "voter defines the voter address for the proposals.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vote": {
                      "type": "object",
                      "properties": {
                        "proposal_id": {
                          "type": "string",
                          "description": "proposal_id defines the unique id of the proposal.",
                          "format": "uint64"
                        },
                        "voter": {
                          "type": "string",
                          "description": "voter is the voter address of the proposal."
                        },
                        "option": {
                          "type": "string",
                          "description": "Deprecated: Prefer to use `options` instead. This field is set in queries\nif and only if `len(options) == 1` and that option has weight 1. In all\nother cases, this field will default to VOTE_OPTION_UNSPECIFIED.",
                          "default": "VOTE_OPTION_UNSPECIFIED",
                          "enum": [
                            "VOTE_OPTION_UNSPECIFIED",
                            "VOTE_OPTION_YES",
                            "VOTE_OPTION_ABSTAIN",
                            "VOTE_OPTION_NO",
                            "VOTE_OPTION_NO_WITH_VETO"
                          ]
                        },
                        "options": {
                          "type": "array",
                          "description": "options is the weighted vote options.\n\nSince: cosmos-sdk 0.43",
                          "items": {
                            "type": "object",
                            "properties": {
                              "option": {
                                "type": "string",
                                "description": "option defines the valid vote options, it must not contain duplicate vote options.",
                                "default": "VOTE_OPTION_UNSPECIFIED",
                                "enum": [
                                  "VOTE_OPTION_UNSPECIFIED",
                                  "VOTE_OPTION_YES",
                                  "VOTE_OPTION_ABSTAIN",
                                  "VOTE_OPTION_NO",
                                  "VOTE_OPTION_NO_WITH_VETO"
                                ]
                              },
                              "weight": {
                                "type": "string",
                                "description": "weight is the vote weight associated with the vote option."
                              }
                            },
                            "description": "WeightedVoteOption defines a unit of vote for vote split.\n\nSince: cosmos-sdk 0.43"
                          }
                        }
                      },
                      "description": "Vote defines a vote on a governance proposal.\nA Vote consists of a proposal ID, the voter, and the vote option."
                    }
                  },
                  "description": "QueryVoteResponse is the response type for the Query/Vote RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/constitution": {
      "get": {
        "tags": ["Query"],
        "summary": "Constitution queries the chain's constitution.",
        "operationId": "Constitution",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QueryConstitutionResponse is the response type for the Query/Constitution RPC method",
                  "type": "object",
                  "properties": {
                    "constitution": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/params/{params_type}": {
      "get": {
        "tags": ["Query"],
        "summary": "Params queries all parameters of the gov module.",
        "operationId": "GovV1Params",
        "parameters": [
          {
            "name": "params_type",
            "in": "path",
            "description": "params_type defines which parameters to query for, can be one of \"voting\",\n\"tallying\" or \"deposit\".",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "voting_params": {
                      "type": "object",
                      "properties": {
                        "voting_period": {
                          "type": "string",
                          "description": "Duration of the voting period."
                        }
                      },
                      "description": "Deprecated: Prefer to use `params` instead.\nvoting_params defines the parameters related to voting."
                    },
                    "deposit_params": {
                      "type": "object",
                      "properties": {
                        "min_deposit": {
                          "type": "array",
                          "description": "Minimum deposit for a proposal to enter voting period.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "denom": {
                                "type": "string"
                              },
                              "amount": {
                                "type": "string"
                              }
                            },
                            "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                          }
                        },
                        "max_deposit_period": {
                          "type": "string",
                          "description": "Maximum period for Atom holders to deposit on a proposal. Initial value: 2\nmonths."
                        }
                      },
                      "description": "Deprecated: Prefer to use `params` instead.\ndeposit_params defines the parameters related to deposit."
                    },
                    "tally_params": {
                      "type": "object",
                      "properties": {
                        "quorum": {
                          "type": "string",
                          "description": "Minimum percentage of total stake needed to vote for a result to be\nconsidered valid."
                        },
                        "threshold": {
                          "type": "string",
                          "description": "Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."
                        },
                        "veto_threshold": {
                          "type": "string",
                          "description": "Minimum value of Veto votes to Total votes ratio for proposal to be\nvetoed. Default value: 1/3."
                        }
                      },
                      "description": "Deprecated: Prefer to use `params` instead.\ntally_params defines the parameters related to tally."
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "min_deposit": {
                          "type": "array",
                          "description": "Minimum deposit for a proposal to enter voting period.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "denom": {
                                "type": "string"
                              },
                              "amount": {
                                "type": "string"
                              }
                            },
                            "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                          }
                        },
                        "max_deposit_period": {
                          "type": "string",
                          "description": "Maximum period for Atom holders to deposit on a proposal. Initial value: 2\nmonths."
                        },
                        "voting_period": {
                          "type": "string",
                          "description": "Duration of the voting period."
                        },
                        "quorum": {
                          "type": "string",
                          "description": "Minimum percentage of total stake needed to vote for a result to be\n considered valid."
                        },
                        "threshold": {
                          "type": "string",
                          "description": "Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."
                        },
                        "veto_threshold": {
                          "type": "string",
                          "description": "Minimum value of Veto votes to Total votes ratio for proposal to be\n vetoed. Default value: 1/3."
                        },
                        "min_initial_deposit_ratio": {
                          "type": "string",
                          "description": "The ratio representing the proportion of the deposit value that must be paid at proposal submission."
                        },
                        "proposal_cancel_ratio": {
                          "type": "string",
                          "description": "The cancel ratio which will not be returned back to the depositors when a proposal is cancelled.\n\nSince: cosmos-sdk 0.50"
                        },
                        "proposal_cancel_dest": {
                          "type": "string",
                          "description": "The address which will receive (proposal_cancel_ratio * deposit) proposal deposits.\nIf empty, the (proposal_cancel_ratio * deposit) proposal deposits will be burned.\n\nSince: cosmos-sdk 0.50"
                        },
                        "expedited_voting_period": {
                          "type": "string",
                          "description": "Duration of the voting period of an expedited proposal.\n\nSince: cosmos-sdk 0.50"
                        },
                        "expedited_threshold": {
                          "type": "string",
                          "description": "Minimum proportion of Yes votes for proposal to pass. Default value: 0.67.\n\nSince: cosmos-sdk 0.50"
                        },
                        "expedited_min_deposit": {
                          "type": "array",
                          "description": "Minimum expedited deposit for a proposal to enter voting period.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "denom": {
                                "type": "string"
                              },
                              "amount": {
                                "type": "string"
                              }
                            },
                            "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                          }
                        },
                        "burn_vote_quorum": {
                          "title": "burn deposits if a proposal does not meet quorum",
                          "type": "boolean"
                        },
                        "burn_proposal_deposit_prevote": {
                          "title": "burn deposits if the proposal does not enter voting period",
                          "type": "boolean"
                        },
                        "burn_vote_veto": {
                          "title": "burn deposits if quorum with vote type no_veto is met",
                          "type": "boolean"
                        }
                      },
                      "description": "params defines all the paramaters of x/gov module.\n\nSince: cosmos-sdk 0.47"
                    }
                  },
                  "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/proposals": {
      "get": {
        "tags": ["Query"],
        "summary": "Proposals queries all proposals based on given status.",
        "operationId": "GovV1Proposal",
        "parameters": [
          {
            "name": "proposal_status",
            "in": "query",
            "description": "proposal_status defines the status of the proposals.\n\n - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.\n - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit\nperiod.\n - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting\nperiod.\n - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has\npassed.\n - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has\nbeen rejected.\n - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has\nfailed.",
            "schema": {
              "type": "string",
              "default": "PROPOSAL_STATUS_UNSPECIFIED",
              "enum": [
                "PROPOSAL_STATUS_UNSPECIFIED",
                "PROPOSAL_STATUS_DEPOSIT_PERIOD",
                "PROPOSAL_STATUS_VOTING_PERIOD",
                "PROPOSAL_STATUS_PASSED",
                "PROPOSAL_STATUS_REJECTED",
                "PROPOSAL_STATUS_FAILED"
              ]
            }
          },
          {
            "name": "voter",
            "in": "query",
            "description": "voter defines the voter address for the proposals.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositor",
            "in": "query",
            "description": "depositor defines the deposit addresses from the proposals.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "proposals": {
                      "type": "array",
                      "description": "proposals defines all the requested governance proposals.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "id defines the unique id of the proposal.",
                            "format": "uint64"
                          },
                          "messages": {
                            "type": "array",
                            "description": "messages are the arbitrary messages to be executed if the proposal passes.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type_url": {
                                  "type": "string",
                                  "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                                },
                                "value": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                  "format": "byte"
                                }
                              },
                              "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "status defines the proposal status.",
                            "default": "PROPOSAL_STATUS_UNSPECIFIED",
                            "enum": [
                              "PROPOSAL_STATUS_UNSPECIFIED",
                              "PROPOSAL_STATUS_DEPOSIT_PERIOD",
                              "PROPOSAL_STATUS_VOTING_PERIOD",
                              "PROPOSAL_STATUS_PASSED",
                              "PROPOSAL_STATUS_REJECTED",
                              "PROPOSAL_STATUS_FAILED"
                            ]
                          },
                          "final_tally_result": {
                            "type": "object",
                            "properties": {
                              "yes_count": {
                                "type": "string",
                                "description": "yes_count is the number of yes votes on a proposal."
                              },
                              "abstain_count": {
                                "type": "string",
                                "description": "abstain_count is the number of abstain votes on a proposal."
                              },
                              "no_count": {
                                "type": "string",
                                "description": "no_count is the number of no votes on a proposal."
                              },
                              "no_with_veto_count": {
                                "type": "string",
                                "description": "no_with_veto_count is the number of no with veto votes on a proposal."
                              }
                            },
                            "description": "final_tally_result is the final tally result of the proposal. When\nquerying a proposal via gRPC, this field is not populated until the\nproposal's voting period has ended."
                          },
                          "submit_time": {
                            "type": "string",
                            "description": "submit_time is the time of proposal submission.",
                            "format": "date-time"
                          },
                          "deposit_end_time": {
                            "type": "string",
                            "description": "deposit_end_time is the end time for deposition.",
                            "format": "date-time"
                          },
                          "total_deposit": {
                            "type": "array",
                            "description": "total_deposit is the total deposit on the proposal.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "denom": {
                                  "type": "string"
                                },
                                "amount": {
                                  "type": "string"
                                }
                              },
                              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                            }
                          },
                          "voting_start_time": {
                            "type": "string",
                            "description": "voting_start_time is the starting time to vote on a proposal.",
                            "format": "date-time"
                          },
                          "voting_end_time": {
                            "type": "string",
                            "description": "voting_end_time is the end time of voting on a proposal.",
                            "format": "date-time"
                          },
                          "metadata": {
                            "title": "metadata is any arbitrary metadata attached to the proposal.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#proposal-3",
                            "type": "string"
                          },
                          "title": {
                            "title": "title is the title of the proposal",
                            "type": "string",
                            "description": "Since: cosmos-sdk 0.47"
                          },
                          "summary": {
                            "title": "summary is a short summary of the proposal",
                            "type": "string",
                            "description": "Since: cosmos-sdk 0.47"
                          },
                          "proposer": {
                            "title": "proposer is the address of the proposal sumbitter",
                            "type": "string",
                            "description": "Since: cosmos-sdk 0.47"
                          },
                          "expedited": {
                            "title": "expedited defines if the proposal is expedited",
                            "type": "boolean",
                            "description": "Since: cosmos-sdk 0.50"
                          },
                          "failed_reason": {
                            "title": "failed_reason defines the reason why the proposal failed",
                            "type": "string",
                            "description": "Since: cosmos-sdk 0.50"
                          }
                        },
                        "description": "Proposal defines the core field members of a governance proposal."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryProposalsResponse is the response type for the Query/Proposals RPC\nmethod."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/proposals/{proposal_id}": {
      "get": {
        "tags": ["Query"],
        "summary": "Proposal queries proposal details based on ProposalID.",
        "operationId": "GovV1Proposal",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "proposal": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "id defines the unique id of the proposal.",
                          "format": "uint64"
                        },
                        "messages": {
                          "type": "array",
                          "description": "messages are the arbitrary messages to be executed if the proposal passes.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                          }
                        },
                        "status": {
                          "type": "string",
                          "description": "status defines the proposal status.",
                          "default": "PROPOSAL_STATUS_UNSPECIFIED",
                          "enum": [
                            "PROPOSAL_STATUS_UNSPECIFIED",
                            "PROPOSAL_STATUS_DEPOSIT_PERIOD",
                            "PROPOSAL_STATUS_VOTING_PERIOD",
                            "PROPOSAL_STATUS_PASSED",
                            "PROPOSAL_STATUS_REJECTED",
                            "PROPOSAL_STATUS_FAILED"
                          ]
                        },
                        "final_tally_result": {
                          "type": "object",
                          "properties": {
                            "yes_count": {
                              "type": "string",
                              "description": "yes_count is the number of yes votes on a proposal."
                            },
                            "abstain_count": {
                              "type": "string",
                              "description": "abstain_count is the number of abstain votes on a proposal."
                            },
                            "no_count": {
                              "type": "string",
                              "description": "no_count is the number of no votes on a proposal."
                            },
                            "no_with_veto_count": {
                              "type": "string",
                              "description": "no_with_veto_count is the number of no with veto votes on a proposal."
                            }
                          },
                          "description": "final_tally_result is the final tally result of the proposal. When\nquerying a proposal via gRPC, this field is not populated until the\nproposal's voting period has ended."
                        },
                        "submit_time": {
                          "type": "string",
                          "description": "submit_time is the time of proposal submission.",
                          "format": "date-time"
                        },
                        "deposit_end_time": {
                          "type": "string",
                          "description": "deposit_end_time is the end time for deposition.",
                          "format": "date-time"
                        },
                        "total_deposit": {
                          "type": "array",
                          "description": "total_deposit is the total deposit on the proposal.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "denom": {
                                "type": "string"
                              },
                              "amount": {
                                "type": "string"
                              }
                            },
                            "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                          }
                        },
                        "voting_start_time": {
                          "type": "string",
                          "description": "voting_start_time is the starting time to vote on a proposal.",
                          "format": "date-time"
                        },
                        "voting_end_time": {
                          "type": "string",
                          "description": "voting_end_time is the end time of voting on a proposal.",
                          "format": "date-time"
                        },
                        "metadata": {
                          "title": "metadata is any arbitrary metadata attached to the proposal.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#proposal-3",
                          "type": "string"
                        },
                        "title": {
                          "title": "title is the title of the proposal",
                          "type": "string",
                          "description": "Since: cosmos-sdk 0.47"
                        },
                        "summary": {
                          "title": "summary is a short summary of the proposal",
                          "type": "string",
                          "description": "Since: cosmos-sdk 0.47"
                        },
                        "proposer": {
                          "title": "proposer is the address of the proposal sumbitter",
                          "type": "string",
                          "description": "Since: cosmos-sdk 0.47"
                        },
                        "expedited": {
                          "title": "expedited defines if the proposal is expedited",
                          "type": "boolean",
                          "description": "Since: cosmos-sdk 0.50"
                        },
                        "failed_reason": {
                          "title": "failed_reason defines the reason why the proposal failed",
                          "type": "string",
                          "description": "Since: cosmos-sdk 0.50"
                        }
                      },
                      "description": "Proposal defines the core field members of a governance proposal."
                    }
                  },
                  "description": "QueryProposalResponse is the response type for the Query/Proposal RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/proposals/{proposal_id}/deposits": {
      "get": {
        "tags": ["Query"],
        "summary": "Deposits queries all deposits of a single proposal.",
        "operationId": "GovV1Deposit",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deposits": {
                      "type": "array",
                      "description": "deposits defines the requested deposits.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "proposal_id": {
                            "type": "string",
                            "description": "proposal_id defines the unique id of the proposal.",
                            "format": "uint64"
                          },
                          "depositor": {
                            "type": "string",
                            "description": "depositor defines the deposit addresses from the proposals."
                          },
                          "amount": {
                            "type": "array",
                            "description": "amount to be deposited by depositor.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "denom": {
                                  "type": "string"
                                },
                                "amount": {
                                  "type": "string"
                                }
                              },
                              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                            }
                          }
                        },
                        "description": "Deposit defines an amount deposited by an account address to an active\nproposal."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryDepositsResponse is the response type for the Query/Deposits RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/proposals/{proposal_id}/deposits/{depositor}": {
      "get": {
        "tags": ["Query"],
        "summary": "Deposit queries single deposit information based on proposalID, depositAddr.",
        "operationId": "GovV1Deposit",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "depositor",
            "in": "path",
            "description": "depositor defines the deposit addresses from the proposals.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deposit": {
                      "type": "object",
                      "properties": {
                        "proposal_id": {
                          "type": "string",
                          "description": "proposal_id defines the unique id of the proposal.",
                          "format": "uint64"
                        },
                        "depositor": {
                          "type": "string",
                          "description": "depositor defines the deposit addresses from the proposals."
                        },
                        "amount": {
                          "type": "array",
                          "description": "amount to be deposited by depositor.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "denom": {
                                "type": "string"
                              },
                              "amount": {
                                "type": "string"
                              }
                            },
                            "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                          }
                        }
                      },
                      "description": "Deposit defines an amount deposited by an account address to an active\nproposal."
                    }
                  },
                  "description": "QueryDepositResponse is the response type for the Query/Deposit RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/proposals/{proposal_id}/tally": {
      "get": {
        "tags": ["Query"],
        "summary": "TallyResult queries the tally of a proposal vote.",
        "operationId": "GovV1TallyResult",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tally": {
                      "type": "object",
                      "properties": {
                        "yes_count": {
                          "type": "string",
                          "description": "yes_count is the number of yes votes on a proposal."
                        },
                        "abstain_count": {
                          "type": "string",
                          "description": "abstain_count is the number of abstain votes on a proposal."
                        },
                        "no_count": {
                          "type": "string",
                          "description": "no_count is the number of no votes on a proposal."
                        },
                        "no_with_veto_count": {
                          "type": "string",
                          "description": "no_with_veto_count is the number of no with veto votes on a proposal."
                        }
                      },
                      "description": "tally defines the requested tally."
                    }
                  },
                  "description": "QueryTallyResultResponse is the response type for the Query/Tally RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/proposals/{proposal_id}/votes": {
      "get": {
        "tags": ["Query"],
        "summary": "Votes queries votes of a given proposal.",
        "operationId": "GovV1Votes",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "votes": {
                      "type": "array",
                      "description": "votes defines the queried votes.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "proposal_id": {
                            "type": "string",
                            "description": "proposal_id defines the unique id of the proposal.",
                            "format": "uint64"
                          },
                          "voter": {
                            "type": "string",
                            "description": "voter is the voter address of the proposal."
                          },
                          "options": {
                            "type": "array",
                            "description": "options is the weighted vote options.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "option": {
                                  "type": "string",
                                  "description": "option defines the valid vote options, it must not contain duplicate vote options.",
                                  "default": "VOTE_OPTION_UNSPECIFIED",
                                  "enum": [
                                    "VOTE_OPTION_UNSPECIFIED",
                                    "VOTE_OPTION_YES",
                                    "VOTE_OPTION_ABSTAIN",
                                    "VOTE_OPTION_NO",
                                    "VOTE_OPTION_NO_WITH_VETO"
                                  ]
                                },
                                "weight": {
                                  "type": "string",
                                  "description": "weight is the vote weight associated with the vote option."
                                }
                              },
                              "description": "WeightedVoteOption defines a unit of vote for vote split."
                            }
                          },
                          "metadata": {
                            "title": "metadata is any arbitrary metadata attached to the vote.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#vote-5",
                            "type": "string"
                          }
                        },
                        "description": "Vote defines a vote on a governance proposal.\nA Vote consists of a proposal ID, the voter, and the vote option."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryVotesResponse is the response type for the Query/Votes RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/proposals/{proposal_id}/votes/{voter}": {
      "get": {
        "tags": ["Query"],
        "summary": "Vote queries voted information based on proposalID, voterAddr.",
        "operationId": "GovV1Vote",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "voter",
            "in": "path",
            "description": "voter defines the voter address for the proposals.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vote": {
                      "type": "object",
                      "properties": {
                        "proposal_id": {
                          "type": "string",
                          "description": "proposal_id defines the unique id of the proposal.",
                          "format": "uint64"
                        },
                        "voter": {
                          "type": "string",
                          "description": "voter is the voter address of the proposal."
                        },
                        "options": {
                          "type": "array",
                          "description": "options is the weighted vote options.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "option": {
                                "type": "string",
                                "description": "option defines the valid vote options, it must not contain duplicate vote options.",
                                "default": "VOTE_OPTION_UNSPECIFIED",
                                "enum": [
                                  "VOTE_OPTION_UNSPECIFIED",
                                  "VOTE_OPTION_YES",
                                  "VOTE_OPTION_ABSTAIN",
                                  "VOTE_OPTION_NO",
                                  "VOTE_OPTION_NO_WITH_VETO"
                                ]
                              },
                              "weight": {
                                "type": "string",
                                "description": "weight is the vote weight associated with the vote option."
                              }
                            },
                            "description": "WeightedVoteOption defines a unit of vote for vote split."
                          }
                        },
                        "metadata": {
                          "title": "metadata is any arbitrary metadata attached to the vote.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#vote-5",
                          "type": "string"
                        }
                      },
                      "description": "Vote defines a vote on a governance proposal.\nA Vote consists of a proposal ID, the voter, and the vote option."
                    }
                  },
                  "description": "QueryVoteResponse is the response type for the Query/Vote RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/mint/v1beta1/annual_provisions": {
      "get": {
        "tags": ["Query"],
        "summary": "AnnualProvisions current minting annual provisions value.",
        "operationId": "AnnualProvisions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "annual_provisions": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "annual_provisions is the current minting annual provisions value.",
                      "format": "byte"
                    }
                  },
                  "description": "QueryAnnualProvisionsResponse is the response type for the\nQuery/AnnualProvisions RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/mint/v1beta1/inflation": {
      "get": {
        "tags": ["Query"],
        "summary": "Inflation returns the current minting inflation value.",
        "operationId": "Inflation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "inflation": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "inflation is the current minting inflation value.",
                      "format": "byte"
                    }
                  },
                  "description": "QueryInflationResponse is the response type for the Query/Inflation RPC\nmethod."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/mint/v1beta1/params": {
      "get": {
        "tags": ["Query"],
        "summary": "Params returns the total set of minting parameters.",
        "operationId": "MintParams",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "params": {
                      "type": "object",
                      "properties": {
                        "mint_denom": {
                          "title": "type of coin to mint",
                          "type": "string"
                        },
                        "inflation_rate_change": {
                          "title": "maximum annual change in inflation rate",
                          "type": "string"
                        },
                        "inflation_max": {
                          "title": "maximum inflation rate",
                          "type": "string"
                        },
                        "inflation_min": {
                          "title": "minimum inflation rate",
                          "type": "string"
                        },
                        "goal_bonded": {
                          "title": "goal of percent bonded atoms",
                          "type": "string"
                        },
                        "blocks_per_year": {
                          "title": "expected blocks per year",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "params defines the parameters of the module."
                    }
                  },
                  "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/params/v1beta1/params": {
      "get": {
        "tags": ["Query"],
        "summary": "Params queries a specific parameter of a module, given its subspace and\nkey.",
        "operationId": "Params",
        "parameters": [
          {
            "name": "subspace",
            "in": "query",
            "description": "subspace defines the module to query the parameter for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "key defines the key of the parameter in the subspace.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "param": {
                      "type": "object",
                      "properties": {
                        "subspace": {
                          "type": "string"
                        },
                        "key": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      },
                      "description": "param defines the queried parameter."
                    }
                  },
                  "description": "QueryParamsResponse is response type for the Query/Params RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/params/v1beta1/subspaces": {
      "get": {
        "tags": ["Query"],
        "summary": "Subspaces queries for all registered subspaces and all keys for a subspace.",
        "description": "Since: cosmos-sdk 0.46",
        "operationId": "Subspaces",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "subspaces": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "subspace": {
                            "type": "string"
                          },
                          "keys": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "description": "Subspace defines a parameter subspace name and all the keys that exist for\nthe subspace.\n\nSince: cosmos-sdk 0.46"
                      }
                    }
                  },
                  "description": "QuerySubspacesResponse defines the response types for querying for all\nregistered subspaces and all keys for a subspace.\n\nSince: cosmos-sdk 0.46"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/slashing/v1beta1/params": {
      "get": {
        "tags": ["Query"],
        "summary": "Params queries the parameters of slashing module",
        "operationId": "SlashingParams",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QueryParamsResponse is the response type for the Query/Params RPC method",
                  "type": "object",
                  "properties": {
                    "params": {
                      "type": "object",
                      "properties": {
                        "signed_blocks_window": {
                          "type": "string",
                          "format": "int64"
                        },
                        "min_signed_per_window": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        },
                        "downtime_jail_duration": {
                          "type": "string"
                        },
                        "slash_fraction_double_sign": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        },
                        "slash_fraction_downtime": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        }
                      },
                      "description": "Params represents the parameters used for by the slashing module."
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/slashing/v1beta1/signing_infos": {
      "get": {
        "tags": ["Query"],
        "summary": "SigningInfos queries signing info of all validators",
        "operationId": "SigningInfos",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QuerySigningInfosResponse is the response type for the Query/SigningInfos RPC\nmethod",
                  "type": "object",
                  "properties": {
                    "info": {
                      "title": "info is the signing info of all validators",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string"
                          },
                          "start_height": {
                            "title": "Height at which validator was first a candidate OR was un-jailed",
                            "type": "string",
                            "format": "int64"
                          },
                          "index_offset": {
                            "type": "string",
                            "description": "Index which is incremented every time a validator is bonded in a block and\n_may_ have signed a pre-commit or not. This in conjunction with the\nsigned_blocks_window param determines the index in the missed block bitmap.",
                            "format": "int64"
                          },
                          "jailed_until": {
                            "type": "string",
                            "description": "Timestamp until which the validator is jailed due to liveness downtime.",
                            "format": "date-time"
                          },
                          "tombstoned": {
                            "type": "boolean",
                            "description": "Whether or not a validator has been tombstoned (killed out of validator\nset). It is set once the validator commits an equivocation or for any other\nconfigured misbehavior."
                          },
                          "missed_blocks_counter": {
                            "type": "string",
                            "description": "A counter of missed (unsigned) blocks. It is used to avoid unnecessary\nreads in the missed block bitmap.",
                            "format": "int64"
                          }
                        },
                        "description": "ValidatorSigningInfo defines a validator's signing info for monitoring their\nliveness activity."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "PageResponse is to be embedded in gRPC response messages where the\ncorresponding request message has used PageRequest.\n\n message SomeResponse {\n         repeated Bar results = 1;\n         PageResponse page = 2;\n }"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/slashing/v1beta1/signing_infos/{cons_address}": {
      "get": {
        "tags": ["Query"],
        "summary": "SigningInfo queries the signing info of given cons address",
        "operationId": "SigningInfo",
        "parameters": [
          {
            "name": "cons_address",
            "in": "path",
            "description": "cons_address is the address to query signing info of",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QuerySigningInfoResponse is the response type for the Query/SigningInfo RPC\nmethod",
                  "type": "object",
                  "properties": {
                    "val_signing_info": {
                      "title": "val_signing_info is the signing info of requested val cons address",
                      "type": "object",
                      "properties": {
                        "address": {
                          "type": "string"
                        },
                        "start_height": {
                          "title": "Height at which validator was first a candidate OR was un-jailed",
                          "type": "string",
                          "format": "int64"
                        },
                        "index_offset": {
                          "type": "string",
                          "description": "Index which is incremented every time a validator is bonded in a block and\n_may_ have signed a pre-commit or not. This in conjunction with the\nsigned_blocks_window param determines the index in the missed block bitmap.",
                          "format": "int64"
                        },
                        "jailed_until": {
                          "type": "string",
                          "description": "Timestamp until which the validator is jailed due to liveness downtime.",
                          "format": "date-time"
                        },
                        "tombstoned": {
                          "type": "boolean",
                          "description": "Whether or not a validator has been tombstoned (killed out of validator\nset). It is set once the validator commits an equivocation or for any other\nconfigured misbehavior."
                        },
                        "missed_blocks_counter": {
                          "type": "string",
                          "description": "A counter of missed (unsigned) blocks. It is used to avoid unnecessary\nreads in the missed block bitmap.",
                          "format": "int64"
                        }
                      },
                      "description": "ValidatorSigningInfo defines a validator's signing info for monitoring their\nliveness activity."
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/delegations/{delegator_addr}": {
      "get": {
        "tags": ["Query"],
        "summary": "DelegatorDelegations queries all delegations of a given delegator address.",
        "description": "When called from another module, this query might consume a high amount of\ngas if the pagination field is incorrectly set.",
        "operationId": "DelegatorDelegations",
        "parameters": [
          {
            "name": "delegator_addr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "delegation_responses": {
                      "type": "array",
                      "description": "delegation_responses defines all the delegations' info of a delegator.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "delegation": {
                            "type": "object",
                            "properties": {
                              "delegator_address": {
                                "type": "string",
                                "description": "delegator_address is the encoded address of the delegator."
                              },
                              "validator_address": {
                                "type": "string",
                                "description": "validator_address is the encoded address of the validator."
                              },
                              "shares": {
                                "type": "string",
                                "description": "shares define the delegation shares received."
                              }
                            },
                            "description": "Delegation represents the bond with tokens held by an account. It is\nowned by one delegator, and is associated with the voting power of one\nvalidator."
                          },
                          "balance": {
                            "type": "object",
                            "properties": {
                              "denom": {
                                "type": "string"
                              },
                              "amount": {
                                "type": "string"
                              }
                            },
                            "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                          }
                        },
                        "description": "DelegationResponse is equivalent to Delegation except that it contains a\nbalance in addition to shares which is more suitable for client responses."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryDelegatorDelegationsResponse is response type for the\nQuery/DelegatorDelegations RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations": {
      "get": {
        "tags": ["Query"],
        "summary": "Redelegations queries redelegations of given address.",
        "description": "When called from another module, this query might consume a high amount of\ngas if the pagination field is incorrectly set.",
        "operationId": "Redelegations",
        "parameters": [
          {
            "name": "delegator_addr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "src_validator_addr",
            "in": "query",
            "description": "src_validator_addr defines the validator address to redelegate from.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dst_validator_addr",
            "in": "query",
            "description": "dst_validator_addr defines the validator address to redelegate to.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "redelegation_responses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "redelegation": {
                            "type": "object",
                            "properties": {
                              "delegator_address": {
                                "type": "string",
                                "description": "delegator_address is the bech32-encoded address of the delegator."
                              },
                              "validator_src_address": {
                                "type": "string",
                                "description": "validator_src_address is the validator redelegation source operator address."
                              },
                              "validator_dst_address": {
                                "type": "string",
                                "description": "validator_dst_address is the validator redelegation destination operator address."
                              },
                              "entries": {
                                "type": "array",
                                "description": "entries are the redelegation entries.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "creation_height": {
                                      "type": "string",
                                      "description": "creation_height  defines the height which the redelegation took place.",
                                      "format": "int64"
                                    },
                                    "completion_time": {
                                      "type": "string",
                                      "description": "completion_time defines the unix time for redelegation completion.",
                                      "format": "date-time"
                                    },
                                    "initial_balance": {
                                      "type": "string",
                                      "description": "initial_balance defines the initial balance when redelegation started."
                                    },
                                    "shares_dst": {
                                      "type": "string",
                                      "description": "shares_dst is the amount of destination-validator shares created by redelegation."
                                    },
                                    "unbonding_id": {
                                      "title": "Incrementing id that uniquely identifies this entry",
                                      "type": "string",
                                      "format": "uint64"
                                    },
                                    "unbonding_on_hold_ref_count": {
                                      "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
                                      "type": "string",
                                      "format": "int64"
                                    }
                                  },
                                  "description": "RedelegationEntry defines a redelegation object with relevant metadata."
                                }
                              }
                            },
                            "description": "Redelegation contains the list of a particular delegator's redelegating bonds\nfrom a particular source validator to a particular destination validator."
                          },
                          "entries": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "redelegation_entry": {
                                  "type": "object",
                                  "properties": {
                                    "creation_height": {
                                      "type": "string",
                                      "description": "creation_height  defines the height which the redelegation took place.",
                                      "format": "int64"
                                    },
                                    "completion_time": {
                                      "type": "string",
                                      "description": "completion_time defines the unix time for redelegation completion.",
                                      "format": "date-time"
                                    },
                                    "initial_balance": {
                                      "type": "string",
                                      "description": "initial_balance defines the initial balance when redelegation started."
                                    },
                                    "shares_dst": {
                                      "type": "string",
                                      "description": "shares_dst is the amount of destination-validator shares created by redelegation."
                                    },
                                    "unbonding_id": {
                                      "title": "Incrementing id that uniquely identifies this entry",
                                      "type": "string",
                                      "format": "uint64"
                                    },
                                    "unbonding_on_hold_ref_count": {
                                      "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
                                      "type": "string",
                                      "format": "int64"
                                    }
                                  },
                                  "description": "RedelegationEntry defines a redelegation object with relevant metadata."
                                },
                                "balance": {
                                  "type": "string"
                                }
                              },
                              "description": "RedelegationEntryResponse is equivalent to a RedelegationEntry except that it\ncontains a balance in addition to shares which is more suitable for client\nresponses."
                            }
                          }
                        },
                        "description": "RedelegationResponse is equivalent to a Redelegation except that its entries\ncontain a balance in addition to shares which is more suitable for client\nresponses."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryRedelegationsResponse is response type for the Query/Redelegations RPC\nmethod."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations": {
      "get": {
        "tags": ["Query"],
        "summary": "DelegatorUnbondingDelegations queries all unbonding delegations of a given\ndelegator address.",
        "description": "When called from another module, this query might consume a high amount of\ngas if the pagination field is incorrectly set.",
        "operationId": "DelegatorUnbondingDelegations",
        "parameters": [
          {
            "name": "delegator_addr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unbonding_responses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "delegator_address": {
                            "type": "string",
                            "description": "delegator_address is the encoded address of the delegator."
                          },
                          "validator_address": {
                            "type": "string",
                            "description": "validator_address is the encoded address of the validator."
                          },
                          "entries": {
                            "type": "array",
                            "description": "entries are the unbonding delegation entries.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "creation_height": {
                                  "type": "string",
                                  "description": "creation_height is the height which the unbonding took place.",
                                  "format": "int64"
                                },
                                "completion_time": {
                                  "type": "string",
                                  "description": "completion_time is the unix time for unbonding completion.",
                                  "format": "date-time"
                                },
                                "initial_balance": {
                                  "type": "string",
                                  "description": "initial_balance defines the tokens initially scheduled to receive at completion."
                                },
                                "balance": {
                                  "type": "string",
                                  "description": "balance defines the tokens to receive at completion."
                                },
                                "unbonding_id": {
                                  "title": "Incrementing id that uniquely identifies this entry",
                                  "type": "string",
                                  "format": "uint64"
                                },
                                "unbonding_on_hold_ref_count": {
                                  "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
                                  "type": "string",
                                  "format": "int64"
                                }
                              },
                              "description": "UnbondingDelegationEntry defines an unbonding object with relevant metadata."
                            }
                          }
                        },
                        "description": "UnbondingDelegation stores all of a single delegator's unbonding bonds\nfor a single validator in an time-ordered list."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryUnbondingDelegatorDelegationsResponse is response type for the\nQuery/UnbondingDelegatorDelegations RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators": {
      "get": {
        "tags": ["Query"],
        "summary": "DelegatorValidators queries all validators info for given delegator\naddress.",
        "description": "When called from another module, this query might consume a high amount of\ngas if the pagination field is incorrectly set.",
        "operationId": "StakingDelegatorValidators",
        "parameters": [
          {
            "name": "delegator_addr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "validators": {
                      "type": "array",
                      "description": "validators defines the validators' info of a delegator.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "operator_address": {
                            "type": "string",
                            "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
                          },
                          "consensus_pubkey": {
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                          },
                          "jailed": {
                            "type": "boolean",
                            "description": "jailed defined whether the validator has been jailed from bonded status or not."
                          },
                          "status": {
                            "type": "string",
                            "description": "status is the validator status (bonded/unbonding/unbonded).",
                            "default": "BOND_STATUS_UNSPECIFIED",
                            "enum": [
                              "BOND_STATUS_UNSPECIFIED",
                              "BOND_STATUS_UNBONDED",
                              "BOND_STATUS_UNBONDING",
                              "BOND_STATUS_BONDED"
                            ]
                          },
                          "tokens": {
                            "type": "string",
                            "description": "tokens define the delegated tokens (incl. self-delegation)."
                          },
                          "delegator_shares": {
                            "type": "string",
                            "description": "delegator_shares defines total shares issued to a validator's delegators."
                          },
                          "description": {
                            "type": "object",
                            "properties": {
                              "moniker": {
                                "type": "string",
                                "description": "moniker defines a human-readable name for the validator."
                              },
                              "identity": {
                                "type": "string",
                                "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
                              },
                              "website": {
                                "type": "string",
                                "description": "website defines an optional website link."
                              },
                              "security_contact": {
                                "type": "string",
                                "description": "security_contact defines an optional email for security contact."
                              },
                              "details": {
                                "type": "string",
                                "description": "details define other optional details."
                              }
                            },
                            "description": "description defines the description terms for the validator."
                          },
                          "unbonding_height": {
                            "type": "string",
                            "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.",
                            "format": "int64"
                          },
                          "unbonding_time": {
                            "type": "string",
                            "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
                            "format": "date-time"
                          },
                          "commission": {
                            "type": "object",
                            "properties": {
                              "commission_rates": {
                                "type": "object",
                                "properties": {
                                  "rate": {
                                    "type": "string",
                                    "description": "rate is the commission rate charged to delegators, as a fraction."
                                  },
                                  "max_rate": {
                                    "type": "string",
                                    "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
                                  },
                                  "max_change_rate": {
                                    "type": "string",
                                    "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
                                  }
                                },
                                "description": "commission_rates defines the initial commission rates to be used for creating a validator."
                              },
                              "update_time": {
                                "type": "string",
                                "description": "update_time is the last time the commission rate was changed.",
                                "format": "date-time"
                              }
                            },
                            "description": "commission defines the commission parameters."
                          },
                          "min_self_delegation": {
                            "type": "string",
                            "description": "min_self_delegation is the validator's self declared minimum self delegation.\n\nSince: cosmos-sdk 0.46"
                          },
                          "unbonding_on_hold_ref_count": {
                            "title": "strictly positive if this validator's unbonding has been stopped by external modules",
                            "type": "string",
                            "format": "int64"
                          },
                          "unbonding_ids": {
                            "title": "list of unbonding ids, each uniquely identifing an unbonding of this validator",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "format": "uint64"
                            }
                          }
                        },
                        "description": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryDelegatorValidatorsResponse is response type for the\nQuery/DelegatorValidators RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}": {
      "get": {
        "tags": ["Query"],
        "summary": "DelegatorValidator queries validator info for given delegator validator\npair.",
        "operationId": "DelegatorValidator",
        "parameters": [
          {
            "name": "delegator_addr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validator_addr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "validator": {
                      "type": "object",
                      "properties": {
                        "operator_address": {
                          "type": "string",
                          "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
                        },
                        "consensus_pubkey": {
                          "type": "object",
                          "properties": {
                            "type_url": {
                              "type": "string",
                              "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                            },
                            "value": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Must be a valid serialized protocol buffer of the above specified type.",
                              "format": "byte"
                            }
                          },
                          "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                        },
                        "jailed": {
                          "type": "boolean",
                          "description": "jailed defined whether the validator has been jailed from bonded status or not."
                        },
                        "status": {
                          "type": "string",
                          "description": "status is the validator status (bonded/unbonding/unbonded).",
                          "default": "BOND_STATUS_UNSPECIFIED",
                          "enum": [
                            "BOND_STATUS_UNSPECIFIED",
                            "BOND_STATUS_UNBONDED",
                            "BOND_STATUS_UNBONDING",
                            "BOND_STATUS_BONDED"
                          ]
                        },
                        "tokens": {
                          "type": "string",
                          "description": "tokens define the delegated tokens (incl. self-delegation)."
                        },
                        "delegator_shares": {
                          "type": "string",
                          "description": "delegator_shares defines total shares issued to a validator's delegators."
                        },
                        "description": {
                          "type": "object",
                          "properties": {
                            "moniker": {
                              "type": "string",
                              "description": "moniker defines a human-readable name for the validator."
                            },
                            "identity": {
                              "type": "string",
                              "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
                            },
                            "website": {
                              "type": "string",
                              "description": "website defines an optional website link."
                            },
                            "security_contact": {
                              "type": "string",
                              "description": "security_contact defines an optional email for security contact."
                            },
                            "details": {
                              "type": "string",
                              "description": "details define other optional details."
                            }
                          },
                          "description": "description defines the description terms for the validator."
                        },
                        "unbonding_height": {
                          "type": "string",
                          "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.",
                          "format": "int64"
                        },
                        "unbonding_time": {
                          "type": "string",
                          "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
                          "format": "date-time"
                        },
                        "commission": {
                          "type": "object",
                          "properties": {
                            "commission_rates": {
                              "type": "object",
                              "properties": {
                                "rate": {
                                  "type": "string",
                                  "description": "rate is the commission rate charged to delegators, as a fraction."
                                },
                                "max_rate": {
                                  "type": "string",
                                  "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
                                },
                                "max_change_rate": {
                                  "type": "string",
                                  "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
                                }
                              },
                              "description": "commission_rates defines the initial commission rates to be used for creating a validator."
                            },
                            "update_time": {
                              "type": "string",
                              "description": "update_time is the last time the commission rate was changed.",
                              "format": "date-time"
                            }
                          },
                          "description": "commission defines the commission parameters."
                        },
                        "min_self_delegation": {
                          "type": "string",
                          "description": "min_self_delegation is the validator's self declared minimum self delegation.\n\nSince: cosmos-sdk 0.46"
                        },
                        "unbonding_on_hold_ref_count": {
                          "title": "strictly positive if this validator's unbonding has been stopped by external modules",
                          "type": "string",
                          "format": "int64"
                        },
                        "unbonding_ids": {
                          "title": "list of unbonding ids, each uniquely identifing an unbonding of this validator",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "uint64"
                          }
                        }
                      },
                      "description": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
                    }
                  },
                  "description": "QueryDelegatorValidatorResponse response type for the\nQuery/DelegatorValidator RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/historical_info/{height}": {
      "get": {
        "tags": ["Query"],
        "summary": "HistoricalInfo queries the historical info for given height.",
        "operationId": "HistoricalInfo",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "height defines at which height to query the historical info.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hist": {
                      "type": "object",
                      "properties": {
                        "header": {
                          "type": "object",
                          "properties": {
                            "version": {
                              "title": "basic block info",
                              "type": "object",
                              "properties": {
                                "block": {
                                  "type": "string",
                                  "format": "uint64"
                                },
                                "app": {
                                  "type": "string",
                                  "format": "uint64"
                                }
                              },
                              "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                            },
                            "chain_id": {
                              "type": "string"
                            },
                            "height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "time": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "last_block_id": {
                              "title": "prev block info",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "part_set_header": {
                                  "title": "PartsetHeader",
                                  "type": "object",
                                  "properties": {
                                    "total": {
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    }
                                  }
                                }
                              }
                            },
                            "last_commit_hash": {
                              "title": "hashes of block data",
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "data_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "validators_hash": {
                              "title": "hashes from the app output from the prev block",
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "next_validators_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "consensus_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "app_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "last_results_hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "evidence_hash": {
                              "title": "consensus info",
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "proposer_address": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            }
                          },
                          "description": "Header defines the structure of a block header."
                        },
                        "valset": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "operator_address": {
                                "type": "string",
                                "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
                              },
                              "consensus_pubkey": {
                                "type": "object",
                                "properties": {
                                  "type_url": {
                                    "type": "string",
                                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                                  },
                                  "value": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                    "format": "byte"
                                  }
                                },
                                "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                              },
                              "jailed": {
                                "type": "boolean",
                                "description": "jailed defined whether the validator has been jailed from bonded status or not."
                              },
                              "status": {
                                "type": "string",
                                "description": "status is the validator status (bonded/unbonding/unbonded).",
                                "default": "BOND_STATUS_UNSPECIFIED",
                                "enum": [
                                  "BOND_STATUS_UNSPECIFIED",
                                  "BOND_STATUS_UNBONDED",
                                  "BOND_STATUS_UNBONDING",
                                  "BOND_STATUS_BONDED"
                                ]
                              },
                              "tokens": {
                                "type": "string",
                                "description": "tokens define the delegated tokens (incl. self-delegation)."
                              },
                              "delegator_shares": {
                                "type": "string",
                                "description": "delegator_shares defines total shares issued to a validator's delegators."
                              },
                              "description": {
                                "type": "object",
                                "properties": {
                                  "moniker": {
                                    "type": "string",
                                    "description": "moniker defines a human-readable name for the validator."
                                  },
                                  "identity": {
                                    "type": "string",
                                    "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
                                  },
                                  "website": {
                                    "type": "string",
                                    "description": "website defines an optional website link."
                                  },
                                  "security_contact": {
                                    "type": "string",
                                    "description": "security_contact defines an optional email for security contact."
                                  },
                                  "details": {
                                    "type": "string",
                                    "description": "details define other optional details."
                                  }
                                },
                                "description": "description defines the description terms for the validator."
                              },
                              "unbonding_height": {
                                "type": "string",
                                "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.",
                                "format": "int64"
                              },
                              "unbonding_time": {
                                "type": "string",
                                "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
                                "format": "date-time"
                              },
                              "commission": {
                                "type": "object",
                                "properties": {
                                  "commission_rates": {
                                    "type": "object",
                                    "properties": {
                                      "rate": {
                                        "type": "string",
                                        "description": "rate is the commission rate charged to delegators, as a fraction."
                                      },
                                      "max_rate": {
                                        "type": "string",
                                        "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
                                      },
                                      "max_change_rate": {
                                        "type": "string",
                                        "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
                                      }
                                    },
                                    "description": "commission_rates defines the initial commission rates to be used for creating a validator."
                                  },
                                  "update_time": {
                                    "type": "string",
                                    "description": "update_time is the last time the commission rate was changed.",
                                    "format": "date-time"
                                  }
                                },
                                "description": "commission defines the commission parameters."
                              },
                              "min_self_delegation": {
                                "type": "string",
                                "description": "min_self_delegation is the validator's self declared minimum self delegation.\n\nSince: cosmos-sdk 0.46"
                              },
                              "unbonding_on_hold_ref_count": {
                                "title": "strictly positive if this validator's unbonding has been stopped by external modules",
                                "type": "string",
                                "format": "int64"
                              },
                              "unbonding_ids": {
                                "title": "list of unbonding ids, each uniquely identifing an unbonding of this validator",
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "format": "uint64"
                                }
                              }
                            },
                            "description": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
                          }
                        }
                      },
                      "description": "hist defines the historical info at the given height."
                    }
                  },
                  "description": "QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC\nmethod."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/params": {
      "get": {
        "tags": ["Query"],
        "summary": "Parameters queries the staking parameters.",
        "operationId": "StakingParams",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "params": {
                      "type": "object",
                      "properties": {
                        "unbonding_time": {
                          "type": "string",
                          "description": "unbonding_time is the time duration of unbonding."
                        },
                        "max_validators": {
                          "type": "integer",
                          "description": "max_validators is the maximum number of validators.",
                          "format": "int64"
                        },
                        "max_entries": {
                          "type": "integer",
                          "description": "max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).",
                          "format": "int64"
                        },
                        "historical_entries": {
                          "type": "integer",
                          "description": "historical_entries is the number of historical entries to persist.",
                          "format": "int64"
                        },
                        "bond_denom": {
                          "type": "string",
                          "description": "bond_denom defines the bondable coin denomination."
                        },
                        "min_commission_rate": {
                          "title": "min_commission_rate is the chain-wide minimum commission rate that a validator can charge their delegators",
                          "type": "string"
                        }
                      },
                      "description": "params holds all the parameters of this module."
                    }
                  },
                  "description": "QueryParamsResponse is response type for the Query/Params RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/pool": {
      "get": {
        "tags": ["Query"],
        "summary": "Pool queries the pool info.",
        "operationId": "Pool",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pool": {
                      "type": "object",
                      "properties": {
                        "not_bonded_tokens": {
                          "type": "string"
                        },
                        "bonded_tokens": {
                          "type": "string"
                        }
                      },
                      "description": "pool defines the pool info."
                    }
                  },
                  "description": "QueryPoolResponse is response type for the Query/Pool RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/validators": {
      "get": {
        "tags": ["Query"],
        "summary": "Validators queries all validators that match the given status.",
        "description": "When called from another module, this query might consume a high amount of\ngas if the pagination field is incorrectly set.",
        "operationId": "Validators",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "status enables to query for validators matching a given status.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QueryValidatorsResponse is response type for the Query/Validators RPC method",
                  "type": "object",
                  "properties": {
                    "validators": {
                      "type": "array",
                      "description": "validators contains all the queried validators.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "operator_address": {
                            "type": "string",
                            "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
                          },
                          "consensus_pubkey": {
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                          },
                          "jailed": {
                            "type": "boolean",
                            "description": "jailed defined whether the validator has been jailed from bonded status or not."
                          },
                          "status": {
                            "type": "string",
                            "description": "status is the validator status (bonded/unbonding/unbonded).",
                            "default": "BOND_STATUS_UNSPECIFIED",
                            "enum": [
                              "BOND_STATUS_UNSPECIFIED",
                              "BOND_STATUS_UNBONDED",
                              "BOND_STATUS_UNBONDING",
                              "BOND_STATUS_BONDED"
                            ]
                          },
                          "tokens": {
                            "type": "string",
                            "description": "tokens define the delegated tokens (incl. self-delegation)."
                          },
                          "delegator_shares": {
                            "type": "string",
                            "description": "delegator_shares defines total shares issued to a validator's delegators."
                          },
                          "description": {
                            "type": "object",
                            "properties": {
                              "moniker": {
                                "type": "string",
                                "description": "moniker defines a human-readable name for the validator."
                              },
                              "identity": {
                                "type": "string",
                                "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
                              },
                              "website": {
                                "type": "string",
                                "description": "website defines an optional website link."
                              },
                              "security_contact": {
                                "type": "string",
                                "description": "security_contact defines an optional email for security contact."
                              },
                              "details": {
                                "type": "string",
                                "description": "details define other optional details."
                              }
                            },
                            "description": "description defines the description terms for the validator."
                          },
                          "unbonding_height": {
                            "type": "string",
                            "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.",
                            "format": "int64"
                          },
                          "unbonding_time": {
                            "type": "string",
                            "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
                            "format": "date-time"
                          },
                          "commission": {
                            "type": "object",
                            "properties": {
                              "commission_rates": {
                                "type": "object",
                                "properties": {
                                  "rate": {
                                    "type": "string",
                                    "description": "rate is the commission rate charged to delegators, as a fraction."
                                  },
                                  "max_rate": {
                                    "type": "string",
                                    "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
                                  },
                                  "max_change_rate": {
                                    "type": "string",
                                    "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
                                  }
                                },
                                "description": "commission_rates defines the initial commission rates to be used for creating a validator."
                              },
                              "update_time": {
                                "type": "string",
                                "description": "update_time is the last time the commission rate was changed.",
                                "format": "date-time"
                              }
                            },
                            "description": "commission defines the commission parameters."
                          },
                          "min_self_delegation": {
                            "type": "string",
                            "description": "min_self_delegation is the validator's self declared minimum self delegation.\n\nSince: cosmos-sdk 0.46"
                          },
                          "unbonding_on_hold_ref_count": {
                            "title": "strictly positive if this validator's unbonding has been stopped by external modules",
                            "type": "string",
                            "format": "int64"
                          },
                          "unbonding_ids": {
                            "title": "list of unbonding ids, each uniquely identifing an unbonding of this validator",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "format": "uint64"
                            }
                          }
                        },
                        "description": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/validators/{validator_addr}": {
      "get": {
        "tags": ["Query"],
        "summary": "Validator queries validator info for given validator address.",
        "operationId": "Validator",
        "parameters": [
          {
            "name": "validator_addr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QueryValidatorResponse is response type for the Query/Validator RPC method",
                  "type": "object",
                  "properties": {
                    "validator": {
                      "type": "object",
                      "properties": {
                        "operator_address": {
                          "type": "string",
                          "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
                        },
                        "consensus_pubkey": {
                          "type": "object",
                          "properties": {
                            "type_url": {
                              "type": "string",
                              "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                            },
                            "value": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Must be a valid serialized protocol buffer of the above specified type.",
                              "format": "byte"
                            }
                          },
                          "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                        },
                        "jailed": {
                          "type": "boolean",
                          "description": "jailed defined whether the validator has been jailed from bonded status or not."
                        },
                        "status": {
                          "type": "string",
                          "description": "status is the validator status (bonded/unbonding/unbonded).",
                          "default": "BOND_STATUS_UNSPECIFIED",
                          "enum": [
                            "BOND_STATUS_UNSPECIFIED",
                            "BOND_STATUS_UNBONDED",
                            "BOND_STATUS_UNBONDING",
                            "BOND_STATUS_BONDED"
                          ]
                        },
                        "tokens": {
                          "type": "string",
                          "description": "tokens define the delegated tokens (incl. self-delegation)."
                        },
                        "delegator_shares": {
                          "type": "string",
                          "description": "delegator_shares defines total shares issued to a validator's delegators."
                        },
                        "description": {
                          "type": "object",
                          "properties": {
                            "moniker": {
                              "type": "string",
                              "description": "moniker defines a human-readable name for the validator."
                            },
                            "identity": {
                              "type": "string",
                              "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
                            },
                            "website": {
                              "type": "string",
                              "description": "website defines an optional website link."
                            },
                            "security_contact": {
                              "type": "string",
                              "description": "security_contact defines an optional email for security contact."
                            },
                            "details": {
                              "type": "string",
                              "description": "details define other optional details."
                            }
                          },
                          "description": "description defines the description terms for the validator."
                        },
                        "unbonding_height": {
                          "type": "string",
                          "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.",
                          "format": "int64"
                        },
                        "unbonding_time": {
                          "type": "string",
                          "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
                          "format": "date-time"
                        },
                        "commission": {
                          "type": "object",
                          "properties": {
                            "commission_rates": {
                              "type": "object",
                              "properties": {
                                "rate": {
                                  "type": "string",
                                  "description": "rate is the commission rate charged to delegators, as a fraction."
                                },
                                "max_rate": {
                                  "type": "string",
                                  "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
                                },
                                "max_change_rate": {
                                  "type": "string",
                                  "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
                                }
                              },
                              "description": "commission_rates defines the initial commission rates to be used for creating a validator."
                            },
                            "update_time": {
                              "type": "string",
                              "description": "update_time is the last time the commission rate was changed.",
                              "format": "date-time"
                            }
                          },
                          "description": "commission defines the commission parameters."
                        },
                        "min_self_delegation": {
                          "type": "string",
                          "description": "min_self_delegation is the validator's self declared minimum self delegation.\n\nSince: cosmos-sdk 0.46"
                        },
                        "unbonding_on_hold_ref_count": {
                          "title": "strictly positive if this validator's unbonding has been stopped by external modules",
                          "type": "string",
                          "format": "int64"
                        },
                        "unbonding_ids": {
                          "title": "list of unbonding ids, each uniquely identifing an unbonding of this validator",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "uint64"
                          }
                        }
                      },
                      "description": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations": {
      "get": {
        "tags": ["Query"],
        "summary": "ValidatorDelegations queries delegate info for given validator.",
        "description": "When called from another module, this query might consume a high amount of\ngas if the pagination field is incorrectly set.",
        "operationId": "ValidatorDelegations",
        "parameters": [
          {
            "name": "validator_addr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QueryValidatorDelegationsResponse is response type for the\nQuery/ValidatorDelegations RPC method",
                  "type": "object",
                  "properties": {
                    "delegation_responses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "delegation": {
                            "type": "object",
                            "properties": {
                              "delegator_address": {
                                "type": "string",
                                "description": "delegator_address is the encoded address of the delegator."
                              },
                              "validator_address": {
                                "type": "string",
                                "description": "validator_address is the encoded address of the validator."
                              },
                              "shares": {
                                "type": "string",
                                "description": "shares define the delegation shares received."
                              }
                            },
                            "description": "Delegation represents the bond with tokens held by an account. It is\nowned by one delegator, and is associated with the voting power of one\nvalidator."
                          },
                          "balance": {
                            "type": "object",
                            "properties": {
                              "denom": {
                                "type": "string"
                              },
                              "amount": {
                                "type": "string"
                              }
                            },
                            "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                          }
                        },
                        "description": "DelegationResponse is equivalent to Delegation except that it contains a\nbalance in addition to shares which is more suitable for client responses."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}": {
      "get": {
        "tags": ["Query"],
        "summary": "Delegation queries delegate info for given validator delegator pair.",
        "operationId": "Delegation",
        "parameters": [
          {
            "name": "validator_addr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delegator_addr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "delegation_response": {
                      "type": "object",
                      "properties": {
                        "delegation": {
                          "type": "object",
                          "properties": {
                            "delegator_address": {
                              "type": "string",
                              "description": "delegator_address is the encoded address of the delegator."
                            },
                            "validator_address": {
                              "type": "string",
                              "description": "validator_address is the encoded address of the validator."
                            },
                            "shares": {
                              "type": "string",
                              "description": "shares define the delegation shares received."
                            }
                          },
                          "description": "Delegation represents the bond with tokens held by an account. It is\nowned by one delegator, and is associated with the voting power of one\nvalidator."
                        },
                        "balance": {
                          "type": "object",
                          "properties": {
                            "denom": {
                              "type": "string"
                            },
                            "amount": {
                              "type": "string"
                            }
                          },
                          "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                        }
                      },
                      "description": "DelegationResponse is equivalent to Delegation except that it contains a\nbalance in addition to shares which is more suitable for client responses."
                    }
                  },
                  "description": "QueryDelegationResponse is response type for the Query/Delegation RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation": {
      "get": {
        "tags": ["Query"],
        "summary": "UnbondingDelegation queries unbonding info for given validator delegator\npair.",
        "operationId": "UnbondingDelegation",
        "parameters": [
          {
            "name": "validator_addr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delegator_addr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unbond": {
                      "type": "object",
                      "properties": {
                        "delegator_address": {
                          "type": "string",
                          "description": "delegator_address is the encoded address of the delegator."
                        },
                        "validator_address": {
                          "type": "string",
                          "description": "validator_address is the encoded address of the validator."
                        },
                        "entries": {
                          "type": "array",
                          "description": "entries are the unbonding delegation entries.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "creation_height": {
                                "type": "string",
                                "description": "creation_height is the height which the unbonding took place.",
                                "format": "int64"
                              },
                              "completion_time": {
                                "type": "string",
                                "description": "completion_time is the unix time for unbonding completion.",
                                "format": "date-time"
                              },
                              "initial_balance": {
                                "type": "string",
                                "description": "initial_balance defines the tokens initially scheduled to receive at completion."
                              },
                              "balance": {
                                "type": "string",
                                "description": "balance defines the tokens to receive at completion."
                              },
                              "unbonding_id": {
                                "title": "Incrementing id that uniquely identifies this entry",
                                "type": "string",
                                "format": "uint64"
                              },
                              "unbonding_on_hold_ref_count": {
                                "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
                                "type": "string",
                                "format": "int64"
                              }
                            },
                            "description": "UnbondingDelegationEntry defines an unbonding object with relevant metadata."
                          }
                        }
                      },
                      "description": "UnbondingDelegation stores all of a single delegator's unbonding bonds\nfor a single validator in an time-ordered list."
                    }
                  },
                  "description": "QueryDelegationResponse is response type for the Query/UnbondingDelegation\nRPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations": {
      "get": {
        "tags": ["Query"],
        "summary": "ValidatorUnbondingDelegations queries unbonding delegations of a validator.",
        "description": "When called from another module, this query might consume a high amount of\ngas if the pagination field is incorrectly set.",
        "operationId": "ValidatorUnbondingDelegations",
        "parameters": [
          {
            "name": "validator_addr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unbonding_responses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "delegator_address": {
                            "type": "string",
                            "description": "delegator_address is the encoded address of the delegator."
                          },
                          "validator_address": {
                            "type": "string",
                            "description": "validator_address is the encoded address of the validator."
                          },
                          "entries": {
                            "type": "array",
                            "description": "entries are the unbonding delegation entries.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "creation_height": {
                                  "type": "string",
                                  "description": "creation_height is the height which the unbonding took place.",
                                  "format": "int64"
                                },
                                "completion_time": {
                                  "type": "string",
                                  "description": "completion_time is the unix time for unbonding completion.",
                                  "format": "date-time"
                                },
                                "initial_balance": {
                                  "type": "string",
                                  "description": "initial_balance defines the tokens initially scheduled to receive at completion."
                                },
                                "balance": {
                                  "type": "string",
                                  "description": "balance defines the tokens to receive at completion."
                                },
                                "unbonding_id": {
                                  "title": "Incrementing id that uniquely identifies this entry",
                                  "type": "string",
                                  "format": "uint64"
                                },
                                "unbonding_on_hold_ref_count": {
                                  "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
                                  "type": "string",
                                  "format": "int64"
                                }
                              },
                              "description": "UnbondingDelegationEntry defines an unbonding object with relevant metadata."
                            }
                          }
                        },
                        "description": "UnbondingDelegation stores all of a single delegator's unbonding bonds\nfor a single validator in an time-ordered list."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryValidatorUnbondingDelegationsResponse is response type for the\nQuery/ValidatorUnbondingDelegations RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/tx/v1beta1/decode": {
      "post": {
        "tags": ["Service"],
        "summary": "TxDecode decodes the transaction.",
        "description": "Since: cosmos-sdk 0.47",
        "operationId": "TxDecode",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "tx_bytes": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "tx_bytes is the raw transaction.",
                    "format": "byte"
                  }
                },
                "description": "TxDecodeRequest is the request type for the Service.TxDecode\nRPC method.\n\nSince: cosmos-sdk 0.47"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.tx.v1beta1.TxDecodeResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cosmos/tx/v1beta1/decode/amino": {
      "post": {
        "tags": ["Service"],
        "summary": "TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.",
        "description": "Since: cosmos-sdk 0.47",
        "operationId": "TxDecodeAmino",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "amino_binary": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  }
                },
                "description": "TxDecodeAminoRequest is the request type for the Service.TxDecodeAmino\nRPC method.\n\nSince: cosmos-sdk 0.47"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "amino_json": {
                      "type": "string"
                    }
                  },
                  "description": "TxDecodeAminoResponse is the response type for the Service.TxDecodeAmino\nRPC method.\n\nSince: cosmos-sdk 0.47"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cosmos/tx/v1beta1/encode": {
      "post": {
        "tags": ["Service"],
        "summary": "TxEncode encodes the transaction.",
        "description": "Since: cosmos-sdk 0.47",
        "operationId": "TxEncode",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/cosmos.tx.v1beta1.TxEncodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tx_bytes": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "tx_bytes is the encoded transaction bytes.",
                      "format": "byte"
                    }
                  },
                  "description": "TxEncodeResponse is the response type for the\nService.TxEncode method.\n\nSince: cosmos-sdk 0.47"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cosmos/tx/v1beta1/encode/amino": {
      "post": {
        "tags": ["Service"],
        "summary": "TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.",
        "description": "Since: cosmos-sdk 0.47",
        "operationId": "TxEncodeAmino",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "amino_json": {
                    "type": "string"
                  }
                },
                "description": "TxEncodeAminoRequest is the request type for the Service.TxEncodeAmino\nRPC method.\n\nSince: cosmos-sdk 0.47"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "amino_binary": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    }
                  },
                  "description": "TxEncodeAminoResponse is the response type for the Service.TxEncodeAmino\nRPC method.\n\nSince: cosmos-sdk 0.47"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cosmos/tx/v1beta1/simulate": {
      "post": {
        "tags": ["Service"],
        "summary": "Simulate simulates executing a transaction for estimating gas usage.",
        "operationId": "Simulate",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/cosmos.tx.v1beta1.SimulateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "gas_info": {
                      "type": "object",
                      "properties": {
                        "gas_wanted": {
                          "type": "string",
                          "description": "GasWanted is the maximum units of work we allow this tx to perform.",
                          "format": "uint64"
                        },
                        "gas_used": {
                          "type": "string",
                          "description": "GasUsed is the amount of gas actually consumed.",
                          "format": "uint64"
                        }
                      },
                      "description": "gas_info is the information about gas used in the simulation."
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "Data is any data returned from message or handler execution. It MUST be\nlength prefixed in order to separate data from multiple message executions.\nDeprecated. This field is still populated, but prefer msg_response instead\nbecause it also contains the Msg response typeURL.",
                          "format": "byte"
                        },
                        "log": {
                          "type": "string",
                          "description": "Log contains the log information from message or handler execution."
                        },
                        "events": {
                          "type": "array",
                          "description": "Events contains a slice of Event objects that were emitted during message\nor handler execution.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "attributes": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "boolean"
                                    }
                                  },
                                  "description": "EventAttribute is a single key-value pair, associated with an event."
                                }
                              }
                            },
                            "description": "Event allows application developers to attach additional information to\nResponseFinalizeBlock and ResponseCheckTx.\nLater, transactions may be queried using these events."
                          }
                        },
                        "msg_responses": {
                          "type": "array",
                          "description": "msg_responses contains the Msg handler responses type packed in Anys.\n\nSince: cosmos-sdk 0.46",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                          }
                        }
                      },
                      "description": "result is the result of the simulation."
                    }
                  },
                  "description": "SimulateResponse is the response type for the\nService.SimulateRPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cosmos/tx/v1beta1/txs": {
      "get": {
        "tags": ["Service"],
        "summary": "GetTxsEvent fetches txs by event.",
        "operationId": "GetTxsEvent",
        "parameters": [
          {
            "name": "events",
            "in": "query",
            "description": "events is the list of transaction event type.\nDeprecated post v0.47.x: use query instead, which should contain a valid\nevents query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": " - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults\nto ASC in this case.\n - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order\n - ORDER_BY_DESC: ORDER_BY_DESC defines descending order",
            "schema": {
              "type": "string",
              "default": "ORDER_BY_UNSPECIFIED",
              "enum": [
                "ORDER_BY_UNSPECIFIED",
                "ORDER_BY_ASC",
                "ORDER_BY_DESC"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page is the page number to query, starts at 1. If not provided, will\ndefault to first page.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "query defines the transaction event query that is proxied to Tendermint's\nTxSearch RPC method. The query must be valid.\n\nSince cosmos-sdk 0.50",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.tx.v1beta1.GetTxsEventResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Service"],
        "summary": "BroadcastTx broadcast transaction.",
        "operationId": "BroadcastTx",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "tx_bytes": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "tx_bytes is the raw transaction.",
                    "format": "byte"
                  },
                  "mode": {
                    "type": "string",
                    "description": "BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC\nmethod.\n\n - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering\n - BROADCAST_MODE_BLOCK: DEPRECATED: use BROADCAST_MODE_SYNC instead,\nBROADCAST_MODE_BLOCK is not supported by the SDK from v0.47.x onwards.\n - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits\nfor a CheckTx execution response only.\n - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client\nreturns immediately.",
                    "default": "BROADCAST_MODE_UNSPECIFIED",
                    "enum": [
                      "BROADCAST_MODE_UNSPECIFIED",
                      "BROADCAST_MODE_BLOCK",
                      "BROADCAST_MODE_SYNC",
                      "BROADCAST_MODE_ASYNC"
                    ]
                  }
                },
                "description": "BroadcastTxRequest is the request type for the Service.BroadcastTxRequest\nRPC method."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tx_response": {
                      "type": "object",
                      "properties": {
                        "height": {
                          "title": "The block height",
                          "type": "string",
                          "format": "int64"
                        },
                        "txhash": {
                          "type": "string",
                          "description": "The transaction hash."
                        },
                        "codespace": {
                          "title": "Namespace for the Code",
                          "type": "string"
                        },
                        "code": {
                          "type": "integer",
                          "description": "Response code.",
                          "format": "int64"
                        },
                        "data": {
                          "type": "string",
                          "description": "Result bytes, if any."
                        },
                        "raw_log": {
                          "type": "string",
                          "description": "The output of the application's logger (raw string). May be\nnon-deterministic."
                        },
                        "logs": {
                          "type": "array",
                          "description": "The output of the application's logger (typed). May be non-deterministic.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "msg_index": {
                                "type": "integer",
                                "format": "int64"
                              },
                              "log": {
                                "type": "string"
                              },
                              "events": {
                                "type": "array",
                                "description": "Events contains a slice of Event objects that were emitted during some\nexecution.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "attributes": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "key": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          }
                                        },
                                        "description": "Attribute defines an attribute wrapper where the key and value are\nstrings instead of raw bytes."
                                      }
                                    }
                                  },
                                  "description": "StringEvent defines en Event object wrapper where all the attributes\ncontain key/value pairs that are strings instead of raw bytes."
                                }
                              }
                            },
                            "description": "ABCIMessageLog defines a structure containing an indexed tx ABCI message log."
                          }
                        },
                        "info": {
                          "type": "string",
                          "description": "Additional information. May be non-deterministic."
                        },
                        "gas_wanted": {
                          "type": "string",
                          "description": "Amount of gas requested for transaction.",
                          "format": "int64"
                        },
                        "gas_used": {
                          "type": "string",
                          "description": "Amount of gas consumed by transaction.",
                          "format": "int64"
                        },
                        "tx": {
                          "type": "object",
                          "properties": {
                            "type_url": {
                              "type": "string",
                              "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                            },
                            "value": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Must be a valid serialized protocol buffer of the above specified type.",
                              "format": "byte"
                            }
                          },
                          "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                        },
                        "timestamp": {
                          "type": "string",
                          "description": "Time of the previous block. For heights > 1, it's the weighted median of\nthe timestamps of the valid votes in the block.LastCommit. For height == 1,\nit's genesis time."
                        },
                        "events": {
                          "type": "array",
                          "description": "Events defines all the events emitted by processing a transaction. Note,\nthese events include those emitted by processing all the messages and those\nemitted from the ante. Whereas Logs contains the events, with\nadditional metadata, emitted only by processing the messages.\n\nSince: cosmos-sdk 0.42.11, 0.44.5, 0.45",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "attributes": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "boolean"
                                    }
                                  },
                                  "description": "EventAttribute is a single key-value pair, associated with an event."
                                }
                              }
                            },
                            "description": "Event allows application developers to attach additional information to\nResponseFinalizeBlock and ResponseCheckTx.\nLater, transactions may be queried using these events."
                          }
                        }
                      },
                      "description": "TxResponse defines a structure containing relevant tx data and metadata. The\ntags are stringified and the log is JSON decoded."
                    }
                  },
                  "description": "BroadcastTxResponse is the response type for the\nService.BroadcastTx method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cosmos/tx/v1beta1/txs/block/{height}": {
      "get": {
        "tags": ["Service"],
        "summary": "GetBlockWithTxs fetches a block with decoded txs.",
        "description": "Since: cosmos-sdk 0.45.2",
        "operationId": "GetBlockWithTxs",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "height is the height of the block to query.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.tx.v1beta1.GetBlockWithTxsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/tx/v1beta1/txs/{hash}": {
      "get": {
        "tags": ["Service"],
        "summary": "GetTx fetches a tx by hash.",
        "operationId": "GetTx",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "hash is the tx hash to query, encoded as a hex string.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.tx.v1beta1.GetTxResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/upgrade/v1beta1/applied_plan/{name}": {
      "get": {
        "tags": ["Query"],
        "summary": "AppliedPlan queries a previously applied upgrade plan by its name.",
        "operationId": "AppliedPlan",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name is the name of the applied plan to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "height": {
                      "type": "string",
                      "description": "height is the block height at which the plan was applied.",
                      "format": "int64"
                    }
                  },
                  "description": "QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC\nmethod."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/upgrade/v1beta1/authority": {
      "get": {
        "tags": ["Query"],
        "summary": "Returns the account with authority to conduct upgrades",
        "description": "Since: cosmos-sdk 0.46",
        "operationId": "Authority",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QueryAuthorityResponse is the response type for Query/Authority",
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string"
                    }
                  },
                  "description": "Since: cosmos-sdk 0.46"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/upgrade/v1beta1/current_plan": {
      "get": {
        "tags": ["Query"],
        "summary": "CurrentPlan queries the current upgrade plan.",
        "operationId": "CurrentPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plan": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Sets the name for the upgrade. This name will be used by the upgraded\nversion of the software to apply any special \"on-upgrade\" commands during\nthe first BeginBlock method after the upgrade is applied. It is also used\nto detect whether a software version can handle a given upgrade. If no\nupgrade handler with this name has been set in the software, it will be\nassumed that the software is out-of-date when the upgrade Time or Height is\nreached and the software will exit."
                        },
                        "time": {
                          "type": "string",
                          "description": "Deprecated: Time based upgrades have been deprecated. Time based upgrade logic\nhas been removed from the SDK.\nIf this field is not empty, an error will be thrown.",
                          "format": "date-time"
                        },
                        "height": {
                          "type": "string",
                          "description": "The height at which the upgrade must be performed.",
                          "format": "int64"
                        },
                        "info": {
                          "title": "Any application specific upgrade info to be included on-chain\nsuch as a git commit that validators could automatically upgrade to",
                          "type": "string"
                        },
                        "upgraded_client_state": {
                          "type": "object",
                          "properties": {
                            "type_url": {
                              "type": "string",
                              "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                            },
                            "value": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Must be a valid serialized protocol buffer of the above specified type.",
                              "format": "byte"
                            }
                          },
                          "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                        }
                      },
                      "description": "plan is the current upgrade plan."
                    }
                  },
                  "description": "QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC\nmethod."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/upgrade/v1beta1/module_versions": {
      "get": {
        "tags": ["Query"],
        "summary": "ModuleVersions queries the list of module versions from state.",
        "description": "Since: cosmos-sdk 0.43",
        "operationId": "ModuleVersions",
        "parameters": [
          {
            "name": "module_name",
            "in": "query",
            "description": "module_name is a field to query a specific module\nconsensus version from state. Leaving this empty will\nfetch the full list of module versions from state.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "module_versions": {
                      "type": "array",
                      "description": "module_versions is a list of module names with their consensus versions.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "title": "name of the app module",
                            "type": "string"
                          },
                          "version": {
                            "title": "consensus version of the app module",
                            "type": "string",
                            "format": "uint64"
                          }
                        },
                        "description": "ModuleVersion specifies a module and its consensus version.\n\nSince: cosmos-sdk 0.43"
                      }
                    }
                  },
                  "description": "QueryModuleVersionsResponse is the response type for the Query/ModuleVersions\nRPC method.\n\nSince: cosmos-sdk 0.43"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}": {
      "get": {
        "tags": ["Query"],
        "summary": "UpgradedConsensusState queries the consensus state that will serve\nas a trusted kernel for the next version of this chain. It will only be\nstored at the last height of this chain.\nUpgradedConsensusState RPC not supported with legacy querier\nThis rpc is deprecated now that IBC has its own replacement\n(https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)",
        "operationId": "UpgradedConsensusState",
        "parameters": [
          {
            "name": "last_height",
            "in": "path",
            "description": "last height of the current chain must be sent in request\nas this is the height under which next consensus state is stored",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "upgraded_consensus_state": {
                      "title": "Since: cosmos-sdk 0.43",
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    }
                  },
                  "description": "QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState\nRPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/authz/v1beta1/grants": {
      "get": {
        "tags": ["Query"],
        "summary": "Returns list of `Authorization`, granted to the grantee by the granter.",
        "operationId": "Grants",
        "parameters": [
          {
            "name": "granter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grantee",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msg_type_url",
            "in": "query",
            "description": "Optional, msg_type_url, when set, will query only grants matching given msg type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "grants": {
                      "type": "array",
                      "description": "authorizations is a list of grants granted for grantee by granter.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "authorization": {
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                          },
                          "expiration": {
                            "title": "time when the grant will expire and will be pruned. If null, then the grant\ndoesn't have a time expiration (other conditions  in `authorization`\nmay apply to invalidate the grant)",
                            "type": "string",
                            "format": "date-time"
                          }
                        },
                        "description": "Grant gives permissions to execute\nthe provide method with expiration time."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines an pagination for the response."
                    }
                  },
                  "description": "QueryGrantsResponse is the response type for the Query/Authorizations RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/authz/v1beta1/grants/grantee/{grantee}": {
      "get": {
        "tags": ["Query"],
        "summary": "GranteeGrants returns a list of `GrantAuthorization` by grantee.",
        "description": "Since: cosmos-sdk 0.46",
        "operationId": "GranteeGrants",
        "parameters": [
          {
            "name": "grantee",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "grants": {
                      "type": "array",
                      "description": "grants is a list of grants granted to the grantee.",
                      "items": {
                        "title": "GrantAuthorization extends a grant with both the addresses of the grantee and granter.\nIt is used in genesis.proto and query.proto",
                        "type": "object",
                        "properties": {
                          "granter": {
                            "type": "string"
                          },
                          "grantee": {
                            "type": "string"
                          },
                          "authorization": {
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                          },
                          "expiration": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines an pagination for the response."
                    }
                  },
                  "description": "QueryGranteeGrantsResponse is the response type for the Query/GranteeGrants RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/authz/v1beta1/grants/granter/{granter}": {
      "get": {
        "tags": ["Query"],
        "summary": "GranterGrants returns list of `GrantAuthorization`, granted by granter.",
        "description": "Since: cosmos-sdk 0.46",
        "operationId": "GranterGrants",
        "parameters": [
          {
            "name": "granter",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "grants": {
                      "type": "array",
                      "description": "grants is a list of grants granted by the granter.",
                      "items": {
                        "title": "GrantAuthorization extends a grant with both the addresses of the grantee and granter.\nIt is used in genesis.proto and query.proto",
                        "type": "object",
                        "properties": {
                          "granter": {
                            "type": "string"
                          },
                          "grantee": {
                            "type": "string"
                          },
                          "authorization": {
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                          },
                          "expiration": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines an pagination for the response."
                    }
                  },
                  "description": "QueryGranterGrantsResponse is the response type for the Query/GranterGrants RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}": {
      "get": {
        "tags": ["Query"],
        "summary": "Allowance returns granted allwance to the grantee by the granter.",
        "operationId": "Allowance",
        "parameters": [
          {
            "name": "granter",
            "in": "path",
            "description": "granter is the address of the user granting an allowance of their funds.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grantee",
            "in": "path",
            "description": "grantee is the address of the user being granted an allowance of another user's funds.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "allowance": {
                      "title": "Grant is stored in the KVStore to record a grant with full context",
                      "type": "object",
                      "properties": {
                        "granter": {
                          "type": "string",
                          "description": "granter is the address of the user granting an allowance of their funds."
                        },
                        "grantee": {
                          "type": "string",
                          "description": "grantee is the address of the user being granted an allowance of another user's funds."
                        },
                        "allowance": {
                          "type": "object",
                          "properties": {
                            "type_url": {
                              "type": "string",
                              "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                            },
                            "value": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Must be a valid serialized protocol buffer of the above specified type.",
                              "format": "byte"
                            }
                          },
                          "description": "allowance can be any of basic, periodic, allowed fee allowance."
                        }
                      },
                      "description": "allowance is a allowance granted for grantee by granter."
                    }
                  },
                  "description": "QueryAllowanceResponse is the response type for the Query/Allowance RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/feegrant/v1beta1/allowances/{grantee}": {
      "get": {
        "tags": ["Query"],
        "summary": "Allowances returns all the grants for the given grantee address.",
        "operationId": "Allowances",
        "parameters": [
          {
            "name": "grantee",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "allowances": {
                      "type": "array",
                      "description": "allowances are allowance's granted for grantee by granter.",
                      "items": {
                        "title": "Grant is stored in the KVStore to record a grant with full context",
                        "type": "object",
                        "properties": {
                          "granter": {
                            "type": "string",
                            "description": "granter is the address of the user granting an allowance of their funds."
                          },
                          "grantee": {
                            "type": "string",
                            "description": "grantee is the address of the user being granted an allowance of another user's funds."
                          },
                          "allowance": {
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "allowance can be any of basic, periodic, allowed fee allowance."
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines an pagination for the response."
                    }
                  },
                  "description": "QueryAllowancesResponse is the response type for the Query/Allowances RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/feegrant/v1beta1/issued/{granter}": {
      "get": {
        "tags": ["Query"],
        "summary": "AllowancesByGranter returns all the grants given by an address",
        "description": "Since: cosmos-sdk 0.46",
        "operationId": "AllowancesByGranter",
        "parameters": [
          {
            "name": "granter",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "allowances": {
                      "type": "array",
                      "description": "allowances that have been issued by the granter.",
                      "items": {
                        "title": "Grant is stored in the KVStore to record a grant with full context",
                        "type": "object",
                        "properties": {
                          "granter": {
                            "type": "string",
                            "description": "granter is the address of the user granting an allowance of their funds."
                          },
                          "grantee": {
                            "type": "string",
                            "description": "grantee is the address of the user being granted an allowance of another user's funds."
                          },
                          "allowance": {
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "allowance can be any of basic, periodic, allowed fee allowance."
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines an pagination for the response."
                    }
                  },
                  "description": "QueryAllowancesByGranterResponse is the response type for the Query/AllowancesByGranter RPC method.\n\nSince: cosmos-sdk 0.46"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/balance/{owner}/{class_id}": {
      "get": {
        "tags": ["Query"],
        "summary": "Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721",
        "operationId": "NftBalance",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner is the owner address of the nft",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "class_id",
            "in": "path",
            "description": "class_id associated with the nft",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QueryBalanceResponse is the response type for the Query/Balance RPC method",
                  "type": "object",
                  "properties": {
                    "amount": {
                      "title": "amount is the number of all NFTs of a given class owned by the owner",
                      "type": "string",
                      "format": "uint64"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/classes": {
      "get": {
        "tags": ["Query"],
        "summary": "Classes queries all NFT classes",
        "operationId": "Classes",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QueryClassesResponse is the response type for the Query/Classes RPC method",
                  "type": "object",
                  "properties": {
                    "classes": {
                      "type": "array",
                      "description": "class defines the class of the nft type.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "title": "id defines the unique identifier of the NFT classification, similar to the contract address of ERC721",
                            "type": "string"
                          },
                          "name": {
                            "title": "name defines the human-readable name of the NFT classification. Optional",
                            "type": "string"
                          },
                          "symbol": {
                            "title": "symbol is an abbreviated name for nft classification. Optional",
                            "type": "string"
                          },
                          "description": {
                            "title": "description is a brief description of nft classification. Optional",
                            "type": "string"
                          },
                          "uri": {
                            "title": "uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional",
                            "type": "string"
                          },
                          "uri_hash": {
                            "title": "uri_hash is a hash of the document pointed by uri. Optional",
                            "type": "string"
                          },
                          "data": {
                            "title": "data is the app specific metadata of the NFT class. Optional",
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                          }
                        },
                        "description": "Class defines the class of the nft type."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/classes/{class_id}": {
      "get": {
        "tags": ["Query"],
        "summary": "Class queries an NFT class based on its id",
        "operationId": "Class",
        "parameters": [
          {
            "name": "class_id",
            "in": "path",
            "description": "class_id associated with the nft",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QueryClassResponse is the response type for the Query/Class RPC method",
                  "type": "object",
                  "properties": {
                    "class": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "title": "id defines the unique identifier of the NFT classification, similar to the contract address of ERC721",
                          "type": "string"
                        },
                        "name": {
                          "title": "name defines the human-readable name of the NFT classification. Optional",
                          "type": "string"
                        },
                        "symbol": {
                          "title": "symbol is an abbreviated name for nft classification. Optional",
                          "type": "string"
                        },
                        "description": {
                          "title": "description is a brief description of nft classification. Optional",
                          "type": "string"
                        },
                        "uri": {
                          "title": "uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional",
                          "type": "string"
                        },
                        "uri_hash": {
                          "title": "uri_hash is a hash of the document pointed by uri. Optional",
                          "type": "string"
                        },
                        "data": {
                          "title": "data is the app specific metadata of the NFT class. Optional",
                          "type": "object",
                          "properties": {
                            "type_url": {
                              "type": "string",
                              "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                            },
                            "value": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Must be a valid serialized protocol buffer of the above specified type.",
                              "format": "byte"
                            }
                          },
                          "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                        }
                      },
                      "description": "Class defines the class of the nft type."
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/nfts": {
      "get": {
        "tags": ["Query"],
        "summary": "NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in\nERC721Enumerable",
        "operationId": "NFTs",
        "parameters": [
          {
            "name": "class_id",
            "in": "query",
            "description": "class_id associated with the nft.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "owner",
            "in": "query",
            "description": "owner is the owner address of the nft.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QueryNFTsResponse is the response type for the Query/NFTs RPC methods",
                  "type": "object",
                  "properties": {
                    "nfts": {
                      "title": "NFT defines the NFT",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "class_id": {
                            "title": "class_id associated with the NFT, similar to the contract address of ERC721",
                            "type": "string"
                          },
                          "id": {
                            "title": "id is a unique identifier of the NFT",
                            "type": "string"
                          },
                          "uri": {
                            "title": "uri for the NFT metadata stored off chain",
                            "type": "string"
                          },
                          "uri_hash": {
                            "title": "uri_hash is a hash of the document pointed by uri",
                            "type": "string"
                          },
                          "data": {
                            "title": "data is an app specific data of the NFT. Optional",
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                          }
                        },
                        "description": "NFT defines the NFT."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/nfts/{class_id}/{id}": {
      "get": {
        "tags": ["Query"],
        "summary": "NFT queries an NFT based on its class and id.",
        "operationId": "NFT",
        "parameters": [
          {
            "name": "class_id",
            "in": "path",
            "description": "class_id associated with the nft",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id is a unique identifier of the NFT",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QueryNFTResponse is the response type for the Query/NFT RPC method",
                  "type": "object",
                  "properties": {
                    "nft": {
                      "title": "owner is the owner address of the nft",
                      "type": "object",
                      "properties": {
                        "class_id": {
                          "title": "class_id associated with the NFT, similar to the contract address of ERC721",
                          "type": "string"
                        },
                        "id": {
                          "title": "id is a unique identifier of the NFT",
                          "type": "string"
                        },
                        "uri": {
                          "title": "uri for the NFT metadata stored off chain",
                          "type": "string"
                        },
                        "uri_hash": {
                          "title": "uri_hash is a hash of the document pointed by uri",
                          "type": "string"
                        },
                        "data": {
                          "title": "data is an app specific data of the NFT. Optional",
                          "type": "object",
                          "properties": {
                            "type_url": {
                              "type": "string",
                              "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                            },
                            "value": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Must be a valid serialized protocol buffer of the above specified type.",
                              "format": "byte"
                            }
                          },
                          "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                        }
                      },
                      "description": "NFT defines the NFT."
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/owner/{class_id}/{id}": {
      "get": {
        "tags": ["Query"],
        "summary": "Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721",
        "operationId": "Owner",
        "parameters": [
          {
            "name": "class_id",
            "in": "path",
            "description": "class_id associated with the nft",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id is a unique identifier of the NFT",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QueryOwnerResponse is the response type for the Query/Owner RPC method",
                  "type": "object",
                  "properties": {
                    "owner": {
                      "title": "owner is the owner address of the nft",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/supply/{class_id}": {
      "get": {
        "tags": ["Query"],
        "summary": "Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.",
        "operationId": "Supply",
        "parameters": [
          {
            "name": "class_id",
            "in": "path",
            "description": "class_id associated with the nft",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "QuerySupplyResponse is the response type for the Query/Supply RPC method",
                  "type": "object",
                  "properties": {
                    "amount": {
                      "title": "amount is the number of all NFTs from the given class",
                      "type": "string",
                      "format": "uint64"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/group_info/{group_id}": {
      "get": {
        "tags": ["Query"],
        "summary": "GroupInfo queries group info based on group id.",
        "operationId": "GroupInfo",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "group_id is the unique ID of the group.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "info": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "id is the unique ID of the group.",
                          "format": "uint64"
                        },
                        "admin": {
                          "type": "string",
                          "description": "admin is the account address of the group's admin."
                        },
                        "metadata": {
                          "title": "metadata is any arbitrary metadata to attached to the group.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1",
                          "type": "string"
                        },
                        "version": {
                          "title": "version is used to track changes to a group's membership structure that\nwould break existing proposals. Whenever any members weight is changed,\nor any member is added or removed this version is incremented and will\ncause proposals based on older versions of this group to fail",
                          "type": "string",
                          "format": "uint64"
                        },
                        "total_weight": {
                          "type": "string",
                          "description": "total_weight is the sum of the group members' weights."
                        },
                        "created_at": {
                          "type": "string",
                          "description": "created_at is a timestamp specifying when a group was created.",
                          "format": "date-time"
                        }
                      },
                      "description": "info is the GroupInfo of the group."
                    }
                  },
                  "description": "QueryGroupInfoResponse is the Query/GroupInfo response type."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/group_members/{group_id}": {
      "get": {
        "tags": ["Query"],
        "summary": "GroupMembers queries members of a group by group id.",
        "operationId": "GroupMembers",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "group_id is the unique ID of the group.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "members": {
                      "type": "array",
                      "description": "members are the members of the group with given group_id.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "group_id": {
                            "type": "string",
                            "description": "group_id is the unique ID of the group.",
                            "format": "uint64"
                          },
                          "member": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "description": "address is the member's account address."
                              },
                              "weight": {
                                "type": "string",
                                "description": "weight is the member's voting weight that should be greater than 0."
                              },
                              "metadata": {
                                "type": "string",
                                "description": "metadata is any arbitrary metadata attached to the member."
                              },
                              "added_at": {
                                "type": "string",
                                "description": "added_at is a timestamp specifying when a member was added.",
                                "format": "date-time"
                              }
                            },
                            "description": "member is the member data."
                          }
                        },
                        "description": "GroupMember represents the relationship between a group and a member."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryGroupMembersResponse is the Query/GroupMembersResponse response type."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/group_policies_by_admin/{admin}": {
      "get": {
        "tags": ["Query"],
        "summary": "GroupPoliciesByAdmin queries group policies by admin address.",
        "operationId": "GroupPoliciesByAdmin",
        "parameters": [
          {
            "name": "admin",
            "in": "path",
            "description": "admin is the admin address of the group policy.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "group_policies": {
                      "type": "array",
                      "description": "group_policies are the group policies info with provided admin.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string",
                            "description": "address is the account address of group policy."
                          },
                          "group_id": {
                            "type": "string",
                            "description": "group_id is the unique ID of the group.",
                            "format": "uint64"
                          },
                          "admin": {
                            "type": "string",
                            "description": "admin is the account address of the group admin."
                          },
                          "metadata": {
                            "title": "metadata is any arbitrary metadata attached to the group policy.\nthe recommended format of the metadata is to be found here:\nhttps://docs.cosmos.network/v0.47/modules/group#decision-policy-1",
                            "type": "string"
                          },
                          "version": {
                            "type": "string",
                            "description": "version is used to track changes to a group's GroupPolicyInfo structure that\nwould create a different result on a running proposal.",
                            "format": "uint64"
                          },
                          "decision_policy": {
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "created_at is a timestamp specifying when a group policy was created.",
                            "format": "date-time"
                          }
                        },
                        "description": "GroupPolicyInfo represents the high-level on-chain information for a group policy."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryGroupPoliciesByAdminResponse is the Query/GroupPoliciesByAdmin response type."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/group_policies_by_group/{group_id}": {
      "get": {
        "tags": ["Query"],
        "summary": "GroupPoliciesByGroup queries group policies by group id.",
        "operationId": "GroupPoliciesByGroup",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "group_id is the unique ID of the group policy's group.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "group_policies": {
                      "type": "array",
                      "description": "group_policies are the group policies info associated with the provided group.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string",
                            "description": "address is the account address of group policy."
                          },
                          "group_id": {
                            "type": "string",
                            "description": "group_id is the unique ID of the group.",
                            "format": "uint64"
                          },
                          "admin": {
                            "type": "string",
                            "description": "admin is the account address of the group admin."
                          },
                          "metadata": {
                            "title": "metadata is any arbitrary metadata attached to the group policy.\nthe recommended format of the metadata is to be found here:\nhttps://docs.cosmos.network/v0.47/modules/group#decision-policy-1",
                            "type": "string"
                          },
                          "version": {
                            "type": "string",
                            "description": "version is used to track changes to a group's GroupPolicyInfo structure that\nwould create a different result on a running proposal.",
                            "format": "uint64"
                          },
                          "decision_policy": {
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "created_at is a timestamp specifying when a group policy was created.",
                            "format": "date-time"
                          }
                        },
                        "description": "GroupPolicyInfo represents the high-level on-chain information for a group policy."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryGroupPoliciesByGroupResponse is the Query/GroupPoliciesByGroup response type."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/group_policy_info/{address}": {
      "get": {
        "tags": ["Query"],
        "summary": "GroupPolicyInfo queries group policy info based on account address of group policy.",
        "operationId": "GroupPolicyInfo",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the account address of the group policy.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "info": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "type": "string",
                          "description": "address is the account address of group policy."
                        },
                        "group_id": {
                          "type": "string",
                          "description": "group_id is the unique ID of the group.",
                          "format": "uint64"
                        },
                        "admin": {
                          "type": "string",
                          "description": "admin is the account address of the group admin."
                        },
                        "metadata": {
                          "title": "metadata is any arbitrary metadata attached to the group policy.\nthe recommended format of the metadata is to be found here:\nhttps://docs.cosmos.network/v0.47/modules/group#decision-policy-1",
                          "type": "string"
                        },
                        "version": {
                          "type": "string",
                          "description": "version is used to track changes to a group's GroupPolicyInfo structure that\nwould create a different result on a running proposal.",
                          "format": "uint64"
                        },
                        "decision_policy": {
                          "type": "object",
                          "properties": {
                            "type_url": {
                              "type": "string",
                              "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                            },
                            "value": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Must be a valid serialized protocol buffer of the above specified type.",
                              "format": "byte"
                            }
                          },
                          "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "created_at is a timestamp specifying when a group policy was created.",
                          "format": "date-time"
                        }
                      },
                      "description": "GroupPolicyInfo represents the high-level on-chain information for a group policy."
                    }
                  },
                  "description": "QueryGroupPolicyInfoResponse is the Query/GroupPolicyInfo response type."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/groups": {
      "get": {
        "tags": ["Query"],
        "summary": "Groups queries all groups in state.",
        "description": "Since: cosmos-sdk 0.47.1",
        "operationId": "Groups",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "groups": {
                      "type": "array",
                      "description": "`groups` is all the groups present in state.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "id is the unique ID of the group.",
                            "format": "uint64"
                          },
                          "admin": {
                            "type": "string",
                            "description": "admin is the account address of the group's admin."
                          },
                          "metadata": {
                            "title": "metadata is any arbitrary metadata to attached to the group.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1",
                            "type": "string"
                          },
                          "version": {
                            "title": "version is used to track changes to a group's membership structure that\nwould break existing proposals. Whenever any members weight is changed,\nor any member is added or removed this version is incremented and will\ncause proposals based on older versions of this group to fail",
                            "type": "string",
                            "format": "uint64"
                          },
                          "total_weight": {
                            "type": "string",
                            "description": "total_weight is the sum of the group members' weights."
                          },
                          "created_at": {
                            "type": "string",
                            "description": "created_at is a timestamp specifying when a group was created.",
                            "format": "date-time"
                          }
                        },
                        "description": "GroupInfo represents the high-level on-chain information for a group."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryGroupsResponse is the Query/Groups response type.\n\nSince: cosmos-sdk 0.47.1"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/groups_by_admin/{admin}": {
      "get": {
        "tags": ["Query"],
        "summary": "GroupsByAdmin queries groups by admin address.",
        "operationId": "GroupsByAdmin",
        "parameters": [
          {
            "name": "admin",
            "in": "path",
            "description": "admin is the account address of a group's admin.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "groups": {
                      "type": "array",
                      "description": "groups are the groups info with the provided admin.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "id is the unique ID of the group.",
                            "format": "uint64"
                          },
                          "admin": {
                            "type": "string",
                            "description": "admin is the account address of the group's admin."
                          },
                          "metadata": {
                            "title": "metadata is any arbitrary metadata to attached to the group.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1",
                            "type": "string"
                          },
                          "version": {
                            "title": "version is used to track changes to a group's membership structure that\nwould break existing proposals. Whenever any members weight is changed,\nor any member is added or removed this version is incremented and will\ncause proposals based on older versions of this group to fail",
                            "type": "string",
                            "format": "uint64"
                          },
                          "total_weight": {
                            "type": "string",
                            "description": "total_weight is the sum of the group members' weights."
                          },
                          "created_at": {
                            "type": "string",
                            "description": "created_at is a timestamp specifying when a group was created.",
                            "format": "date-time"
                          }
                        },
                        "description": "GroupInfo represents the high-level on-chain information for a group."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryGroupsByAdminResponse is the Query/GroupsByAdminResponse response type."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/groups_by_member/{address}": {
      "get": {
        "tags": ["Query"],
        "summary": "GroupsByMember queries groups by member address.",
        "operationId": "GroupsByMember",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the group member address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "groups": {
                      "type": "array",
                      "description": "groups are the groups info with the provided group member.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "id is the unique ID of the group.",
                            "format": "uint64"
                          },
                          "admin": {
                            "type": "string",
                            "description": "admin is the account address of the group's admin."
                          },
                          "metadata": {
                            "title": "metadata is any arbitrary metadata to attached to the group.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1",
                            "type": "string"
                          },
                          "version": {
                            "title": "version is used to track changes to a group's membership structure that\nwould break existing proposals. Whenever any members weight is changed,\nor any member is added or removed this version is incremented and will\ncause proposals based on older versions of this group to fail",
                            "type": "string",
                            "format": "uint64"
                          },
                          "total_weight": {
                            "type": "string",
                            "description": "total_weight is the sum of the group members' weights."
                          },
                          "created_at": {
                            "type": "string",
                            "description": "created_at is a timestamp specifying when a group was created.",
                            "format": "date-time"
                          }
                        },
                        "description": "GroupInfo represents the high-level on-chain information for a group."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryGroupsByMemberResponse is the Query/GroupsByMember response type."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/proposal/{proposal_id}": {
      "get": {
        "tags": ["Query"],
        "summary": "Proposal queries a proposal based on proposal id.",
        "operationId": "GroupProposal",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id is the unique ID of a proposal.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "proposal": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "id is the unique id of the proposal.",
                          "format": "uint64"
                        },
                        "group_policy_address": {
                          "type": "string",
                          "description": "group_policy_address is the account address of group policy."
                        },
                        "metadata": {
                          "title": "metadata is any arbitrary metadata attached to the proposal.\nthe recommended format of the metadata is to be found here:\nhttps://docs.cosmos.network/v0.47/modules/group#proposal-4",
                          "type": "string"
                        },
                        "proposers": {
                          "type": "array",
                          "description": "proposers are the account addresses of the proposers.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "submit_time": {
                          "type": "string",
                          "description": "submit_time is a timestamp specifying when a proposal was submitted.",
                          "format": "date-time"
                        },
                        "group_version": {
                          "type": "string",
                          "description": "group_version tracks the version of the group at proposal submission.\nThis field is here for informational purposes only.",
                          "format": "uint64"
                        },
                        "group_policy_version": {
                          "type": "string",
                          "description": "group_policy_version tracks the version of the group policy at proposal submission.\nWhen a decision policy is changed, existing proposals from previous policy\nversions will become invalid with the `ABORTED` status.\nThis field is here for informational purposes only.",
                          "format": "uint64"
                        },
                        "status": {
                          "type": "string",
                          "description": "status represents the high level position in the life cycle of the proposal. Initial value is Submitted.",
                          "default": "PROPOSAL_STATUS_UNSPECIFIED",
                          "enum": [
                            "PROPOSAL_STATUS_UNSPECIFIED",
                            "PROPOSAL_STATUS_SUBMITTED",
                            "PROPOSAL_STATUS_ACCEPTED",
                            "PROPOSAL_STATUS_REJECTED",
                            "PROPOSAL_STATUS_ABORTED",
                            "PROPOSAL_STATUS_WITHDRAWN"
                          ]
                        },
                        "final_tally_result": {
                          "type": "object",
                          "properties": {
                            "yes_count": {
                              "type": "string",
                              "description": "yes_count is the weighted sum of yes votes."
                            },
                            "abstain_count": {
                              "type": "string",
                              "description": "abstain_count is the weighted sum of abstainers."
                            },
                            "no_count": {
                              "type": "string",
                              "description": "no_count is the weighted sum of no votes."
                            },
                            "no_with_veto_count": {
                              "type": "string",
                              "description": "no_with_veto_count is the weighted sum of veto."
                            }
                          },
                          "description": "final_tally_result contains the sums of all weighted votes for this\nproposal for each vote option. It is empty at submission, and only\npopulated after tallying, at voting period end or at proposal execution,\nwhichever happens first."
                        },
                        "voting_period_end": {
                          "type": "string",
                          "description": "voting_period_end is the timestamp before which voting must be done.\nUnless a successful MsgExec is called before (to execute a proposal whose\ntally is successful before the voting period ends), tallying will be done\nat this point, and the `final_tally_result`and `status` fields will be\naccordingly updated.",
                          "format": "date-time"
                        },
                        "executor_result": {
                          "type": "string",
                          "description": "executor_result is the final result of the proposal execution. Initial value is NotRun.",
                          "default": "PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED",
                          "enum": [
                            "PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED",
                            "PROPOSAL_EXECUTOR_RESULT_NOT_RUN",
                            "PROPOSAL_EXECUTOR_RESULT_SUCCESS",
                            "PROPOSAL_EXECUTOR_RESULT_FAILURE"
                          ]
                        },
                        "messages": {
                          "type": "array",
                          "description": "messages is a list of `sdk.Msg`s that will be executed if the proposal passes.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                              },
                              "value": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "byte"
                              }
                            },
                            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                          }
                        },
                        "title": {
                          "title": "title is the title of the proposal",
                          "type": "string",
                          "description": "Since: cosmos-sdk 0.47"
                        },
                        "summary": {
                          "title": "summary is a short summary of the proposal",
                          "type": "string",
                          "description": "Since: cosmos-sdk 0.47"
                        }
                      },
                      "description": "proposal is the proposal info."
                    }
                  },
                  "description": "QueryProposalResponse is the Query/Proposal response type."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/proposals/{proposal_id}/tally": {
      "get": {
        "tags": ["Query"],
        "summary": "TallyResult returns the tally result of a proposal. If the proposal is\nstill in voting period, then this query computes the current tally state,\nwhich might not be final. On the other hand, if the proposal is final,\nthen it simply returns the `final_tally_result` state stored in the\nproposal itself.",
        "operationId": "GroupTallyResult",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id is the unique id of a proposal.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tally": {
                      "type": "object",
                      "properties": {
                        "yes_count": {
                          "type": "string",
                          "description": "yes_count is the weighted sum of yes votes."
                        },
                        "abstain_count": {
                          "type": "string",
                          "description": "abstain_count is the weighted sum of abstainers."
                        },
                        "no_count": {
                          "type": "string",
                          "description": "no_count is the weighted sum of no votes."
                        },
                        "no_with_veto_count": {
                          "type": "string",
                          "description": "no_with_veto_count is the weighted sum of veto."
                        }
                      },
                      "description": "tally defines the requested tally."
                    }
                  },
                  "description": "QueryTallyResultResponse is the Query/TallyResult response type."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/proposals_by_group_policy/{address}": {
      "get": {
        "tags": ["Query"],
        "summary": "ProposalsByGroupPolicy queries proposals based on account address of group policy.",
        "operationId": "ProposalsByGroupPolicy",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the account address of the group policy related to proposals.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "proposals": {
                      "type": "array",
                      "description": "proposals are the proposals with given group policy.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "id is the unique id of the proposal.",
                            "format": "uint64"
                          },
                          "group_policy_address": {
                            "type": "string",
                            "description": "group_policy_address is the account address of group policy."
                          },
                          "metadata": {
                            "title": "metadata is any arbitrary metadata attached to the proposal.\nthe recommended format of the metadata is to be found here:\nhttps://docs.cosmos.network/v0.47/modules/group#proposal-4",
                            "type": "string"
                          },
                          "proposers": {
                            "type": "array",
                            "description": "proposers are the account addresses of the proposers.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "submit_time": {
                            "type": "string",
                            "description": "submit_time is a timestamp specifying when a proposal was submitted.",
                            "format": "date-time"
                          },
                          "group_version": {
                            "type": "string",
                            "description": "group_version tracks the version of the group at proposal submission.\nThis field is here for informational purposes only.",
                            "format": "uint64"
                          },
                          "group_policy_version": {
                            "type": "string",
                            "description": "group_policy_version tracks the version of the group policy at proposal submission.\nWhen a decision policy is changed, existing proposals from previous policy\nversions will become invalid with the `ABORTED` status.\nThis field is here for informational purposes only.",
                            "format": "uint64"
                          },
                          "status": {
                            "type": "string",
                            "description": "status represents the high level position in the life cycle of the proposal. Initial value is Submitted.",
                            "default": "PROPOSAL_STATUS_UNSPECIFIED",
                            "enum": [
                              "PROPOSAL_STATUS_UNSPECIFIED",
                              "PROPOSAL_STATUS_SUBMITTED",
                              "PROPOSAL_STATUS_ACCEPTED",
                              "PROPOSAL_STATUS_REJECTED",
                              "PROPOSAL_STATUS_ABORTED",
                              "PROPOSAL_STATUS_WITHDRAWN"
                            ]
                          },
                          "final_tally_result": {
                            "type": "object",
                            "properties": {
                              "yes_count": {
                                "type": "string",
                                "description": "yes_count is the weighted sum of yes votes."
                              },
                              "abstain_count": {
                                "type": "string",
                                "description": "abstain_count is the weighted sum of abstainers."
                              },
                              "no_count": {
                                "type": "string",
                                "description": "no_count is the weighted sum of no votes."
                              },
                              "no_with_veto_count": {
                                "type": "string",
                                "description": "no_with_veto_count is the weighted sum of veto."
                              }
                            },
                            "description": "final_tally_result contains the sums of all weighted votes for this\nproposal for each vote option. It is empty at submission, and only\npopulated after tallying, at voting period end or at proposal execution,\nwhichever happens first."
                          },
                          "voting_period_end": {
                            "type": "string",
                            "description": "voting_period_end is the timestamp before which voting must be done.\nUnless a successful MsgExec is called before (to execute a proposal whose\ntally is successful before the voting period ends), tallying will be done\nat this point, and the `final_tally_result`and `status` fields will be\naccordingly updated.",
                            "format": "date-time"
                          },
                          "executor_result": {
                            "type": "string",
                            "description": "executor_result is the final result of the proposal execution. Initial value is NotRun.",
                            "default": "PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED",
                            "enum": [
                              "PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED",
                              "PROPOSAL_EXECUTOR_RESULT_NOT_RUN",
                              "PROPOSAL_EXECUTOR_RESULT_SUCCESS",
                              "PROPOSAL_EXECUTOR_RESULT_FAILURE"
                            ]
                          },
                          "messages": {
                            "type": "array",
                            "description": "messages is a list of `sdk.Msg`s that will be executed if the proposal passes.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type_url": {
                                  "type": "string",
                                  "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                                },
                                "value": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                  "format": "byte"
                                }
                              },
                              "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                            }
                          },
                          "title": {
                            "title": "title is the title of the proposal",
                            "type": "string",
                            "description": "Since: cosmos-sdk 0.47"
                          },
                          "summary": {
                            "title": "summary is a short summary of the proposal",
                            "type": "string",
                            "description": "Since: cosmos-sdk 0.47"
                          }
                        },
                        "description": "Proposal defines a group proposal. Any member of a group can submit a proposal\nfor a group policy to decide upon.\nA proposal consists of a set of `sdk.Msg`s that will be executed if the proposal\npasses as well as some optional metadata associated with the proposal."
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryProposalsByGroupPolicyResponse is the Query/ProposalByGroupPolicy response type."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/vote_by_proposal_voter/{proposal_id}/{voter}": {
      "get": {
        "tags": ["Query"],
        "summary": "VoteByProposalVoter queries a vote by proposal id and voter.",
        "operationId": "VoteByProposalVoter",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id is the unique ID of a proposal.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "voter",
            "in": "path",
            "description": "voter is a proposal voter account address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vote": {
                      "title": "Vote represents a vote for a proposal.string metadata",
                      "type": "object",
                      "properties": {
                        "proposal_id": {
                          "type": "string",
                          "description": "proposal is the unique ID of the proposal.",
                          "format": "uint64"
                        },
                        "voter": {
                          "type": "string",
                          "description": "voter is the account address of the voter."
                        },
                        "option": {
                          "type": "string",
                          "description": "option is the voter's choice on the proposal.",
                          "default": "VOTE_OPTION_UNSPECIFIED",
                          "enum": [
                            "VOTE_OPTION_UNSPECIFIED",
                            "VOTE_OPTION_YES",
                            "VOTE_OPTION_ABSTAIN",
                            "VOTE_OPTION_NO",
                            "VOTE_OPTION_NO_WITH_VETO"
                          ]
                        },
                        "metadata": {
                          "title": "metadata is any arbitrary metadata attached to the vote.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2",
                          "type": "string"
                        },
                        "submit_time": {
                          "type": "string",
                          "description": "submit_time is the timestamp when the vote was submitted.",
                          "format": "date-time"
                        }
                      },
                      "description": "vote is the vote with given proposal_id and voter."
                    }
                  },
                  "description": "QueryVoteByProposalVoterResponse is the Query/VoteByProposalVoter response type."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/votes_by_proposal/{proposal_id}": {
      "get": {
        "tags": ["Query"],
        "summary": "VotesByProposal queries a vote by proposal id.",
        "operationId": "VotesByProposal",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id is the unique ID of a proposal.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "votes": {
                      "type": "array",
                      "description": "votes are the list of votes for given proposal_id.",
                      "items": {
                        "title": "Vote represents a vote for a proposal.string metadata",
                        "type": "object",
                        "properties": {
                          "proposal_id": {
                            "type": "string",
                            "description": "proposal is the unique ID of the proposal.",
                            "format": "uint64"
                          },
                          "voter": {
                            "type": "string",
                            "description": "voter is the account address of the voter."
                          },
                          "option": {
                            "type": "string",
                            "description": "option is the voter's choice on the proposal.",
                            "default": "VOTE_OPTION_UNSPECIFIED",
                            "enum": [
                              "VOTE_OPTION_UNSPECIFIED",
                              "VOTE_OPTION_YES",
                              "VOTE_OPTION_ABSTAIN",
                              "VOTE_OPTION_NO",
                              "VOTE_OPTION_NO_WITH_VETO"
                            ]
                          },
                          "metadata": {
                            "title": "metadata is any arbitrary metadata attached to the vote.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2",
                            "type": "string"
                          },
                          "submit_time": {
                            "type": "string",
                            "description": "submit_time is the timestamp when the vote was submitted.",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryVotesByProposalResponse is the Query/VotesByProposal response type."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/votes_by_voter/{voter}": {
      "get": {
        "tags": ["Query"],
        "summary": "VotesByVoter queries a vote by voter.",
        "operationId": "VotesByVoter",
        "parameters": [
          {
            "name": "voter",
            "in": "path",
            "description": "voter is a proposal voter account address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "votes": {
                      "type": "array",
                      "description": "votes are the list of votes by given voter.",
                      "items": {
                        "title": "Vote represents a vote for a proposal.string metadata",
                        "type": "object",
                        "properties": {
                          "proposal_id": {
                            "type": "string",
                            "description": "proposal is the unique ID of the proposal.",
                            "format": "uint64"
                          },
                          "voter": {
                            "type": "string",
                            "description": "voter is the account address of the voter."
                          },
                          "option": {
                            "type": "string",
                            "description": "option is the voter's choice on the proposal.",
                            "default": "VOTE_OPTION_UNSPECIFIED",
                            "enum": [
                              "VOTE_OPTION_UNSPECIFIED",
                              "VOTE_OPTION_YES",
                              "VOTE_OPTION_ABSTAIN",
                              "VOTE_OPTION_NO",
                              "VOTE_OPTION_NO_WITH_VETO"
                            ]
                          },
                          "metadata": {
                            "title": "metadata is any arbitrary metadata attached to the vote.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2",
                            "type": "string"
                          },
                          "submit_time": {
                            "type": "string",
                            "description": "submit_time is the timestamp when the vote was submitted.",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "QueryVotesByVoterResponse is the Query/VotesByVoter response type."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "byte"
                          }
                        },
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/circuit/v1/accounts": {
      "get": {
        "tags": ["Query"],
        "summary": "Account returns account permissions.",
        "operationId": "CircuitAccounts",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "string",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accounts": {
                      "type": "array",
                      "items": {
                        "title": "GenesisAccountPermissions is the account permissions for the circuit breaker in genesis",
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string"
                          },
                          "permissions": {
                            "type": "object",
                            "properties": {
                              "level": {
                                "type": "string",
                                "description": "level is the level of permissions granted to this account.",
                                "default": "LEVEL_NONE_UNSPECIFIED",
                                "enum": [
                                  "LEVEL_NONE_UNSPECIFIED",
                                  "LEVEL_SOME_MSGS",
                                  "LEVEL_ALL_MSGS",
                                  "LEVEL_SUPER_ADMIN"
                                ]
                              },
                              "limit_type_urls": {
                                "type": "array",
                                "description": "limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type\nURLs that the account can trip. It is an error to use limit_type_urls with\na level other than LEVEL_SOME_MSGS.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "description": "Permissions are the permissions that an account has to trip\nor reset the circuit breaker."
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_key": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                          "format": "byte"
                        },
                        "total": {
                          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                          "type": "string",
                          "format": "uint64"
                        }
                      },
                      "description": "pagination defines the pagination in the response."
                    }
                  },
                  "description": "AccountsResponse is the response type for the Query/Accounts RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/circuit/v1/accounts/{address}": {
      "get": {
        "tags": ["Query"],
        "summary": "Account returns account permissions.",
        "operationId": "CircuitAccount",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "permission": {
                      "type": "object",
                      "properties": {
                        "level": {
                          "type": "string",
                          "description": "level is the level of permissions granted to this account.",
                          "default": "LEVEL_NONE_UNSPECIFIED",
                          "enum": [
                            "LEVEL_NONE_UNSPECIFIED",
                            "LEVEL_SOME_MSGS",
                            "LEVEL_ALL_MSGS",
                            "LEVEL_SUPER_ADMIN"
                          ]
                        },
                        "limit_type_urls": {
                          "type": "array",
                          "description": "limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type\nURLs that the account can trip. It is an error to use limit_type_urls with\na level other than LEVEL_SOME_MSGS.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Permissions are the permissions that an account has to trip\nor reset the circuit breaker."
                    }
                  },
                  "description": "AccountResponse is the response type for the Query/Account RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/circuit/v1/disable_list": {
      "get": {
        "tags": ["Query"],
        "summary": "DisabledList returns a list of disabled message urls",
        "operationId": "DisabledList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "disabled_list": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "DisabledListResponse is the response type for the Query/DisabledList RPC method."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/consensus/v1/params": {
      "get": {
        "tags": ["Query"],
        "summary": "Params queries the parameters of x/consensus module.",
        "operationId": "ConsensusParams",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "params": {
                      "type": "object",
                      "properties": {
                        "block": {
                          "type": "object",
                          "properties": {
                            "max_bytes": {
                              "title": "Max block size, in bytes.\nNote: must be greater than 0",
                              "type": "string",
                              "format": "int64"
                            },
                            "max_gas": {
                              "title": "Max gas per block.\nNote: must be greater or equal to -1",
                              "type": "string",
                              "format": "int64"
                            }
                          },
                          "description": "BlockParams contains limits on the block size."
                        },
                        "evidence": {
                          "type": "object",
                          "properties": {
                            "max_age_num_blocks": {
                              "type": "string",
                              "description": "Max age of evidence, in blocks.\n\nThe basic formula for calculating this is: MaxAgeDuration / {average block\ntime}.",
                              "format": "int64"
                            },
                            "max_age_duration": {
                              "type": "string",
                              "description": "Max age of evidence, in time.\n\nIt should correspond with an app's \"unbonding period\" or other similar\nmechanism for handling [Nothing-At-Stake\nattacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed)."
                            },
                            "max_bytes": {
                              "title": "This sets the maximum size of total evidence in bytes that can be committed in a single block.\nand should fall comfortably under the max block bytes.\nDefault is 1048576 or 1MB",
                              "type": "string",
                              "format": "int64"
                            }
                          },
                          "description": "EvidenceParams determine how we handle evidence of malfeasance."
                        },
                        "validator": {
                          "type": "object",
                          "properties": {
                            "pub_key_types": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "ValidatorParams restrict the public key types validators can use.\nNOTE: uses ABCI pubkey naming, not Amino names."
                        },
                        "version": {
                          "type": "object",
                          "properties": {
                            "app": {
                              "type": "string",
                              "format": "uint64"
                            }
                          },
                          "description": "VersionParams contains the ABCI application version."
                        },
                        "abci": {
                          "type": "object",
                          "properties": {
                            "vote_extensions_enable_height": {
                              "type": "string",
                              "description": "vote_extensions_enable_height configures the first height during which\nvote extensions will be enabled. During this specified height, and for all\nsubsequent heights, precommit messages that do not contain valid extension data\nwill be considered invalid. Prior to this height, vote extensions will not\nbe used or accepted by validators on the network.\n\nOnce enabled, vote extensions will be created by the application in ExtendVote,\npassed to the application for validation in VerifyVoteExtension and given\nto the application to use when proposing a block during PrepareProposal.",
                              "format": "int64"
                            }
                          },
                          "description": "ABCIParams configure functionality specific to the Application Blockchain Interface."
                        }
                      },
                      "description": "params are the tendermint consensus params stored in the consensus module.\nPlease note that `params.version` is not populated in this response, it is\ntracked separately in the x/upgrade module."
                    }
                  },
                  "description": "QueryParamsResponse defines the response type for querying x/consensus parameters."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type_url": {
                            "type": "string"
                          },
                          "value": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "cosmos.auth.v1beta1.AddressBytesToStringResponse": {
        "type": "object",
        "properties": {
          "address_string": {
            "type": "string"
          }
        },
        "description": "AddressBytesToStringResponse is the response type for AddressString rpc method.\n\nSince: cosmos-sdk 0.46"
      },
      "cosmos.auth.v1beta1.AddressStringToBytesResponse": {
        "type": "object",
        "properties": {
          "address_bytes": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          }
        },
        "description": "AddressStringToBytesResponse is the response type for AddressBytes rpc method.\n\nSince: cosmos-sdk 0.46"
      },
      "cosmos.auth.v1beta1.BaseAccount": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "pub_key": {
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
          },
          "account_number": {
            "type": "string",
            "format": "uint64"
          },
          "sequence": {
            "type": "string",
            "format": "uint64"
          }
        },
        "description": "BaseAccount defines a base account type. It contains all the necessary fields\nfor basic account functionality. Any custom account type should extend this\ntype for additional functionality (e.g. vesting)."
      },
      "cosmos.auth.v1beta1.Bech32PrefixResponse": {
        "type": "object",
        "properties": {
          "bech32_prefix": {
            "type": "string"
          }
        },
        "description": "Bech32PrefixResponse is the response type for Bech32Prefix rpc method.\n\nSince: cosmos-sdk 0.46"
      },
      "cosmos.auth.v1beta1.Params": {
        "type": "object",
        "properties": {
          "max_memo_characters": {
            "type": "string",
            "format": "uint64"
          },
          "tx_sig_limit": {
            "type": "string",
            "format": "uint64"
          },
          "tx_size_cost_per_byte": {
            "type": "string",
            "format": "uint64"
          },
          "sig_verify_cost_ed25519": {
            "type": "string",
            "format": "uint64"
          },
          "sig_verify_cost_secp256k1": {
            "type": "string",
            "format": "uint64"
          }
        },
        "description": "Params defines the parameters for the auth module."
      },
      "cosmos.auth.v1beta1.QueryAccountAddressByIDResponse": {
        "title": "QueryAccountAddressByIDResponse is the response type for AccountAddressByID rpc method",
        "type": "object",
        "properties": {
          "account_address": {
            "type": "string"
          }
        },
        "description": "Since: cosmos-sdk 0.46.2"
      },
      "cosmos.auth.v1beta1.QueryAccountInfoResponse": {
        "type": "object",
        "properties": {
          "info": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "pub_key": {
                "type": "object",
                "properties": {
                  "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                  },
                  "value": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                  }
                },
                "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
              },
              "account_number": {
                "type": "string",
                "format": "uint64"
              },
              "sequence": {
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "info is the account info which is represented by BaseAccount."
          }
        },
        "description": "QueryAccountInfoResponse is the Query/AccountInfo response type.\n\nSince: cosmos-sdk 0.47"
      },
      "cosmos.auth.v1beta1.QueryAccountResponse": {
        "type": "object",
        "properties": {
          "account": {
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
          }
        },
        "description": "QueryAccountResponse is the response type for the Query/Account RPC method."
      },
      "cosmos.auth.v1beta1.QueryAccountsResponse": {
        "type": "object",
        "properties": {
          "accounts": {
            "title": "accounts are the existing accounts",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "byte"
                }
              },
              "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryAccountsResponse is the response type for the Query/Accounts RPC method.\n\nSince: cosmos-sdk 0.43"
      },
      "cosmos.auth.v1beta1.QueryModuleAccountByNameResponse": {
        "type": "object",
        "properties": {
          "account": {
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
          }
        },
        "description": "QueryModuleAccountByNameResponse is the response type for the Query/ModuleAccountByName RPC method."
      },
      "cosmos.auth.v1beta1.QueryModuleAccountsResponse": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "byte"
                }
              },
              "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
            }
          }
        },
        "description": "QueryModuleAccountsResponse is the response type for the Query/ModuleAccounts RPC method.\n\nSince: cosmos-sdk 0.46"
      },
      "cosmos.auth.v1beta1.QueryParamsResponse": {
        "type": "object",
        "properties": {
          "params": {
            "type": "object",
            "properties": {
              "max_memo_characters": {
                "type": "string",
                "format": "uint64"
              },
              "tx_sig_limit": {
                "type": "string",
                "format": "uint64"
              },
              "tx_size_cost_per_byte": {
                "type": "string",
                "format": "uint64"
              },
              "sig_verify_cost_ed25519": {
                "type": "string",
                "format": "uint64"
              },
              "sig_verify_cost_secp256k1": {
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "params defines the parameters of the module."
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "cosmos.base.query.v1beta1.PageRequest": {
        "title": "PageRequest is to be embedded in gRPC request messages for efficient\npagination. Ex:",
        "type": "object",
        "properties": {
          "key": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "format": "byte"
          },
          "offset": {
            "type": "string",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "format": "uint64"
          },
          "limit": {
            "type": "string",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "format": "uint64"
          },
          "count_total": {
            "type": "boolean",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set."
          },
          "reverse": {
            "type": "boolean",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43"
          }
        },
        "description": "message SomeRequest {\n         Foo some_parameter = 1;\n         PageRequest pagination = 2;\n }"
      },
      "cosmos.base.query.v1beta1.PageResponse": {
        "type": "object",
        "properties": {
          "next_key": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
            "format": "byte"
          },
          "total": {
            "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
            "type": "string",
            "format": "uint64"
          }
        },
        "description": "PageResponse is to be embedded in gRPC response messages where the\ncorresponding request message has used PageRequest.\n\n message SomeResponse {\n         repeated Bar results = 1;\n         PageResponse page = 2;\n }"
      },
      "google.protobuf.Any": {
        "type": "object",
        "properties": {
          "type_url": {
            "type": "string",
            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
          },
          "value": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Must be a valid serialized protocol buffer of the above specified type.",
            "format": "byte"
          }
        },
        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
      },
      "grpc.gateway.runtime.Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "byte"
                }
              },
              "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
            }
          }
        }
      },
      "cosmos.bank.v1beta1.DenomOwner": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "address defines the address that owns a particular denomination."
          },
          "balance": {
            "type": "object",
            "properties": {
              "denom": {
                "type": "string"
              },
              "amount": {
                "type": "string"
              }
            },
            "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
          }
        },
        "description": "DenomOwner defines structure representing an account that owns or holds a\nparticular denominated token. It contains the account address and account\nbalance of the denominated token.\n\nSince: cosmos-sdk 0.46"
      },
      "cosmos.bank.v1beta1.DenomUnit": {
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "denom represents the string name of the given denom unit (e.g uatom)."
          },
          "exponent": {
            "type": "integer",
            "description": "exponent represents power of 10 exponent that one must\nraise the base_denom to in order to equal the given DenomUnit's denom\n1 denom = 10^exponent base_denom\n(e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with\nexponent = 6, thus: 1 atom = 10^6 uatom).",
            "format": "int64"
          },
          "aliases": {
            "title": "aliases is a list of string aliases for the given denom",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "DenomUnit represents a struct that describes a given\ndenomination unit of the basic token."
      },
      "cosmos.bank.v1beta1.Metadata": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "denom_units": {
            "title": "denom_units represents the list of DenomUnit's for a given coin",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string",
                  "description": "denom represents the string name of the given denom unit (e.g uatom)."
                },
                "exponent": {
                  "type": "integer",
                  "description": "exponent represents power of 10 exponent that one must\nraise the base_denom to in order to equal the given DenomUnit's denom\n1 denom = 10^exponent base_denom\n(e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with\nexponent = 6, thus: 1 atom = 10^6 uatom).",
                  "format": "int64"
                },
                "aliases": {
                  "title": "aliases is a list of string aliases for the given denom",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "description": "DenomUnit represents a struct that describes a given\ndenomination unit of the basic token."
            }
          },
          "base": {
            "type": "string",
            "description": "base represents the base denom (should be the DenomUnit with exponent = 0)."
          },
          "display": {
            "type": "string",
            "description": "display indicates the suggested denom that should be\ndisplayed in clients."
          },
          "name": {
            "title": "name defines the name of the token (eg: Cosmos Atom)",
            "type": "string",
            "description": "Since: cosmos-sdk 0.43"
          },
          "symbol": {
            "type": "string",
            "description": "symbol is the token symbol usually shown on exchanges (eg: ATOM). This can\nbe the same as the display.\n\nSince: cosmos-sdk 0.43"
          },
          "uri": {
            "type": "string",
            "description": "URI to a document (on or off-chain) that contains additional information. Optional.\n\nSince: cosmos-sdk 0.46"
          },
          "uri_hash": {
            "type": "string",
            "description": "URIHash is a sha256 hash of a document pointed by URI. It's used to verify that\nthe document didn't change. Optional.\n\nSince: cosmos-sdk 0.46"
          }
        },
        "description": "Metadata represents a struct that describes\na basic token."
      },
      "cosmos.bank.v1beta1.Params": {
        "type": "object",
        "properties": {
          "send_enabled": {
            "type": "array",
            "description": "Deprecated: Use of SendEnabled in params is deprecated.\nFor genesis, use the newly added send_enabled field in the genesis object.\nStorage, lookup, and manipulation of this information is now in the keeper.\n\nAs of cosmos-sdk 0.47, this only exists for backwards compatibility of genesis files.",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean"
                }
              },
              "description": "SendEnabled maps coin denom to a send_enabled status (whether a denom is\nsendable)."
            }
          },
          "default_send_enabled": {
            "type": "boolean"
          }
        },
        "description": "Params defines the parameters for the bank module."
      },
      "cosmos.bank.v1beta1.QueryAllBalancesResponse": {
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "description": "balances is the balances of all the coins.",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryAllBalancesResponse is the response type for the Query/AllBalances RPC\nmethod."
      },
      "cosmos.bank.v1beta1.QueryBalanceResponse": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "object",
            "properties": {
              "denom": {
                "type": "string"
              },
              "amount": {
                "type": "string"
              }
            },
            "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
          }
        },
        "description": "QueryBalanceResponse is the response type for the Query/Balance RPC method."
      },
      "cosmos.bank.v1beta1.QueryDenomMetadataByQueryStringResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string"
              },
              "denom_units": {
                "title": "denom_units represents the list of DenomUnit's for a given coin",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string",
                      "description": "denom represents the string name of the given denom unit (e.g uatom)."
                    },
                    "exponent": {
                      "type": "integer",
                      "description": "exponent represents power of 10 exponent that one must\nraise the base_denom to in order to equal the given DenomUnit's denom\n1 denom = 10^exponent base_denom\n(e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with\nexponent = 6, thus: 1 atom = 10^6 uatom).",
                      "format": "int64"
                    },
                    "aliases": {
                      "title": "aliases is a list of string aliases for the given denom",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "DenomUnit represents a struct that describes a given\ndenomination unit of the basic token."
                }
              },
              "base": {
                "type": "string",
                "description": "base represents the base denom (should be the DenomUnit with exponent = 0)."
              },
              "display": {
                "type": "string",
                "description": "display indicates the suggested denom that should be\ndisplayed in clients."
              },
              "name": {
                "title": "name defines the name of the token (eg: Cosmos Atom)",
                "type": "string",
                "description": "Since: cosmos-sdk 0.43"
              },
              "symbol": {
                "type": "string",
                "description": "symbol is the token symbol usually shown on exchanges (eg: ATOM). This can\nbe the same as the display.\n\nSince: cosmos-sdk 0.43"
              },
              "uri": {
                "type": "string",
                "description": "URI to a document (on or off-chain) that contains additional information. Optional.\n\nSince: cosmos-sdk 0.46"
              },
              "uri_hash": {
                "type": "string",
                "description": "URIHash is a sha256 hash of a document pointed by URI. It's used to verify that\nthe document didn't change. Optional.\n\nSince: cosmos-sdk 0.46"
              }
            },
            "description": "Metadata represents a struct that describes\na basic token."
          }
        },
        "description": "QueryDenomMetadataByQueryStringResponse is the response type for the Query/DenomMetadata RPC\nmethod. Identical with QueryDenomMetadataResponse but receives denom as query string in request."
      },
      "cosmos.bank.v1beta1.QueryDenomMetadataResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string"
              },
              "denom_units": {
                "title": "denom_units represents the list of DenomUnit's for a given coin",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string",
                      "description": "denom represents the string name of the given denom unit (e.g uatom)."
                    },
                    "exponent": {
                      "type": "integer",
                      "description": "exponent represents power of 10 exponent that one must\nraise the base_denom to in order to equal the given DenomUnit's denom\n1 denom = 10^exponent base_denom\n(e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with\nexponent = 6, thus: 1 atom = 10^6 uatom).",
                      "format": "int64"
                    },
                    "aliases": {
                      "title": "aliases is a list of string aliases for the given denom",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "DenomUnit represents a struct that describes a given\ndenomination unit of the basic token."
                }
              },
              "base": {
                "type": "string",
                "description": "base represents the base denom (should be the DenomUnit with exponent = 0)."
              },
              "display": {
                "type": "string",
                "description": "display indicates the suggested denom that should be\ndisplayed in clients."
              },
              "name": {
                "title": "name defines the name of the token (eg: Cosmos Atom)",
                "type": "string",
                "description": "Since: cosmos-sdk 0.43"
              },
              "symbol": {
                "type": "string",
                "description": "symbol is the token symbol usually shown on exchanges (eg: ATOM). This can\nbe the same as the display.\n\nSince: cosmos-sdk 0.43"
              },
              "uri": {
                "type": "string",
                "description": "URI to a document (on or off-chain) that contains additional information. Optional.\n\nSince: cosmos-sdk 0.46"
              },
              "uri_hash": {
                "type": "string",
                "description": "URIHash is a sha256 hash of a document pointed by URI. It's used to verify that\nthe document didn't change. Optional.\n\nSince: cosmos-sdk 0.46"
              }
            },
            "description": "Metadata represents a struct that describes\na basic token."
          }
        },
        "description": "QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC\nmethod."
      },
      "cosmos.bank.v1beta1.QueryDenomOwnersResponse": {
        "type": "object",
        "properties": {
          "denom_owners": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "address defines the address that owns a particular denomination."
                },
                "balance": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                }
              },
              "description": "DenomOwner defines structure representing an account that owns or holds a\nparticular denominated token. It contains the account address and account\nbalance of the denominated token.\n\nSince: cosmos-sdk 0.46"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryDenomOwnersResponse defines the RPC response of a DenomOwners RPC query.\n\nSince: cosmos-sdk 0.46"
      },
      "cosmos.bank.v1beta1.QueryDenomsMetadataResponse": {
        "type": "object",
        "properties": {
          "metadatas": {
            "type": "array",
            "description": "metadata provides the client information for all the registered tokens.",
            "items": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string"
                },
                "denom_units": {
                  "title": "denom_units represents the list of DenomUnit's for a given coin",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "denom": {
                        "type": "string",
                        "description": "denom represents the string name of the given denom unit (e.g uatom)."
                      },
                      "exponent": {
                        "type": "integer",
                        "description": "exponent represents power of 10 exponent that one must\nraise the base_denom to in order to equal the given DenomUnit's denom\n1 denom = 10^exponent base_denom\n(e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with\nexponent = 6, thus: 1 atom = 10^6 uatom).",
                        "format": "int64"
                      },
                      "aliases": {
                        "title": "aliases is a list of string aliases for the given denom",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "description": "DenomUnit represents a struct that describes a given\ndenomination unit of the basic token."
                  }
                },
                "base": {
                  "type": "string",
                  "description": "base represents the base denom (should be the DenomUnit with exponent = 0)."
                },
                "display": {
                  "type": "string",
                  "description": "display indicates the suggested denom that should be\ndisplayed in clients."
                },
                "name": {
                  "title": "name defines the name of the token (eg: Cosmos Atom)",
                  "type": "string",
                  "description": "Since: cosmos-sdk 0.43"
                },
                "symbol": {
                  "type": "string",
                  "description": "symbol is the token symbol usually shown on exchanges (eg: ATOM). This can\nbe the same as the display.\n\nSince: cosmos-sdk 0.43"
                },
                "uri": {
                  "type": "string",
                  "description": "URI to a document (on or off-chain) that contains additional information. Optional.\n\nSince: cosmos-sdk 0.46"
                },
                "uri_hash": {
                  "type": "string",
                  "description": "URIHash is a sha256 hash of a document pointed by URI. It's used to verify that\nthe document didn't change. Optional.\n\nSince: cosmos-sdk 0.46"
                }
              },
              "description": "Metadata represents a struct that describes\na basic token."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC\nmethod."
      },
      "cosmos.bank.v1beta1.QueryParamsResponse": {
        "type": "object",
        "properties": {
          "params": {
            "type": "object",
            "properties": {
              "send_enabled": {
                "type": "array",
                "description": "Deprecated: Use of SendEnabled in params is deprecated.\nFor genesis, use the newly added send_enabled field in the genesis object.\nStorage, lookup, and manipulation of this information is now in the keeper.\n\nAs of cosmos-sdk 0.47, this only exists for backwards compatibility of genesis files.",
                "items": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string"
                    },
                    "enabled": {
                      "type": "boolean"
                    }
                  },
                  "description": "SendEnabled maps coin denom to a send_enabled status (whether a denom is\nsendable)."
                }
              },
              "default_send_enabled": {
                "type": "boolean"
              }
            },
            "description": "params provides the parameters of the bank module."
          }
        },
        "description": "QueryParamsResponse defines the response type for querying x/bank parameters."
      },
      "cosmos.bank.v1beta1.QuerySendEnabledResponse": {
        "type": "object",
        "properties": {
          "send_enabled": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean"
                }
              },
              "description": "SendEnabled maps coin denom to a send_enabled status (whether a denom is\nsendable)."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response. This field is only\npopulated if the denoms field in the request is empty."
          }
        },
        "description": "QuerySendEnabledResponse defines the RPC response of a SendEnable query.\n\nSince: cosmos-sdk 0.47"
      },
      "cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "object",
            "properties": {
              "denom": {
                "type": "string"
              },
              "amount": {
                "type": "string"
              }
            },
            "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
          }
        },
        "description": "QuerySpendableBalanceByDenomResponse defines the gRPC response structure for\nquerying an account's spendable balance for a specific denom.\n\nSince: cosmos-sdk 0.47"
      },
      "cosmos.bank.v1beta1.QuerySpendableBalancesResponse": {
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "description": "balances is the spendable balances of all the coins.",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QuerySpendableBalancesResponse defines the gRPC response structure for querying\nan account's spendable balances.\n\nSince: cosmos-sdk 0.46"
      },
      "cosmos.bank.v1beta1.QuerySupplyOfResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "object",
            "properties": {
              "denom": {
                "type": "string"
              },
              "amount": {
                "type": "string"
              }
            },
            "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
          }
        },
        "description": "QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method."
      },
      "cosmos.bank.v1beta1.QueryTotalSupplyResponse": {
        "title": "QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC\nmethod",
        "type": "object",
        "properties": {
          "supply": {
            "title": "supply is the supply of the coins",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response.\n\nSince: cosmos-sdk 0.43"
          }
        }
      },
      "cosmos.bank.v1beta1.SendEnabled": {
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "description": "SendEnabled maps coin denom to a send_enabled status (whether a denom is\nsendable)."
      },
      "cosmos.base.v1beta1.Coin": {
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        },
        "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
      },
      "cosmos.base.tendermint.v1beta1.ABCIQueryResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int64"
          },
          "log": {
            "type": "string"
          },
          "info": {
            "type": "string"
          },
          "index": {
            "type": "string",
            "format": "int64"
          },
          "key": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "value": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "proof_ops": {
            "type": "object",
            "properties": {
              "ops": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "key": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    },
                    "data": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    }
                  },
                  "description": "ProofOp defines an operation used for calculating Merkle root. The data could\nbe arbitrary format, providing necessary data for example neighbouring node\nhash.\n\nNote: This type is a duplicate of the ProofOp proto type defined in Tendermint."
                }
              }
            },
            "description": "ProofOps is Merkle proof defined by the list of ProofOps.\n\nNote: This type is a duplicate of the ProofOps proto type defined in Tendermint."
          },
          "height": {
            "type": "string",
            "format": "int64"
          },
          "codespace": {
            "type": "string"
          }
        },
        "description": "ABCIQueryResponse defines the response structure for the ABCIQuery gRPC query.\n\nNote: This type is a duplicate of the ResponseQuery proto type defined in\nTendermint."
      },
      "cosmos.base.tendermint.v1beta1.Block": {
        "type": "object",
        "properties": {
          "header": {
            "type": "object",
            "properties": {
              "version": {
                "title": "basic block info",
                "type": "object",
                "properties": {
                  "block": {
                    "type": "string",
                    "format": "uint64"
                  },
                  "app": {
                    "type": "string",
                    "format": "uint64"
                  }
                },
                "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
              },
              "chain_id": {
                "type": "string"
              },
              "height": {
                "type": "string",
                "format": "int64"
              },
              "time": {
                "type": "string",
                "format": "date-time"
              },
              "last_block_id": {
                "title": "BlockID",
                "type": "object",
                "properties": {
                  "hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "part_set_header": {
                    "title": "PartsetHeader",
                    "type": "object",
                    "properties": {
                      "total": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      }
                    }
                  }
                }
              },
              "last_commit_hash": {
                "title": "hashes of block data",
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "data_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "validators_hash": {
                "title": "hashes from the app output from the prev block",
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "next_validators_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "consensus_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "app_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "last_results_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "evidence_hash": {
                "title": "consensus info",
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "proposer_address": {
                "type": "string",
                "description": "proposer_address is the original block proposer address, formatted as a Bech32 string.\nIn Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string\nfor better UX."
              }
            },
            "description": "Header defines the structure of a Tendermint block header."
          },
          "data": {
            "title": "Data contains the set of transactions included in the block",
            "type": "object",
            "properties": {
              "txs": {
                "type": "array",
                "description": "Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs.",
                "items": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "evidence": {
            "type": "object",
            "properties": {
              "evidence": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "duplicate_vote_evidence": {
                      "type": "object",
                      "properties": {
                        "vote_a": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                              "default": "SIGNED_MSG_TYPE_UNKNOWN",
                              "enum": [
                                "SIGNED_MSG_TYPE_UNKNOWN",
                                "SIGNED_MSG_TYPE_PREVOTE",
                                "SIGNED_MSG_TYPE_PRECOMMIT",
                                "SIGNED_MSG_TYPE_PROPOSAL"
                              ]
                            },
                            "height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "round": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "block_id": {
                              "title": "BlockID",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "part_set_header": {
                                  "title": "PartsetHeader",
                                  "type": "object",
                                  "properties": {
                                    "total": {
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    }
                                  }
                                }
                              }
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "validator_address": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "validator_index": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "signature": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                              "format": "byte"
                            },
                            "extension": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                              "format": "byte"
                            },
                            "extension_signature": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                              "format": "byte"
                            }
                          },
                          "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                        },
                        "vote_b": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                              "default": "SIGNED_MSG_TYPE_UNKNOWN",
                              "enum": [
                                "SIGNED_MSG_TYPE_UNKNOWN",
                                "SIGNED_MSG_TYPE_PREVOTE",
                                "SIGNED_MSG_TYPE_PRECOMMIT",
                                "SIGNED_MSG_TYPE_PROPOSAL"
                              ]
                            },
                            "height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "round": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "block_id": {
                              "title": "BlockID",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "part_set_header": {
                                  "title": "PartsetHeader",
                                  "type": "object",
                                  "properties": {
                                    "total": {
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    }
                                  }
                                }
                              }
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "validator_address": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "validator_index": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "signature": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                              "format": "byte"
                            },
                            "extension": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                              "format": "byte"
                            },
                            "extension_signature": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                              "format": "byte"
                            }
                          },
                          "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                        },
                        "total_voting_power": {
                          "type": "string",
                          "format": "int64"
                        },
                        "validator_power": {
                          "type": "string",
                          "format": "int64"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        }
                      },
                      "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
                    },
                    "light_client_attack_evidence": {
                      "type": "object",
                      "properties": {
                        "conflicting_block": {
                          "type": "object",
                          "properties": {
                            "signed_header": {
                              "type": "object",
                              "properties": {
                                "header": {
                                  "type": "object",
                                  "properties": {
                                    "version": {
                                      "title": "basic block info",
                                      "type": "object",
                                      "properties": {
                                        "block": {
                                          "type": "string",
                                          "format": "uint64"
                                        },
                                        "app": {
                                          "type": "string",
                                          "format": "uint64"
                                        }
                                      },
                                      "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                                    },
                                    "chain_id": {
                                      "type": "string"
                                    },
                                    "height": {
                                      "type": "string",
                                      "format": "int64"
                                    },
                                    "time": {
                                      "type": "string",
                                      "format": "date-time"
                                    },
                                    "last_block_id": {
                                      "title": "BlockID",
                                      "type": "object",
                                      "properties": {
                                        "hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "part_set_header": {
                                          "title": "PartsetHeader",
                                          "type": "object",
                                          "properties": {
                                            "total": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "hash": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "last_commit_hash": {
                                      "title": "hashes of block data",
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "data_hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "validators_hash": {
                                      "title": "hashes from the app output from the prev block",
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "next_validators_hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "consensus_hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "app_hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "last_results_hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "evidence_hash": {
                                      "title": "consensus info",
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "proposer_address": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    }
                                  },
                                  "description": "Header defines the structure of a block header."
                                },
                                "commit": {
                                  "type": "object",
                                  "properties": {
                                    "height": {
                                      "type": "string",
                                      "format": "int64"
                                    },
                                    "round": {
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "block_id": {
                                      "title": "BlockID",
                                      "type": "object",
                                      "properties": {
                                        "hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "part_set_header": {
                                          "title": "PartsetHeader",
                                          "type": "object",
                                          "properties": {
                                            "total": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "hash": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "signatures": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "block_id_flag": {
                                            "title": "BlockIdFlag indicates which BlockID the signature is for",
                                            "type": "string",
                                            "default": "BLOCK_ID_FLAG_UNKNOWN",
                                            "enum": [
                                              "BLOCK_ID_FLAG_UNKNOWN",
                                              "BLOCK_ID_FLAG_ABSENT",
                                              "BLOCK_ID_FLAG_COMMIT",
                                              "BLOCK_ID_FLAG_NIL"
                                            ]
                                          },
                                          "validator_address": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "timestamp": {
                                            "type": "string",
                                            "format": "date-time"
                                          },
                                          "signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          }
                                        },
                                        "description": "CommitSig is a part of the Vote included in a Commit."
                                      }
                                    }
                                  },
                                  "description": "Commit contains the evidence that a block was committed by a set of validators."
                                }
                              }
                            },
                            "validator_set": {
                              "type": "object",
                              "properties": {
                                "validators": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "address": {
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                        "type": "string",
                                        "format": "byte"
                                      },
                                      "pub_key": {
                                        "title": "PublicKey defines the keys available for use with Validators",
                                        "type": "object",
                                        "properties": {
                                          "ed25519": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "secp256k1": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          }
                                        }
                                      },
                                      "voting_power": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "proposer_priority": {
                                        "type": "string",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                },
                                "proposer": {
                                  "type": "object",
                                  "properties": {
                                    "address": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "pub_key": {
                                      "title": "PublicKey defines the keys available for use with Validators",
                                      "type": "object",
                                      "properties": {
                                        "ed25519": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "secp256k1": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      }
                                    },
                                    "voting_power": {
                                      "type": "string",
                                      "format": "int64"
                                    },
                                    "proposer_priority": {
                                      "type": "string",
                                      "format": "int64"
                                    }
                                  }
                                },
                                "total_voting_power": {
                                  "type": "string",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        },
                        "common_height": {
                          "type": "string",
                          "format": "int64"
                        },
                        "byzantine_validators": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "format": "byte"
                              },
                              "pub_key": {
                                "title": "PublicKey defines the keys available for use with Validators",
                                "type": "object",
                                "properties": {
                                  "ed25519": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  },
                                  "secp256k1": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  }
                                }
                              },
                              "voting_power": {
                                "type": "string",
                                "format": "int64"
                              },
                              "proposer_priority": {
                                "type": "string",
                                "format": "int64"
                              }
                            }
                          }
                        },
                        "total_voting_power": {
                          "type": "string",
                          "format": "int64"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        }
                      },
                      "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
                    }
                  }
                }
              }
            }
          },
          "last_commit": {
            "type": "object",
            "properties": {
              "height": {
                "type": "string",
                "format": "int64"
              },
              "round": {
                "type": "integer",
                "format": "int32"
              },
              "block_id": {
                "title": "BlockID",
                "type": "object",
                "properties": {
                  "hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "part_set_header": {
                    "title": "PartsetHeader",
                    "type": "object",
                    "properties": {
                      "total": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      }
                    }
                  }
                }
              },
              "signatures": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "block_id_flag": {
                      "title": "BlockIdFlag indicates which BlockID the signature is for",
                      "type": "string",
                      "default": "BLOCK_ID_FLAG_UNKNOWN",
                      "enum": [
                        "BLOCK_ID_FLAG_UNKNOWN",
                        "BLOCK_ID_FLAG_ABSENT",
                        "BLOCK_ID_FLAG_COMMIT",
                        "BLOCK_ID_FLAG_NIL"
                      ]
                    },
                    "validator_address": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "signature": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    }
                  },
                  "description": "CommitSig is a part of the Vote included in a Commit."
                }
              }
            },
            "description": "Commit contains the evidence that a block was committed by a set of validators."
          }
        },
        "description": "Block is tendermint type Block, with the Header proposer address\nfield converted to bech32 string."
      },
      "cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse": {
        "type": "object",
        "properties": {
          "block_id": {
            "title": "BlockID",
            "type": "object",
            "properties": {
              "hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "part_set_header": {
                "title": "PartsetHeader",
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  }
                }
              }
            }
          },
          "block": {
            "title": "Deprecated: please use `sdk_block` instead",
            "type": "object",
            "properties": {
              "header": {
                "type": "object",
                "properties": {
                  "version": {
                    "title": "basic block info",
                    "type": "object",
                    "properties": {
                      "block": {
                        "type": "string",
                        "format": "uint64"
                      },
                      "app": {
                        "type": "string",
                        "format": "uint64"
                      }
                    },
                    "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                  },
                  "chain_id": {
                    "type": "string"
                  },
                  "height": {
                    "type": "string",
                    "format": "int64"
                  },
                  "time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "last_block_id": {
                    "title": "BlockID",
                    "type": "object",
                    "properties": {
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "part_set_header": {
                        "title": "PartsetHeader",
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  },
                  "last_commit_hash": {
                    "title": "hashes of block data",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "data_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "validators_hash": {
                    "title": "hashes from the app output from the prev block",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "next_validators_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "consensus_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "app_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "last_results_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "evidence_hash": {
                    "title": "consensus info",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "proposer_address": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  }
                },
                "description": "Header defines the structure of a block header."
              },
              "data": {
                "title": "Data contains the set of transactions included in the block",
                "type": "object",
                "properties": {
                  "txs": {
                    "type": "array",
                    "description": "Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs.",
                    "items": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    }
                  }
                }
              },
              "evidence": {
                "type": "object",
                "properties": {
                  "evidence": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "duplicate_vote_evidence": {
                          "type": "object",
                          "properties": {
                            "vote_a": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                  "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                  "enum": [
                                    "SIGNED_MSG_TYPE_UNKNOWN",
                                    "SIGNED_MSG_TYPE_PREVOTE",
                                    "SIGNED_MSG_TYPE_PRECOMMIT",
                                    "SIGNED_MSG_TYPE_PROPOSAL"
                                  ]
                                },
                                "height": {
                                  "type": "string",
                                  "format": "int64"
                                },
                                "round": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "block_id": {
                                  "title": "BlockID",
                                  "type": "object",
                                  "properties": {
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "part_set_header": {
                                      "title": "PartsetHeader",
                                      "type": "object",
                                      "properties": {
                                        "total": {
                                          "type": "integer",
                                          "format": "int64"
                                        },
                                        "hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      }
                                    }
                                  }
                                },
                                "timestamp": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "validator_address": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "validator_index": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                  "format": "byte"
                                },
                                "extension": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                  "format": "byte"
                                },
                                "extension_signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                  "format": "byte"
                                }
                              },
                              "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                            },
                            "vote_b": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                  "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                  "enum": [
                                    "SIGNED_MSG_TYPE_UNKNOWN",
                                    "SIGNED_MSG_TYPE_PREVOTE",
                                    "SIGNED_MSG_TYPE_PRECOMMIT",
                                    "SIGNED_MSG_TYPE_PROPOSAL"
                                  ]
                                },
                                "height": {
                                  "type": "string",
                                  "format": "int64"
                                },
                                "round": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "block_id": {
                                  "title": "BlockID",
                                  "type": "object",
                                  "properties": {
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "part_set_header": {
                                      "title": "PartsetHeader",
                                      "type": "object",
                                      "properties": {
                                        "total": {
                                          "type": "integer",
                                          "format": "int64"
                                        },
                                        "hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      }
                                    }
                                  }
                                },
                                "timestamp": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "validator_address": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "validator_index": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                  "format": "byte"
                                },
                                "extension": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                  "format": "byte"
                                },
                                "extension_signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                  "format": "byte"
                                }
                              },
                              "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                            },
                            "total_voting_power": {
                              "type": "string",
                              "format": "int64"
                            },
                            "validator_power": {
                              "type": "string",
                              "format": "int64"
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            }
                          },
                          "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
                        },
                        "light_client_attack_evidence": {
                          "type": "object",
                          "properties": {
                            "conflicting_block": {
                              "type": "object",
                              "properties": {
                                "signed_header": {
                                  "type": "object",
                                  "properties": {
                                    "header": {
                                      "type": "object",
                                      "properties": {
                                        "version": {
                                          "title": "basic block info",
                                          "type": "object",
                                          "properties": {
                                            "block": {
                                              "type": "string",
                                              "format": "uint64"
                                            },
                                            "app": {
                                              "type": "string",
                                              "format": "uint64"
                                            }
                                          },
                                          "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                                        },
                                        "chain_id": {
                                          "type": "string"
                                        },
                                        "height": {
                                          "type": "string",
                                          "format": "int64"
                                        },
                                        "time": {
                                          "type": "string",
                                          "format": "date-time"
                                        },
                                        "last_block_id": {
                                          "title": "BlockID",
                                          "type": "object",
                                          "properties": {
                                            "hash": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "part_set_header": {
                                              "title": "PartsetHeader",
                                              "type": "object",
                                              "properties": {
                                                "total": {
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "hash": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "last_commit_hash": {
                                          "title": "hashes of block data",
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "data_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "validators_hash": {
                                          "title": "hashes from the app output from the prev block",
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "next_validators_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "consensus_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "app_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "last_results_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "evidence_hash": {
                                          "title": "consensus info",
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "proposer_address": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      },
                                      "description": "Header defines the structure of a block header."
                                    },
                                    "commit": {
                                      "type": "object",
                                      "properties": {
                                        "height": {
                                          "type": "string",
                                          "format": "int64"
                                        },
                                        "round": {
                                          "type": "integer",
                                          "format": "int32"
                                        },
                                        "block_id": {
                                          "title": "BlockID",
                                          "type": "object",
                                          "properties": {
                                            "hash": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "part_set_header": {
                                              "title": "PartsetHeader",
                                              "type": "object",
                                              "properties": {
                                                "total": {
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "hash": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "signatures": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "block_id_flag": {
                                                "title": "BlockIdFlag indicates which BlockID the signature is for",
                                                "type": "string",
                                                "default": "BLOCK_ID_FLAG_UNKNOWN",
                                                "enum": [
                                                  "BLOCK_ID_FLAG_UNKNOWN",
                                                  "BLOCK_ID_FLAG_ABSENT",
                                                  "BLOCK_ID_FLAG_COMMIT",
                                                  "BLOCK_ID_FLAG_NIL"
                                                ]
                                              },
                                              "validator_address": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "timestamp": {
                                                "type": "string",
                                                "format": "date-time"
                                              },
                                              "signature": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              }
                                            },
                                            "description": "CommitSig is a part of the Vote included in a Commit."
                                          }
                                        }
                                      },
                                      "description": "Commit contains the evidence that a block was committed by a set of validators."
                                    }
                                  }
                                },
                                "validator_set": {
                                  "type": "object",
                                  "properties": {
                                    "validators": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "address": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "pub_key": {
                                            "title": "PublicKey defines the keys available for use with Validators",
                                            "type": "object",
                                            "properties": {
                                              "ed25519": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "secp256k1": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              }
                                            }
                                          },
                                          "voting_power": {
                                            "type": "string",
                                            "format": "int64"
                                          },
                                          "proposer_priority": {
                                            "type": "string",
                                            "format": "int64"
                                          }
                                        }
                                      }
                                    },
                                    "proposer": {
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "pub_key": {
                                          "title": "PublicKey defines the keys available for use with Validators",
                                          "type": "object",
                                          "properties": {
                                            "ed25519": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "secp256k1": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            }
                                          }
                                        },
                                        "voting_power": {
                                          "type": "string",
                                          "format": "int64"
                                        },
                                        "proposer_priority": {
                                          "type": "string",
                                          "format": "int64"
                                        }
                                      }
                                    },
                                    "total_voting_power": {
                                      "type": "string",
                                      "format": "int64"
                                    }
                                  }
                                }
                              }
                            },
                            "common_height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "byzantine_validators": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  },
                                  "pub_key": {
                                    "title": "PublicKey defines the keys available for use with Validators",
                                    "type": "object",
                                    "properties": {
                                      "ed25519": {
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                        "type": "string",
                                        "format": "byte"
                                      },
                                      "secp256k1": {
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                        "type": "string",
                                        "format": "byte"
                                      }
                                    }
                                  },
                                  "voting_power": {
                                    "type": "string",
                                    "format": "int64"
                                  },
                                  "proposer_priority": {
                                    "type": "string",
                                    "format": "int64"
                                  }
                                }
                              }
                            },
                            "total_voting_power": {
                              "type": "string",
                              "format": "int64"
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            }
                          },
                          "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
                        }
                      }
                    }
                  }
                }
              },
              "last_commit": {
                "type": "object",
                "properties": {
                  "height": {
                    "type": "string",
                    "format": "int64"
                  },
                  "round": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "block_id": {
                    "title": "BlockID",
                    "type": "object",
                    "properties": {
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "part_set_header": {
                        "title": "PartsetHeader",
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  },
                  "signatures": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "block_id_flag": {
                          "title": "BlockIdFlag indicates which BlockID the signature is for",
                          "type": "string",
                          "default": "BLOCK_ID_FLAG_UNKNOWN",
                          "enum": [
                            "BLOCK_ID_FLAG_UNKNOWN",
                            "BLOCK_ID_FLAG_ABSENT",
                            "BLOCK_ID_FLAG_COMMIT",
                            "BLOCK_ID_FLAG_NIL"
                          ]
                        },
                        "validator_address": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "signature": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        }
                      },
                      "description": "CommitSig is a part of the Vote included in a Commit."
                    }
                  }
                },
                "description": "Commit contains the evidence that a block was committed by a set of validators."
              }
            }
          },
          "sdk_block": {
            "title": "Since: cosmos-sdk 0.47",
            "type": "object",
            "properties": {
              "header": {
                "type": "object",
                "properties": {
                  "version": {
                    "title": "basic block info",
                    "type": "object",
                    "properties": {
                      "block": {
                        "type": "string",
                        "format": "uint64"
                      },
                      "app": {
                        "type": "string",
                        "format": "uint64"
                      }
                    },
                    "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                  },
                  "chain_id": {
                    "type": "string"
                  },
                  "height": {
                    "type": "string",
                    "format": "int64"
                  },
                  "time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "last_block_id": {
                    "title": "BlockID",
                    "type": "object",
                    "properties": {
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "part_set_header": {
                        "title": "PartsetHeader",
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  },
                  "last_commit_hash": {
                    "title": "hashes of block data",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "data_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "validators_hash": {
                    "title": "hashes from the app output from the prev block",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "next_validators_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "consensus_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "app_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "last_results_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "evidence_hash": {
                    "title": "consensus info",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "proposer_address": {
                    "type": "string",
                    "description": "proposer_address is the original block proposer address, formatted as a Bech32 string.\nIn Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string\nfor better UX."
                  }
                },
                "description": "Header defines the structure of a Tendermint block header."
              },
              "data": {
                "title": "Data contains the set of transactions included in the block",
                "type": "object",
                "properties": {
                  "txs": {
                    "type": "array",
                    "description": "Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs.",
                    "items": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    }
                  }
                }
              },
              "evidence": {
                "type": "object",
                "properties": {
                  "evidence": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "duplicate_vote_evidence": {
                          "type": "object",
                          "properties": {
                            "vote_a": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                  "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                  "enum": [
                                    "SIGNED_MSG_TYPE_UNKNOWN",
                                    "SIGNED_MSG_TYPE_PREVOTE",
                                    "SIGNED_MSG_TYPE_PRECOMMIT",
                                    "SIGNED_MSG_TYPE_PROPOSAL"
                                  ]
                                },
                                "height": {
                                  "type": "string",
                                  "format": "int64"
                                },
                                "round": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "block_id": {
                                  "title": "BlockID",
                                  "type": "object",
                                  "properties": {
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "part_set_header": {
                                      "title": "PartsetHeader",
                                      "type": "object",
                                      "properties": {
                                        "total": {
                                          "type": "integer",
                                          "format": "int64"
                                        },
                                        "hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      }
                                    }
                                  }
                                },
                                "timestamp": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "validator_address": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "validator_index": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                  "format": "byte"
                                },
                                "extension": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                  "format": "byte"
                                },
                                "extension_signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                  "format": "byte"
                                }
                              },
                              "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                            },
                            "vote_b": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                  "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                  "enum": [
                                    "SIGNED_MSG_TYPE_UNKNOWN",
                                    "SIGNED_MSG_TYPE_PREVOTE",
                                    "SIGNED_MSG_TYPE_PRECOMMIT",
                                    "SIGNED_MSG_TYPE_PROPOSAL"
                                  ]
                                },
                                "height": {
                                  "type": "string",
                                  "format": "int64"
                                },
                                "round": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "block_id": {
                                  "title": "BlockID",
                                  "type": "object",
                                  "properties": {
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "part_set_header": {
                                      "title": "PartsetHeader",
                                      "type": "object",
                                      "properties": {
                                        "total": {
                                          "type": "integer",
                                          "format": "int64"
                                        },
                                        "hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      }
                                    }
                                  }
                                },
                                "timestamp": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "validator_address": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "validator_index": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                  "format": "byte"
                                },
                                "extension": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                  "format": "byte"
                                },
                                "extension_signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                  "format": "byte"
                                }
                              },
                              "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                            },
                            "total_voting_power": {
                              "type": "string",
                              "format": "int64"
                            },
                            "validator_power": {
                              "type": "string",
                              "format": "int64"
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            }
                          },
                          "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
                        },
                        "light_client_attack_evidence": {
                          "type": "object",
                          "properties": {
                            "conflicting_block": {
                              "type": "object",
                              "properties": {
                                "signed_header": {
                                  "type": "object",
                                  "properties": {
                                    "header": {
                                      "type": "object",
                                      "properties": {
                                        "version": {
                                          "title": "basic block info",
                                          "type": "object",
                                          "properties": {
                                            "block": {
                                              "type": "string",
                                              "format": "uint64"
                                            },
                                            "app": {
                                              "type": "string",
                                              "format": "uint64"
                                            }
                                          },
                                          "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                                        },
                                        "chain_id": {
                                          "type": "string"
                                        },
                                        "height": {
                                          "type": "string",
                                          "format": "int64"
                                        },
                                        "time": {
                                          "type": "string",
                                          "format": "date-time"
                                        },
                                        "last_block_id": {
                                          "title": "BlockID",
                                          "type": "object",
                                          "properties": {
                                            "hash": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "part_set_header": {
                                              "title": "PartsetHeader",
                                              "type": "object",
                                              "properties": {
                                                "total": {
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "hash": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "last_commit_hash": {
                                          "title": "hashes of block data",
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "data_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "validators_hash": {
                                          "title": "hashes from the app output from the prev block",
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "next_validators_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "consensus_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "app_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "last_results_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "evidence_hash": {
                                          "title": "consensus info",
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "proposer_address": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      },
                                      "description": "Header defines the structure of a block header."
                                    },
                                    "commit": {
                                      "type": "object",
                                      "properties": {
                                        "height": {
                                          "type": "string",
                                          "format": "int64"
                                        },
                                        "round": {
                                          "type": "integer",
                                          "format": "int32"
                                        },
                                        "block_id": {
                                          "title": "BlockID",
                                          "type": "object",
                                          "properties": {
                                            "hash": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "part_set_header": {
                                              "title": "PartsetHeader",
                                              "type": "object",
                                              "properties": {
                                                "total": {
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "hash": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "signatures": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "block_id_flag": {
                                                "title": "BlockIdFlag indicates which BlockID the signature is for",
                                                "type": "string",
                                                "default": "BLOCK_ID_FLAG_UNKNOWN",
                                                "enum": [
                                                  "BLOCK_ID_FLAG_UNKNOWN",
                                                  "BLOCK_ID_FLAG_ABSENT",
                                                  "BLOCK_ID_FLAG_COMMIT",
                                                  "BLOCK_ID_FLAG_NIL"
                                                ]
                                              },
                                              "validator_address": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "timestamp": {
                                                "type": "string",
                                                "format": "date-time"
                                              },
                                              "signature": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              }
                                            },
                                            "description": "CommitSig is a part of the Vote included in a Commit."
                                          }
                                        }
                                      },
                                      "description": "Commit contains the evidence that a block was committed by a set of validators."
                                    }
                                  }
                                },
                                "validator_set": {
                                  "type": "object",
                                  "properties": {
                                    "validators": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "address": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "pub_key": {
                                            "title": "PublicKey defines the keys available for use with Validators",
                                            "type": "object",
                                            "properties": {
                                              "ed25519": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "secp256k1": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              }
                                            }
                                          },
                                          "voting_power": {
                                            "type": "string",
                                            "format": "int64"
                                          },
                                          "proposer_priority": {
                                            "type": "string",
                                            "format": "int64"
                                          }
                                        }
                                      }
                                    },
                                    "proposer": {
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "pub_key": {
                                          "title": "PublicKey defines the keys available for use with Validators",
                                          "type": "object",
                                          "properties": {
                                            "ed25519": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "secp256k1": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            }
                                          }
                                        },
                                        "voting_power": {
                                          "type": "string",
                                          "format": "int64"
                                        },
                                        "proposer_priority": {
                                          "type": "string",
                                          "format": "int64"
                                        }
                                      }
                                    },
                                    "total_voting_power": {
                                      "type": "string",
                                      "format": "int64"
                                    }
                                  }
                                }
                              }
                            },
                            "common_height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "byzantine_validators": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  },
                                  "pub_key": {
                                    "title": "PublicKey defines the keys available for use with Validators",
                                    "type": "object",
                                    "properties": {
                                      "ed25519": {
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                        "type": "string",
                                        "format": "byte"
                                      },
                                      "secp256k1": {
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                        "type": "string",
                                        "format": "byte"
                                      }
                                    }
                                  },
                                  "voting_power": {
                                    "type": "string",
                                    "format": "int64"
                                  },
                                  "proposer_priority": {
                                    "type": "string",
                                    "format": "int64"
                                  }
                                }
                              }
                            },
                            "total_voting_power": {
                              "type": "string",
                              "format": "int64"
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            }
                          },
                          "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
                        }
                      }
                    }
                  }
                }
              },
              "last_commit": {
                "type": "object",
                "properties": {
                  "height": {
                    "type": "string",
                    "format": "int64"
                  },
                  "round": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "block_id": {
                    "title": "BlockID",
                    "type": "object",
                    "properties": {
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "part_set_header": {
                        "title": "PartsetHeader",
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  },
                  "signatures": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "block_id_flag": {
                          "title": "BlockIdFlag indicates which BlockID the signature is for",
                          "type": "string",
                          "default": "BLOCK_ID_FLAG_UNKNOWN",
                          "enum": [
                            "BLOCK_ID_FLAG_UNKNOWN",
                            "BLOCK_ID_FLAG_ABSENT",
                            "BLOCK_ID_FLAG_COMMIT",
                            "BLOCK_ID_FLAG_NIL"
                          ]
                        },
                        "validator_address": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "signature": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        }
                      },
                      "description": "CommitSig is a part of the Vote included in a Commit."
                    }
                  }
                },
                "description": "Commit contains the evidence that a block was committed by a set of validators."
              }
            },
            "description": "Block is tendermint type Block, with the Header proposer address\nfield converted to bech32 string."
          }
        },
        "description": "GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight RPC method."
      },
      "cosmos.base.tendermint.v1beta1.GetLatestBlockResponse": {
        "type": "object",
        "properties": {
          "block_id": {
            "title": "BlockID",
            "type": "object",
            "properties": {
              "hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "part_set_header": {
                "title": "PartsetHeader",
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  }
                }
              }
            }
          },
          "block": {
            "title": "Deprecated: please use `sdk_block` instead",
            "type": "object",
            "properties": {
              "header": {
                "type": "object",
                "properties": {
                  "version": {
                    "title": "basic block info",
                    "type": "object",
                    "properties": {
                      "block": {
                        "type": "string",
                        "format": "uint64"
                      },
                      "app": {
                        "type": "string",
                        "format": "uint64"
                      }
                    },
                    "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                  },
                  "chain_id": {
                    "type": "string"
                  },
                  "height": {
                    "type": "string",
                    "format": "int64"
                  },
                  "time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "last_block_id": {
                    "title": "BlockID",
                    "type": "object",
                    "properties": {
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "part_set_header": {
                        "title": "PartsetHeader",
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  },
                  "last_commit_hash": {
                    "title": "hashes of block data",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "data_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "validators_hash": {
                    "title": "hashes from the app output from the prev block",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "next_validators_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "consensus_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "app_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "last_results_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "evidence_hash": {
                    "title": "consensus info",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "proposer_address": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  }
                },
                "description": "Header defines the structure of a block header."
              },
              "data": {
                "title": "Data contains the set of transactions included in the block",
                "type": "object",
                "properties": {
                  "txs": {
                    "type": "array",
                    "description": "Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs.",
                    "items": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    }
                  }
                }
              },
              "evidence": {
                "type": "object",
                "properties": {
                  "evidence": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "duplicate_vote_evidence": {
                          "type": "object",
                          "properties": {
                            "vote_a": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                  "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                  "enum": [
                                    "SIGNED_MSG_TYPE_UNKNOWN",
                                    "SIGNED_MSG_TYPE_PREVOTE",
                                    "SIGNED_MSG_TYPE_PRECOMMIT",
                                    "SIGNED_MSG_TYPE_PROPOSAL"
                                  ]
                                },
                                "height": {
                                  "type": "string",
                                  "format": "int64"
                                },
                                "round": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "block_id": {
                                  "title": "BlockID",
                                  "type": "object",
                                  "properties": {
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "part_set_header": {
                                      "title": "PartsetHeader",
                                      "type": "object",
                                      "properties": {
                                        "total": {
                                          "type": "integer",
                                          "format": "int64"
                                        },
                                        "hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      }
                                    }
                                  }
                                },
                                "timestamp": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "validator_address": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "validator_index": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                  "format": "byte"
                                },
                                "extension": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                  "format": "byte"
                                },
                                "extension_signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                  "format": "byte"
                                }
                              },
                              "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                            },
                            "vote_b": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                  "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                  "enum": [
                                    "SIGNED_MSG_TYPE_UNKNOWN",
                                    "SIGNED_MSG_TYPE_PREVOTE",
                                    "SIGNED_MSG_TYPE_PRECOMMIT",
                                    "SIGNED_MSG_TYPE_PROPOSAL"
                                  ]
                                },
                                "height": {
                                  "type": "string",
                                  "format": "int64"
                                },
                                "round": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "block_id": {
                                  "title": "BlockID",
                                  "type": "object",
                                  "properties": {
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "part_set_header": {
                                      "title": "PartsetHeader",
                                      "type": "object",
                                      "properties": {
                                        "total": {
                                          "type": "integer",
                                          "format": "int64"
                                        },
                                        "hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      }
                                    }
                                  }
                                },
                                "timestamp": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "validator_address": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "validator_index": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                  "format": "byte"
                                },
                                "extension": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                  "format": "byte"
                                },
                                "extension_signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                  "format": "byte"
                                }
                              },
                              "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                            },
                            "total_voting_power": {
                              "type": "string",
                              "format": "int64"
                            },
                            "validator_power": {
                              "type": "string",
                              "format": "int64"
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            }
                          },
                          "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
                        },
                        "light_client_attack_evidence": {
                          "type": "object",
                          "properties": {
                            "conflicting_block": {
                              "type": "object",
                              "properties": {
                                "signed_header": {
                                  "type": "object",
                                  "properties": {
                                    "header": {
                                      "type": "object",
                                      "properties": {
                                        "version": {
                                          "title": "basic block info",
                                          "type": "object",
                                          "properties": {
                                            "block": {
                                              "type": "string",
                                              "format": "uint64"
                                            },
                                            "app": {
                                              "type": "string",
                                              "format": "uint64"
                                            }
                                          },
                                          "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                                        },
                                        "chain_id": {
                                          "type": "string"
                                        },
                                        "height": {
                                          "type": "string",
                                          "format": "int64"
                                        },
                                        "time": {
                                          "type": "string",
                                          "format": "date-time"
                                        },
                                        "last_block_id": {
                                          "title": "BlockID",
                                          "type": "object",
                                          "properties": {
                                            "hash": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "part_set_header": {
                                              "title": "PartsetHeader",
                                              "type": "object",
                                              "properties": {
                                                "total": {
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "hash": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "last_commit_hash": {
                                          "title": "hashes of block data",
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "data_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "validators_hash": {
                                          "title": "hashes from the app output from the prev block",
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "next_validators_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "consensus_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "app_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "last_results_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "evidence_hash": {
                                          "title": "consensus info",
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "proposer_address": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      },
                                      "description": "Header defines the structure of a block header."
                                    },
                                    "commit": {
                                      "type": "object",
                                      "properties": {
                                        "height": {
                                          "type": "string",
                                          "format": "int64"
                                        },
                                        "round": {
                                          "type": "integer",
                                          "format": "int32"
                                        },
                                        "block_id": {
                                          "title": "BlockID",
                                          "type": "object",
                                          "properties": {
                                            "hash": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "part_set_header": {
                                              "title": "PartsetHeader",
                                              "type": "object",
                                              "properties": {
                                                "total": {
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "hash": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "signatures": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "block_id_flag": {
                                                "title": "BlockIdFlag indicates which BlockID the signature is for",
                                                "type": "string",
                                                "default": "BLOCK_ID_FLAG_UNKNOWN",
                                                "enum": [
                                                  "BLOCK_ID_FLAG_UNKNOWN",
                                                  "BLOCK_ID_FLAG_ABSENT",
                                                  "BLOCK_ID_FLAG_COMMIT",
                                                  "BLOCK_ID_FLAG_NIL"
                                                ]
                                              },
                                              "validator_address": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "timestamp": {
                                                "type": "string",
                                                "format": "date-time"
                                              },
                                              "signature": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              }
                                            },
                                            "description": "CommitSig is a part of the Vote included in a Commit."
                                          }
                                        }
                                      },
                                      "description": "Commit contains the evidence that a block was committed by a set of validators."
                                    }
                                  }
                                },
                                "validator_set": {
                                  "type": "object",
                                  "properties": {
                                    "validators": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "address": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "pub_key": {
                                            "title": "PublicKey defines the keys available for use with Validators",
                                            "type": "object",
                                            "properties": {
                                              "ed25519": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "secp256k1": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              }
                                            }
                                          },
                                          "voting_power": {
                                            "type": "string",
                                            "format": "int64"
                                          },
                                          "proposer_priority": {
                                            "type": "string",
                                            "format": "int64"
                                          }
                                        }
                                      }
                                    },
                                    "proposer": {
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "pub_key": {
                                          "title": "PublicKey defines the keys available for use with Validators",
                                          "type": "object",
                                          "properties": {
                                            "ed25519": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "secp256k1": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            }
                                          }
                                        },
                                        "voting_power": {
                                          "type": "string",
                                          "format": "int64"
                                        },
                                        "proposer_priority": {
                                          "type": "string",
                                          "format": "int64"
                                        }
                                      }
                                    },
                                    "total_voting_power": {
                                      "type": "string",
                                      "format": "int64"
                                    }
                                  }
                                }
                              }
                            },
                            "common_height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "byzantine_validators": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  },
                                  "pub_key": {
                                    "title": "PublicKey defines the keys available for use with Validators",
                                    "type": "object",
                                    "properties": {
                                      "ed25519": {
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                        "type": "string",
                                        "format": "byte"
                                      },
                                      "secp256k1": {
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                        "type": "string",
                                        "format": "byte"
                                      }
                                    }
                                  },
                                  "voting_power": {
                                    "type": "string",
                                    "format": "int64"
                                  },
                                  "proposer_priority": {
                                    "type": "string",
                                    "format": "int64"
                                  }
                                }
                              }
                            },
                            "total_voting_power": {
                              "type": "string",
                              "format": "int64"
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            }
                          },
                          "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
                        }
                      }
                    }
                  }
                }
              },
              "last_commit": {
                "type": "object",
                "properties": {
                  "height": {
                    "type": "string",
                    "format": "int64"
                  },
                  "round": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "block_id": {
                    "title": "BlockID",
                    "type": "object",
                    "properties": {
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "part_set_header": {
                        "title": "PartsetHeader",
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  },
                  "signatures": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "block_id_flag": {
                          "title": "BlockIdFlag indicates which BlockID the signature is for",
                          "type": "string",
                          "default": "BLOCK_ID_FLAG_UNKNOWN",
                          "enum": [
                            "BLOCK_ID_FLAG_UNKNOWN",
                            "BLOCK_ID_FLAG_ABSENT",
                            "BLOCK_ID_FLAG_COMMIT",
                            "BLOCK_ID_FLAG_NIL"
                          ]
                        },
                        "validator_address": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "signature": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        }
                      },
                      "description": "CommitSig is a part of the Vote included in a Commit."
                    }
                  }
                },
                "description": "Commit contains the evidence that a block was committed by a set of validators."
              }
            }
          },
          "sdk_block": {
            "title": "Since: cosmos-sdk 0.47",
            "type": "object",
            "properties": {
              "header": {
                "type": "object",
                "properties": {
                  "version": {
                    "title": "basic block info",
                    "type": "object",
                    "properties": {
                      "block": {
                        "type": "string",
                        "format": "uint64"
                      },
                      "app": {
                        "type": "string",
                        "format": "uint64"
                      }
                    },
                    "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                  },
                  "chain_id": {
                    "type": "string"
                  },
                  "height": {
                    "type": "string",
                    "format": "int64"
                  },
                  "time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "last_block_id": {
                    "title": "BlockID",
                    "type": "object",
                    "properties": {
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "part_set_header": {
                        "title": "PartsetHeader",
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  },
                  "last_commit_hash": {
                    "title": "hashes of block data",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "data_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "validators_hash": {
                    "title": "hashes from the app output from the prev block",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "next_validators_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "consensus_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "app_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "last_results_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "evidence_hash": {
                    "title": "consensus info",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "proposer_address": {
                    "type": "string",
                    "description": "proposer_address is the original block proposer address, formatted as a Bech32 string.\nIn Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string\nfor better UX."
                  }
                },
                "description": "Header defines the structure of a Tendermint block header."
              },
              "data": {
                "title": "Data contains the set of transactions included in the block",
                "type": "object",
                "properties": {
                  "txs": {
                    "type": "array",
                    "description": "Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs.",
                    "items": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    }
                  }
                }
              },
              "evidence": {
                "type": "object",
                "properties": {
                  "evidence": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "duplicate_vote_evidence": {
                          "type": "object",
                          "properties": {
                            "vote_a": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                  "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                  "enum": [
                                    "SIGNED_MSG_TYPE_UNKNOWN",
                                    "SIGNED_MSG_TYPE_PREVOTE",
                                    "SIGNED_MSG_TYPE_PRECOMMIT",
                                    "SIGNED_MSG_TYPE_PROPOSAL"
                                  ]
                                },
                                "height": {
                                  "type": "string",
                                  "format": "int64"
                                },
                                "round": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "block_id": {
                                  "title": "BlockID",
                                  "type": "object",
                                  "properties": {
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "part_set_header": {
                                      "title": "PartsetHeader",
                                      "type": "object",
                                      "properties": {
                                        "total": {
                                          "type": "integer",
                                          "format": "int64"
                                        },
                                        "hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      }
                                    }
                                  }
                                },
                                "timestamp": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "validator_address": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "validator_index": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                  "format": "byte"
                                },
                                "extension": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                  "format": "byte"
                                },
                                "extension_signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                  "format": "byte"
                                }
                              },
                              "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                            },
                            "vote_b": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                  "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                  "enum": [
                                    "SIGNED_MSG_TYPE_UNKNOWN",
                                    "SIGNED_MSG_TYPE_PREVOTE",
                                    "SIGNED_MSG_TYPE_PRECOMMIT",
                                    "SIGNED_MSG_TYPE_PROPOSAL"
                                  ]
                                },
                                "height": {
                                  "type": "string",
                                  "format": "int64"
                                },
                                "round": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "block_id": {
                                  "title": "BlockID",
                                  "type": "object",
                                  "properties": {
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "part_set_header": {
                                      "title": "PartsetHeader",
                                      "type": "object",
                                      "properties": {
                                        "total": {
                                          "type": "integer",
                                          "format": "int64"
                                        },
                                        "hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      }
                                    }
                                  }
                                },
                                "timestamp": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "validator_address": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "validator_index": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                  "format": "byte"
                                },
                                "extension": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                  "format": "byte"
                                },
                                "extension_signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                  "format": "byte"
                                }
                              },
                              "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                            },
                            "total_voting_power": {
                              "type": "string",
                              "format": "int64"
                            },
                            "validator_power": {
                              "type": "string",
                              "format": "int64"
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            }
                          },
                          "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
                        },
                        "light_client_attack_evidence": {
                          "type": "object",
                          "properties": {
                            "conflicting_block": {
                              "type": "object",
                              "properties": {
                                "signed_header": {
                                  "type": "object",
                                  "properties": {
                                    "header": {
                                      "type": "object",
                                      "properties": {
                                        "version": {
                                          "title": "basic block info",
                                          "type": "object",
                                          "properties": {
                                            "block": {
                                              "type": "string",
                                              "format": "uint64"
                                            },
                                            "app": {
                                              "type": "string",
                                              "format": "uint64"
                                            }
                                          },
                                          "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                                        },
                                        "chain_id": {
                                          "type": "string"
                                        },
                                        "height": {
                                          "type": "string",
                                          "format": "int64"
                                        },
                                        "time": {
                                          "type": "string",
                                          "format": "date-time"
                                        },
                                        "last_block_id": {
                                          "title": "BlockID",
                                          "type": "object",
                                          "properties": {
                                            "hash": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "part_set_header": {
                                              "title": "PartsetHeader",
                                              "type": "object",
                                              "properties": {
                                                "total": {
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "hash": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "last_commit_hash": {
                                          "title": "hashes of block data",
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "data_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "validators_hash": {
                                          "title": "hashes from the app output from the prev block",
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "next_validators_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "consensus_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "app_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "last_results_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "evidence_hash": {
                                          "title": "consensus info",
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "proposer_address": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      },
                                      "description": "Header defines the structure of a block header."
                                    },
                                    "commit": {
                                      "type": "object",
                                      "properties": {
                                        "height": {
                                          "type": "string",
                                          "format": "int64"
                                        },
                                        "round": {
                                          "type": "integer",
                                          "format": "int32"
                                        },
                                        "block_id": {
                                          "title": "BlockID",
                                          "type": "object",
                                          "properties": {
                                            "hash": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "part_set_header": {
                                              "title": "PartsetHeader",
                                              "type": "object",
                                              "properties": {
                                                "total": {
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "hash": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "signatures": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "block_id_flag": {
                                                "title": "BlockIdFlag indicates which BlockID the signature is for",
                                                "type": "string",
                                                "default": "BLOCK_ID_FLAG_UNKNOWN",
                                                "enum": [
                                                  "BLOCK_ID_FLAG_UNKNOWN",
                                                  "BLOCK_ID_FLAG_ABSENT",
                                                  "BLOCK_ID_FLAG_COMMIT",
                                                  "BLOCK_ID_FLAG_NIL"
                                                ]
                                              },
                                              "validator_address": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "timestamp": {
                                                "type": "string",
                                                "format": "date-time"
                                              },
                                              "signature": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              }
                                            },
                                            "description": "CommitSig is a part of the Vote included in a Commit."
                                          }
                                        }
                                      },
                                      "description": "Commit contains the evidence that a block was committed by a set of validators."
                                    }
                                  }
                                },
                                "validator_set": {
                                  "type": "object",
                                  "properties": {
                                    "validators": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "address": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "pub_key": {
                                            "title": "PublicKey defines the keys available for use with Validators",
                                            "type": "object",
                                            "properties": {
                                              "ed25519": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "secp256k1": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              }
                                            }
                                          },
                                          "voting_power": {
                                            "type": "string",
                                            "format": "int64"
                                          },
                                          "proposer_priority": {
                                            "type": "string",
                                            "format": "int64"
                                          }
                                        }
                                      }
                                    },
                                    "proposer": {
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "pub_key": {
                                          "title": "PublicKey defines the keys available for use with Validators",
                                          "type": "object",
                                          "properties": {
                                            "ed25519": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "secp256k1": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            }
                                          }
                                        },
                                        "voting_power": {
                                          "type": "string",
                                          "format": "int64"
                                        },
                                        "proposer_priority": {
                                          "type": "string",
                                          "format": "int64"
                                        }
                                      }
                                    },
                                    "total_voting_power": {
                                      "type": "string",
                                      "format": "int64"
                                    }
                                  }
                                }
                              }
                            },
                            "common_height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "byzantine_validators": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  },
                                  "pub_key": {
                                    "title": "PublicKey defines the keys available for use with Validators",
                                    "type": "object",
                                    "properties": {
                                      "ed25519": {
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                        "type": "string",
                                        "format": "byte"
                                      },
                                      "secp256k1": {
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                        "type": "string",
                                        "format": "byte"
                                      }
                                    }
                                  },
                                  "voting_power": {
                                    "type": "string",
                                    "format": "int64"
                                  },
                                  "proposer_priority": {
                                    "type": "string",
                                    "format": "int64"
                                  }
                                }
                              }
                            },
                            "total_voting_power": {
                              "type": "string",
                              "format": "int64"
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            }
                          },
                          "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
                        }
                      }
                    }
                  }
                }
              },
              "last_commit": {
                "type": "object",
                "properties": {
                  "height": {
                    "type": "string",
                    "format": "int64"
                  },
                  "round": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "block_id": {
                    "title": "BlockID",
                    "type": "object",
                    "properties": {
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "part_set_header": {
                        "title": "PartsetHeader",
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  },
                  "signatures": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "block_id_flag": {
                          "title": "BlockIdFlag indicates which BlockID the signature is for",
                          "type": "string",
                          "default": "BLOCK_ID_FLAG_UNKNOWN",
                          "enum": [
                            "BLOCK_ID_FLAG_UNKNOWN",
                            "BLOCK_ID_FLAG_ABSENT",
                            "BLOCK_ID_FLAG_COMMIT",
                            "BLOCK_ID_FLAG_NIL"
                          ]
                        },
                        "validator_address": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "signature": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        }
                      },
                      "description": "CommitSig is a part of the Vote included in a Commit."
                    }
                  }
                },
                "description": "Commit contains the evidence that a block was committed by a set of validators."
              }
            },
            "description": "Block is tendermint type Block, with the Header proposer address\nfield converted to bech32 string."
          }
        },
        "description": "GetLatestBlockResponse is the response type for the Query/GetLatestBlock RPC method."
      },
      "cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse": {
        "type": "object",
        "properties": {
          "block_height": {
            "type": "string",
            "format": "int64"
          },
          "validators": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "pub_key": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                },
                "voting_power": {
                  "type": "string",
                  "format": "int64"
                },
                "proposer_priority": {
                  "type": "string",
                  "format": "int64"
                }
              },
              "description": "Validator is the type for the validator-set."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines an pagination for the response."
          }
        },
        "description": "GetLatestValidatorSetResponse is the response type for the Query/GetValidatorSetByHeight RPC method."
      },
      "cosmos.base.tendermint.v1beta1.GetNodeInfoResponse": {
        "type": "object",
        "properties": {
          "default_node_info": {
            "type": "object",
            "properties": {
              "protocol_version": {
                "type": "object",
                "properties": {
                  "p2p": {
                    "type": "string",
                    "format": "uint64"
                  },
                  "block": {
                    "type": "string",
                    "format": "uint64"
                  },
                  "app": {
                    "type": "string",
                    "format": "uint64"
                  }
                }
              },
              "default_node_id": {
                "type": "string"
              },
              "listen_addr": {
                "type": "string"
              },
              "network": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "channels": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "moniker": {
                "type": "string"
              },
              "other": {
                "type": "object",
                "properties": {
                  "tx_index": {
                    "type": "string"
                  },
                  "rpc_address": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "application_version": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "app_name": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "git_commit": {
                "type": "string"
              },
              "build_tags": {
                "type": "string"
              },
              "go_version": {
                "type": "string"
              },
              "build_deps": {
                "type": "array",
                "items": {
                  "title": "Module is the type for VersionInfo",
                  "type": "object",
                  "properties": {
                    "path": {
                      "title": "module path",
                      "type": "string"
                    },
                    "version": {
                      "title": "module version",
                      "type": "string"
                    },
                    "sum": {
                      "title": "checksum",
                      "type": "string"
                    }
                  }
                }
              },
              "cosmos_sdk_version": {
                "title": "Since: cosmos-sdk 0.43",
                "type": "string"
              }
            },
            "description": "VersionInfo is the type for the GetNodeInfoResponse message."
          }
        },
        "description": "GetNodeInfoResponse is the response type for the Query/GetNodeInfo RPC method."
      },
      "cosmos.base.tendermint.v1beta1.GetSyncingResponse": {
        "type": "object",
        "properties": {
          "syncing": {
            "type": "boolean"
          }
        },
        "description": "GetSyncingResponse is the response type for the Query/GetSyncing RPC method."
      },
      "cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse": {
        "type": "object",
        "properties": {
          "block_height": {
            "type": "string",
            "format": "int64"
          },
          "validators": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "pub_key": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                },
                "voting_power": {
                  "type": "string",
                  "format": "int64"
                },
                "proposer_priority": {
                  "type": "string",
                  "format": "int64"
                }
              },
              "description": "Validator is the type for the validator-set."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines an pagination for the response."
          }
        },
        "description": "GetValidatorSetByHeightResponse is the response type for the Query/GetValidatorSetByHeight RPC method."
      },
      "cosmos.base.tendermint.v1beta1.Header": {
        "type": "object",
        "properties": {
          "version": {
            "title": "basic block info",
            "type": "object",
            "properties": {
              "block": {
                "type": "string",
                "format": "uint64"
              },
              "app": {
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
          },
          "chain_id": {
            "type": "string"
          },
          "height": {
            "type": "string",
            "format": "int64"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "last_block_id": {
            "title": "BlockID",
            "type": "object",
            "properties": {
              "hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "part_set_header": {
                "title": "PartsetHeader",
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  }
                }
              }
            }
          },
          "last_commit_hash": {
            "title": "hashes of block data",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "data_hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "validators_hash": {
            "title": "hashes from the app output from the prev block",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "next_validators_hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "consensus_hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "app_hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "last_results_hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "evidence_hash": {
            "title": "consensus info",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "proposer_address": {
            "type": "string",
            "description": "proposer_address is the original block proposer address, formatted as a Bech32 string.\nIn Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string\nfor better UX."
          }
        },
        "description": "Header defines the structure of a Tendermint block header."
      },
      "cosmos.base.tendermint.v1beta1.Module": {
        "title": "Module is the type for VersionInfo",
        "type": "object",
        "properties": {
          "path": {
            "title": "module path",
            "type": "string"
          },
          "version": {
            "title": "module version",
            "type": "string"
          },
          "sum": {
            "title": "checksum",
            "type": "string"
          }
        }
      },
      "cosmos.base.tendermint.v1beta1.ProofOp": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "key": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "data": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          }
        },
        "description": "ProofOp defines an operation used for calculating Merkle root. The data could\nbe arbitrary format, providing necessary data for example neighbouring node\nhash.\n\nNote: This type is a duplicate of the ProofOp proto type defined in Tendermint."
      },
      "cosmos.base.tendermint.v1beta1.ProofOps": {
        "type": "object",
        "properties": {
          "ops": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "key": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "format": "byte"
                },
                "data": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "format": "byte"
                }
              },
              "description": "ProofOp defines an operation used for calculating Merkle root. The data could\nbe arbitrary format, providing necessary data for example neighbouring node\nhash.\n\nNote: This type is a duplicate of the ProofOp proto type defined in Tendermint."
            }
          }
        },
        "description": "ProofOps is Merkle proof defined by the list of ProofOps.\n\nNote: This type is a duplicate of the ProofOps proto type defined in Tendermint."
      },
      "cosmos.base.tendermint.v1beta1.Validator": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "pub_key": {
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
          },
          "voting_power": {
            "type": "string",
            "format": "int64"
          },
          "proposer_priority": {
            "type": "string",
            "format": "int64"
          }
        },
        "description": "Validator is the type for the validator-set."
      },
      "cosmos.base.tendermint.v1beta1.VersionInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "app_name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "git_commit": {
            "type": "string"
          },
          "build_tags": {
            "type": "string"
          },
          "go_version": {
            "type": "string"
          },
          "build_deps": {
            "type": "array",
            "items": {
              "title": "Module is the type for VersionInfo",
              "type": "object",
              "properties": {
                "path": {
                  "title": "module path",
                  "type": "string"
                },
                "version": {
                  "title": "module version",
                  "type": "string"
                },
                "sum": {
                  "title": "checksum",
                  "type": "string"
                }
              }
            }
          },
          "cosmos_sdk_version": {
            "title": "Since: cosmos-sdk 0.43",
            "type": "string"
          }
        },
        "description": "VersionInfo is the type for the GetNodeInfoResponse message."
      },
      "tendermint.crypto.PublicKey": {
        "title": "PublicKey defines the keys available for use with Validators",
        "type": "object",
        "properties": {
          "ed25519": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "secp256k1": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          }
        }
      },
      "tendermint.p2p.DefaultNodeInfo": {
        "type": "object",
        "properties": {
          "protocol_version": {
            "type": "object",
            "properties": {
              "p2p": {
                "type": "string",
                "format": "uint64"
              },
              "block": {
                "type": "string",
                "format": "uint64"
              },
              "app": {
                "type": "string",
                "format": "uint64"
              }
            }
          },
          "default_node_id": {
            "type": "string"
          },
          "listen_addr": {
            "type": "string"
          },
          "network": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "channels": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "moniker": {
            "type": "string"
          },
          "other": {
            "type": "object",
            "properties": {
              "tx_index": {
                "type": "string"
              },
              "rpc_address": {
                "type": "string"
              }
            }
          }
        }
      },
      "tendermint.p2p.DefaultNodeInfoOther": {
        "type": "object",
        "properties": {
          "tx_index": {
            "type": "string"
          },
          "rpc_address": {
            "type": "string"
          }
        }
      },
      "tendermint.p2p.ProtocolVersion": {
        "type": "object",
        "properties": {
          "p2p": {
            "type": "string",
            "format": "uint64"
          },
          "block": {
            "type": "string",
            "format": "uint64"
          },
          "app": {
            "type": "string",
            "format": "uint64"
          }
        }
      },
      "tendermint.types.Block": {
        "type": "object",
        "properties": {
          "header": {
            "type": "object",
            "properties": {
              "version": {
                "title": "basic block info",
                "type": "object",
                "properties": {
                  "block": {
                    "type": "string",
                    "format": "uint64"
                  },
                  "app": {
                    "type": "string",
                    "format": "uint64"
                  }
                },
                "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
              },
              "chain_id": {
                "type": "string"
              },
              "height": {
                "type": "string",
                "format": "int64"
              },
              "time": {
                "type": "string",
                "format": "date-time"
              },
              "last_block_id": {
                "title": "BlockID",
                "type": "object",
                "properties": {
                  "hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "part_set_header": {
                    "title": "PartsetHeader",
                    "type": "object",
                    "properties": {
                      "total": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      }
                    }
                  }
                }
              },
              "last_commit_hash": {
                "title": "hashes of block data",
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "data_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "validators_hash": {
                "title": "hashes from the app output from the prev block",
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "next_validators_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "consensus_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "app_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "last_results_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "evidence_hash": {
                "title": "consensus info",
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "proposer_address": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              }
            },
            "description": "Header defines the structure of a block header."
          },
          "data": {
            "title": "Data contains the set of transactions included in the block",
            "type": "object",
            "properties": {
              "txs": {
                "type": "array",
                "description": "Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs.",
                "items": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "evidence": {
            "type": "object",
            "properties": {
              "evidence": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "duplicate_vote_evidence": {
                      "type": "object",
                      "properties": {
                        "vote_a": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                              "default": "SIGNED_MSG_TYPE_UNKNOWN",
                              "enum": [
                                "SIGNED_MSG_TYPE_UNKNOWN",
                                "SIGNED_MSG_TYPE_PREVOTE",
                                "SIGNED_MSG_TYPE_PRECOMMIT",
                                "SIGNED_MSG_TYPE_PROPOSAL"
                              ]
                            },
                            "height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "round": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "block_id": {
                              "title": "BlockID",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "part_set_header": {
                                  "title": "PartsetHeader",
                                  "type": "object",
                                  "properties": {
                                    "total": {
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    }
                                  }
                                }
                              }
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "validator_address": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "validator_index": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "signature": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                              "format": "byte"
                            },
                            "extension": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                              "format": "byte"
                            },
                            "extension_signature": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                              "format": "byte"
                            }
                          },
                          "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                        },
                        "vote_b": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                              "default": "SIGNED_MSG_TYPE_UNKNOWN",
                              "enum": [
                                "SIGNED_MSG_TYPE_UNKNOWN",
                                "SIGNED_MSG_TYPE_PREVOTE",
                                "SIGNED_MSG_TYPE_PRECOMMIT",
                                "SIGNED_MSG_TYPE_PROPOSAL"
                              ]
                            },
                            "height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "round": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "block_id": {
                              "title": "BlockID",
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "part_set_header": {
                                  "title": "PartsetHeader",
                                  "type": "object",
                                  "properties": {
                                    "total": {
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    }
                                  }
                                }
                              }
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "validator_address": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "validator_index": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "signature": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                              "format": "byte"
                            },
                            "extension": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                              "format": "byte"
                            },
                            "extension_signature": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                              "format": "byte"
                            }
                          },
                          "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                        },
                        "total_voting_power": {
                          "type": "string",
                          "format": "int64"
                        },
                        "validator_power": {
                          "type": "string",
                          "format": "int64"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        }
                      },
                      "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
                    },
                    "light_client_attack_evidence": {
                      "type": "object",
                      "properties": {
                        "conflicting_block": {
                          "type": "object",
                          "properties": {
                            "signed_header": {
                              "type": "object",
                              "properties": {
                                "header": {
                                  "type": "object",
                                  "properties": {
                                    "version": {
                                      "title": "basic block info",
                                      "type": "object",
                                      "properties": {
                                        "block": {
                                          "type": "string",
                                          "format": "uint64"
                                        },
                                        "app": {
                                          "type": "string",
                                          "format": "uint64"
                                        }
                                      },
                                      "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                                    },
                                    "chain_id": {
                                      "type": "string"
                                    },
                                    "height": {
                                      "type": "string",
                                      "format": "int64"
                                    },
                                    "time": {
                                      "type": "string",
                                      "format": "date-time"
                                    },
                                    "last_block_id": {
                                      "title": "BlockID",
                                      "type": "object",
                                      "properties": {
                                        "hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "part_set_header": {
                                          "title": "PartsetHeader",
                                          "type": "object",
                                          "properties": {
                                            "total": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "hash": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "last_commit_hash": {
                                      "title": "hashes of block data",
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "data_hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "validators_hash": {
                                      "title": "hashes from the app output from the prev block",
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "next_validators_hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "consensus_hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "app_hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "last_results_hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "evidence_hash": {
                                      "title": "consensus info",
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "proposer_address": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    }
                                  },
                                  "description": "Header defines the structure of a block header."
                                },
                                "commit": {
                                  "type": "object",
                                  "properties": {
                                    "height": {
                                      "type": "string",
                                      "format": "int64"
                                    },
                                    "round": {
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "block_id": {
                                      "title": "BlockID",
                                      "type": "object",
                                      "properties": {
                                        "hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "part_set_header": {
                                          "title": "PartsetHeader",
                                          "type": "object",
                                          "properties": {
                                            "total": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "hash": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "signatures": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "block_id_flag": {
                                            "title": "BlockIdFlag indicates which BlockID the signature is for",
                                            "type": "string",
                                            "default": "BLOCK_ID_FLAG_UNKNOWN",
                                            "enum": [
                                              "BLOCK_ID_FLAG_UNKNOWN",
                                              "BLOCK_ID_FLAG_ABSENT",
                                              "BLOCK_ID_FLAG_COMMIT",
                                              "BLOCK_ID_FLAG_NIL"
                                            ]
                                          },
                                          "validator_address": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "timestamp": {
                                            "type": "string",
                                            "format": "date-time"
                                          },
                                          "signature": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          }
                                        },
                                        "description": "CommitSig is a part of the Vote included in a Commit."
                                      }
                                    }
                                  },
                                  "description": "Commit contains the evidence that a block was committed by a set of validators."
                                }
                              }
                            },
                            "validator_set": {
                              "type": "object",
                              "properties": {
                                "validators": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "address": {
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                        "type": "string",
                                        "format": "byte"
                                      },
                                      "pub_key": {
                                        "title": "PublicKey defines the keys available for use with Validators",
                                        "type": "object",
                                        "properties": {
                                          "ed25519": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "secp256k1": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          }
                                        }
                                      },
                                      "voting_power": {
                                        "type": "string",
                                        "format": "int64"
                                      },
                                      "proposer_priority": {
                                        "type": "string",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                },
                                "proposer": {
                                  "type": "object",
                                  "properties": {
                                    "address": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "pub_key": {
                                      "title": "PublicKey defines the keys available for use with Validators",
                                      "type": "object",
                                      "properties": {
                                        "ed25519": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "secp256k1": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      }
                                    },
                                    "voting_power": {
                                      "type": "string",
                                      "format": "int64"
                                    },
                                    "proposer_priority": {
                                      "type": "string",
                                      "format": "int64"
                                    }
                                  }
                                },
                                "total_voting_power": {
                                  "type": "string",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        },
                        "common_height": {
                          "type": "string",
                          "format": "int64"
                        },
                        "byzantine_validators": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "format": "byte"
                              },
                              "pub_key": {
                                "title": "PublicKey defines the keys available for use with Validators",
                                "type": "object",
                                "properties": {
                                  "ed25519": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  },
                                  "secp256k1": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  }
                                }
                              },
                              "voting_power": {
                                "type": "string",
                                "format": "int64"
                              },
                              "proposer_priority": {
                                "type": "string",
                                "format": "int64"
                              }
                            }
                          }
                        },
                        "total_voting_power": {
                          "type": "string",
                          "format": "int64"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        }
                      },
                      "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
                    }
                  }
                }
              }
            }
          },
          "last_commit": {
            "type": "object",
            "properties": {
              "height": {
                "type": "string",
                "format": "int64"
              },
              "round": {
                "type": "integer",
                "format": "int32"
              },
              "block_id": {
                "title": "BlockID",
                "type": "object",
                "properties": {
                  "hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "part_set_header": {
                    "title": "PartsetHeader",
                    "type": "object",
                    "properties": {
                      "total": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      }
                    }
                  }
                }
              },
              "signatures": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "block_id_flag": {
                      "title": "BlockIdFlag indicates which BlockID the signature is for",
                      "type": "string",
                      "default": "BLOCK_ID_FLAG_UNKNOWN",
                      "enum": [
                        "BLOCK_ID_FLAG_UNKNOWN",
                        "BLOCK_ID_FLAG_ABSENT",
                        "BLOCK_ID_FLAG_COMMIT",
                        "BLOCK_ID_FLAG_NIL"
                      ]
                    },
                    "validator_address": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "signature": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    }
                  },
                  "description": "CommitSig is a part of the Vote included in a Commit."
                }
              }
            },
            "description": "Commit contains the evidence that a block was committed by a set of validators."
          }
        }
      },
      "tendermint.types.BlockID": {
        "title": "BlockID",
        "type": "object",
        "properties": {
          "hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "part_set_header": {
            "title": "PartsetHeader",
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "format": "int64"
              },
              "hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              }
            }
          }
        }
      },
      "tendermint.types.BlockIDFlag": {
        "title": "BlockIdFlag indicates which BlockID the signature is for",
        "type": "string",
        "default": "BLOCK_ID_FLAG_UNKNOWN",
        "enum": [
          "BLOCK_ID_FLAG_UNKNOWN",
          "BLOCK_ID_FLAG_ABSENT",
          "BLOCK_ID_FLAG_COMMIT",
          "BLOCK_ID_FLAG_NIL"
        ]
      },
      "tendermint.types.Commit": {
        "type": "object",
        "properties": {
          "height": {
            "type": "string",
            "format": "int64"
          },
          "round": {
            "type": "integer",
            "format": "int32"
          },
          "block_id": {
            "title": "BlockID",
            "type": "object",
            "properties": {
              "hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "part_set_header": {
                "title": "PartsetHeader",
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  }
                }
              }
            }
          },
          "signatures": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "block_id_flag": {
                  "title": "BlockIdFlag indicates which BlockID the signature is for",
                  "type": "string",
                  "default": "BLOCK_ID_FLAG_UNKNOWN",
                  "enum": [
                    "BLOCK_ID_FLAG_UNKNOWN",
                    "BLOCK_ID_FLAG_ABSENT",
                    "BLOCK_ID_FLAG_COMMIT",
                    "BLOCK_ID_FLAG_NIL"
                  ]
                },
                "validator_address": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "format": "byte"
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                },
                "signature": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "format": "byte"
                }
              },
              "description": "CommitSig is a part of the Vote included in a Commit."
            }
          }
        },
        "description": "Commit contains the evidence that a block was committed by a set of validators."
      },
      "tendermint.types.CommitSig": {
        "type": "object",
        "properties": {
          "block_id_flag": {
            "title": "BlockIdFlag indicates which BlockID the signature is for",
            "type": "string",
            "default": "BLOCK_ID_FLAG_UNKNOWN",
            "enum": [
              "BLOCK_ID_FLAG_UNKNOWN",
              "BLOCK_ID_FLAG_ABSENT",
              "BLOCK_ID_FLAG_COMMIT",
              "BLOCK_ID_FLAG_NIL"
            ]
          },
          "validator_address": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "signature": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          }
        },
        "description": "CommitSig is a part of the Vote included in a Commit."
      },
      "tendermint.types.Data": {
        "title": "Data contains the set of transactions included in the block",
        "type": "object",
        "properties": {
          "txs": {
            "type": "array",
            "description": "Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs.",
            "items": {
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "type": "string",
              "format": "byte"
            }
          }
        }
      },
      "tendermint.types.DuplicateVoteEvidence": {
        "type": "object",
        "properties": {
          "vote_a": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                "default": "SIGNED_MSG_TYPE_UNKNOWN",
                "enum": [
                  "SIGNED_MSG_TYPE_UNKNOWN",
                  "SIGNED_MSG_TYPE_PREVOTE",
                  "SIGNED_MSG_TYPE_PRECOMMIT",
                  "SIGNED_MSG_TYPE_PROPOSAL"
                ]
              },
              "height": {
                "type": "string",
                "format": "int64"
              },
              "round": {
                "type": "integer",
                "format": "int32"
              },
              "block_id": {
                "title": "BlockID",
                "type": "object",
                "properties": {
                  "hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "part_set_header": {
                    "title": "PartsetHeader",
                    "type": "object",
                    "properties": {
                      "total": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      }
                    }
                  }
                }
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "validator_address": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "validator_index": {
                "type": "integer",
                "format": "int32"
              },
              "signature": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                "format": "byte"
              },
              "extension": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                "format": "byte"
              },
              "extension_signature": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                "format": "byte"
              }
            },
            "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
          },
          "vote_b": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                "default": "SIGNED_MSG_TYPE_UNKNOWN",
                "enum": [
                  "SIGNED_MSG_TYPE_UNKNOWN",
                  "SIGNED_MSG_TYPE_PREVOTE",
                  "SIGNED_MSG_TYPE_PRECOMMIT",
                  "SIGNED_MSG_TYPE_PROPOSAL"
                ]
              },
              "height": {
                "type": "string",
                "format": "int64"
              },
              "round": {
                "type": "integer",
                "format": "int32"
              },
              "block_id": {
                "title": "BlockID",
                "type": "object",
                "properties": {
                  "hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "part_set_header": {
                    "title": "PartsetHeader",
                    "type": "object",
                    "properties": {
                      "total": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      }
                    }
                  }
                }
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "validator_address": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "validator_index": {
                "type": "integer",
                "format": "int32"
              },
              "signature": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                "format": "byte"
              },
              "extension": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                "format": "byte"
              },
              "extension_signature": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                "format": "byte"
              }
            },
            "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
          },
          "total_voting_power": {
            "type": "string",
            "format": "int64"
          },
          "validator_power": {
            "type": "string",
            "format": "int64"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
      },
      "tendermint.types.Evidence": {
        "type": "object",
        "properties": {
          "duplicate_vote_evidence": {
            "type": "object",
            "properties": {
              "vote_a": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                    "default": "SIGNED_MSG_TYPE_UNKNOWN",
                    "enum": [
                      "SIGNED_MSG_TYPE_UNKNOWN",
                      "SIGNED_MSG_TYPE_PREVOTE",
                      "SIGNED_MSG_TYPE_PRECOMMIT",
                      "SIGNED_MSG_TYPE_PROPOSAL"
                    ]
                  },
                  "height": {
                    "type": "string",
                    "format": "int64"
                  },
                  "round": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "block_id": {
                    "title": "BlockID",
                    "type": "object",
                    "properties": {
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "part_set_header": {
                        "title": "PartsetHeader",
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "validator_address": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "validator_index": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "signature": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                    "format": "byte"
                  },
                  "extension": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                    "format": "byte"
                  },
                  "extension_signature": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                    "format": "byte"
                  }
                },
                "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
              },
              "vote_b": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                    "default": "SIGNED_MSG_TYPE_UNKNOWN",
                    "enum": [
                      "SIGNED_MSG_TYPE_UNKNOWN",
                      "SIGNED_MSG_TYPE_PREVOTE",
                      "SIGNED_MSG_TYPE_PRECOMMIT",
                      "SIGNED_MSG_TYPE_PROPOSAL"
                    ]
                  },
                  "height": {
                    "type": "string",
                    "format": "int64"
                  },
                  "round": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "block_id": {
                    "title": "BlockID",
                    "type": "object",
                    "properties": {
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "part_set_header": {
                        "title": "PartsetHeader",
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "validator_address": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "validator_index": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "signature": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                    "format": "byte"
                  },
                  "extension": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                    "format": "byte"
                  },
                  "extension_signature": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                    "format": "byte"
                  }
                },
                "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
              },
              "total_voting_power": {
                "type": "string",
                "format": "int64"
              },
              "validator_power": {
                "type": "string",
                "format": "int64"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
          },
          "light_client_attack_evidence": {
            "type": "object",
            "properties": {
              "conflicting_block": {
                "type": "object",
                "properties": {
                  "signed_header": {
                    "type": "object",
                    "properties": {
                      "header": {
                        "type": "object",
                        "properties": {
                          "version": {
                            "title": "basic block info",
                            "type": "object",
                            "properties": {
                              "block": {
                                "type": "string",
                                "format": "uint64"
                              },
                              "app": {
                                "type": "string",
                                "format": "uint64"
                              }
                            },
                            "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                          },
                          "chain_id": {
                            "type": "string"
                          },
                          "height": {
                            "type": "string",
                            "format": "int64"
                          },
                          "time": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "last_block_id": {
                            "title": "BlockID",
                            "type": "object",
                            "properties": {
                              "hash": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "format": "byte"
                              },
                              "part_set_header": {
                                "title": "PartsetHeader",
                                "type": "object",
                                "properties": {
                                  "total": {
                                    "type": "integer",
                                    "format": "int64"
                                  },
                                  "hash": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  }
                                }
                              }
                            }
                          },
                          "last_commit_hash": {
                            "title": "hashes of block data",
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          },
                          "data_hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          },
                          "validators_hash": {
                            "title": "hashes from the app output from the prev block",
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          },
                          "next_validators_hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          },
                          "consensus_hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          },
                          "app_hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          },
                          "last_results_hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          },
                          "evidence_hash": {
                            "title": "consensus info",
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          },
                          "proposer_address": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        },
                        "description": "Header defines the structure of a block header."
                      },
                      "commit": {
                        "type": "object",
                        "properties": {
                          "height": {
                            "type": "string",
                            "format": "int64"
                          },
                          "round": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "block_id": {
                            "title": "BlockID",
                            "type": "object",
                            "properties": {
                              "hash": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "format": "byte"
                              },
                              "part_set_header": {
                                "title": "PartsetHeader",
                                "type": "object",
                                "properties": {
                                  "total": {
                                    "type": "integer",
                                    "format": "int64"
                                  },
                                  "hash": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  }
                                }
                              }
                            }
                          },
                          "signatures": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "block_id_flag": {
                                  "title": "BlockIdFlag indicates which BlockID the signature is for",
                                  "type": "string",
                                  "default": "BLOCK_ID_FLAG_UNKNOWN",
                                  "enum": [
                                    "BLOCK_ID_FLAG_UNKNOWN",
                                    "BLOCK_ID_FLAG_ABSENT",
                                    "BLOCK_ID_FLAG_COMMIT",
                                    "BLOCK_ID_FLAG_NIL"
                                  ]
                                },
                                "validator_address": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "timestamp": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                }
                              },
                              "description": "CommitSig is a part of the Vote included in a Commit."
                            }
                          }
                        },
                        "description": "Commit contains the evidence that a block was committed by a set of validators."
                      }
                    }
                  },
                  "validator_set": {
                    "type": "object",
                    "properties": {
                      "validators": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "address": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "pub_key": {
                              "title": "PublicKey defines the keys available for use with Validators",
                              "type": "object",
                              "properties": {
                                "ed25519": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "secp256k1": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                }
                              }
                            },
                            "voting_power": {
                              "type": "string",
                              "format": "int64"
                            },
                            "proposer_priority": {
                              "type": "string",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      "proposer": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          },
                          "pub_key": {
                            "title": "PublicKey defines the keys available for use with Validators",
                            "type": "object",
                            "properties": {
                              "ed25519": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "format": "byte"
                              },
                              "secp256k1": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "format": "byte"
                              }
                            }
                          },
                          "voting_power": {
                            "type": "string",
                            "format": "int64"
                          },
                          "proposer_priority": {
                            "type": "string",
                            "format": "int64"
                          }
                        }
                      },
                      "total_voting_power": {
                        "type": "string",
                        "format": "int64"
                      }
                    }
                  }
                }
              },
              "common_height": {
                "type": "string",
                "format": "int64"
              },
              "byzantine_validators": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "address": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    },
                    "pub_key": {
                      "title": "PublicKey defines the keys available for use with Validators",
                      "type": "object",
                      "properties": {
                        "ed25519": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        },
                        "secp256k1": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        }
                      }
                    },
                    "voting_power": {
                      "type": "string",
                      "format": "int64"
                    },
                    "proposer_priority": {
                      "type": "string",
                      "format": "int64"
                    }
                  }
                }
              },
              "total_voting_power": {
                "type": "string",
                "format": "int64"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
          }
        }
      },
      "tendermint.types.EvidenceList": {
        "type": "object",
        "properties": {
          "evidence": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "duplicate_vote_evidence": {
                  "type": "object",
                  "properties": {
                    "vote_a": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                          "default": "SIGNED_MSG_TYPE_UNKNOWN",
                          "enum": [
                            "SIGNED_MSG_TYPE_UNKNOWN",
                            "SIGNED_MSG_TYPE_PREVOTE",
                            "SIGNED_MSG_TYPE_PRECOMMIT",
                            "SIGNED_MSG_TYPE_PROPOSAL"
                          ]
                        },
                        "height": {
                          "type": "string",
                          "format": "int64"
                        },
                        "round": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "block_id": {
                          "title": "BlockID",
                          "type": "object",
                          "properties": {
                            "hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "part_set_header": {
                              "title": "PartsetHeader",
                              "type": "object",
                              "properties": {
                                "total": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                }
                              }
                            }
                          }
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "validator_address": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        },
                        "validator_index": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "signature": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                          "format": "byte"
                        },
                        "extension": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                          "format": "byte"
                        },
                        "extension_signature": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                          "format": "byte"
                        }
                      },
                      "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                    },
                    "vote_b": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                          "default": "SIGNED_MSG_TYPE_UNKNOWN",
                          "enum": [
                            "SIGNED_MSG_TYPE_UNKNOWN",
                            "SIGNED_MSG_TYPE_PREVOTE",
                            "SIGNED_MSG_TYPE_PRECOMMIT",
                            "SIGNED_MSG_TYPE_PROPOSAL"
                          ]
                        },
                        "height": {
                          "type": "string",
                          "format": "int64"
                        },
                        "round": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "block_id": {
                          "title": "BlockID",
                          "type": "object",
                          "properties": {
                            "hash": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "part_set_header": {
                              "title": "PartsetHeader",
                              "type": "object",
                              "properties": {
                                "total": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                }
                              }
                            }
                          }
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "validator_address": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        },
                        "validator_index": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "signature": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                          "format": "byte"
                        },
                        "extension": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                          "format": "byte"
                        },
                        "extension_signature": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                          "format": "byte"
                        }
                      },
                      "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                    },
                    "total_voting_power": {
                      "type": "string",
                      "format": "int64"
                    },
                    "validator_power": {
                      "type": "string",
                      "format": "int64"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
                },
                "light_client_attack_evidence": {
                  "type": "object",
                  "properties": {
                    "conflicting_block": {
                      "type": "object",
                      "properties": {
                        "signed_header": {
                          "type": "object",
                          "properties": {
                            "header": {
                              "type": "object",
                              "properties": {
                                "version": {
                                  "title": "basic block info",
                                  "type": "object",
                                  "properties": {
                                    "block": {
                                      "type": "string",
                                      "format": "uint64"
                                    },
                                    "app": {
                                      "type": "string",
                                      "format": "uint64"
                                    }
                                  },
                                  "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                                },
                                "chain_id": {
                                  "type": "string"
                                },
                                "height": {
                                  "type": "string",
                                  "format": "int64"
                                },
                                "time": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "last_block_id": {
                                  "title": "BlockID",
                                  "type": "object",
                                  "properties": {
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "part_set_header": {
                                      "title": "PartsetHeader",
                                      "type": "object",
                                      "properties": {
                                        "total": {
                                          "type": "integer",
                                          "format": "int64"
                                        },
                                        "hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      }
                                    }
                                  }
                                },
                                "last_commit_hash": {
                                  "title": "hashes of block data",
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "data_hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "validators_hash": {
                                  "title": "hashes from the app output from the prev block",
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "next_validators_hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "consensus_hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "app_hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "last_results_hash": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "evidence_hash": {
                                  "title": "consensus info",
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "proposer_address": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                }
                              },
                              "description": "Header defines the structure of a block header."
                            },
                            "commit": {
                              "type": "object",
                              "properties": {
                                "height": {
                                  "type": "string",
                                  "format": "int64"
                                },
                                "round": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "block_id": {
                                  "title": "BlockID",
                                  "type": "object",
                                  "properties": {
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "part_set_header": {
                                      "title": "PartsetHeader",
                                      "type": "object",
                                      "properties": {
                                        "total": {
                                          "type": "integer",
                                          "format": "int64"
                                        },
                                        "hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      }
                                    }
                                  }
                                },
                                "signatures": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "block_id_flag": {
                                        "title": "BlockIdFlag indicates which BlockID the signature is for",
                                        "type": "string",
                                        "default": "BLOCK_ID_FLAG_UNKNOWN",
                                        "enum": [
                                          "BLOCK_ID_FLAG_UNKNOWN",
                                          "BLOCK_ID_FLAG_ABSENT",
                                          "BLOCK_ID_FLAG_COMMIT",
                                          "BLOCK_ID_FLAG_NIL"
                                        ]
                                      },
                                      "validator_address": {
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                        "type": "string",
                                        "format": "byte"
                                      },
                                      "timestamp": {
                                        "type": "string",
                                        "format": "date-time"
                                      },
                                      "signature": {
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                        "type": "string",
                                        "format": "byte"
                                      }
                                    },
                                    "description": "CommitSig is a part of the Vote included in a Commit."
                                  }
                                }
                              },
                              "description": "Commit contains the evidence that a block was committed by a set of validators."
                            }
                          }
                        },
                        "validator_set": {
                          "type": "object",
                          "properties": {
                            "validators": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  },
                                  "pub_key": {
                                    "title": "PublicKey defines the keys available for use with Validators",
                                    "type": "object",
                                    "properties": {
                                      "ed25519": {
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                        "type": "string",
                                        "format": "byte"
                                      },
                                      "secp256k1": {
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                        "type": "string",
                                        "format": "byte"
                                      }
                                    }
                                  },
                                  "voting_power": {
                                    "type": "string",
                                    "format": "int64"
                                  },
                                  "proposer_priority": {
                                    "type": "string",
                                    "format": "int64"
                                  }
                                }
                              }
                            },
                            "proposer": {
                              "type": "object",
                              "properties": {
                                "address": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "pub_key": {
                                  "title": "PublicKey defines the keys available for use with Validators",
                                  "type": "object",
                                  "properties": {
                                    "ed25519": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "secp256k1": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    }
                                  }
                                },
                                "voting_power": {
                                  "type": "string",
                                  "format": "int64"
                                },
                                "proposer_priority": {
                                  "type": "string",
                                  "format": "int64"
                                }
                              }
                            },
                            "total_voting_power": {
                              "type": "string",
                              "format": "int64"
                            }
                          }
                        }
                      }
                    },
                    "common_height": {
                      "type": "string",
                      "format": "int64"
                    },
                    "byzantine_validators": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          },
                          "pub_key": {
                            "title": "PublicKey defines the keys available for use with Validators",
                            "type": "object",
                            "properties": {
                              "ed25519": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "format": "byte"
                              },
                              "secp256k1": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "format": "byte"
                              }
                            }
                          },
                          "voting_power": {
                            "type": "string",
                            "format": "int64"
                          },
                          "proposer_priority": {
                            "type": "string",
                            "format": "int64"
                          }
                        }
                      }
                    },
                    "total_voting_power": {
                      "type": "string",
                      "format": "int64"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
                }
              }
            }
          }
        }
      },
      "tendermint.types.Header": {
        "type": "object",
        "properties": {
          "version": {
            "title": "basic block info",
            "type": "object",
            "properties": {
              "block": {
                "type": "string",
                "format": "uint64"
              },
              "app": {
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
          },
          "chain_id": {
            "type": "string"
          },
          "height": {
            "type": "string",
            "format": "int64"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "last_block_id": {
            "title": "BlockID",
            "type": "object",
            "properties": {
              "hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "part_set_header": {
                "title": "PartsetHeader",
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  }
                }
              }
            }
          },
          "last_commit_hash": {
            "title": "hashes of block data",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "data_hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "validators_hash": {
            "title": "hashes from the app output from the prev block",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "next_validators_hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "consensus_hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "app_hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "last_results_hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "evidence_hash": {
            "title": "consensus info",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "proposer_address": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          }
        },
        "description": "Header defines the structure of a block header."
      },
      "tendermint.types.LightBlock": {
        "type": "object",
        "properties": {
          "signed_header": {
            "type": "object",
            "properties": {
              "header": {
                "type": "object",
                "properties": {
                  "version": {
                    "title": "basic block info",
                    "type": "object",
                    "properties": {
                      "block": {
                        "type": "string",
                        "format": "uint64"
                      },
                      "app": {
                        "type": "string",
                        "format": "uint64"
                      }
                    },
                    "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                  },
                  "chain_id": {
                    "type": "string"
                  },
                  "height": {
                    "type": "string",
                    "format": "int64"
                  },
                  "time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "last_block_id": {
                    "title": "BlockID",
                    "type": "object",
                    "properties": {
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "part_set_header": {
                        "title": "PartsetHeader",
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  },
                  "last_commit_hash": {
                    "title": "hashes of block data",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "data_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "validators_hash": {
                    "title": "hashes from the app output from the prev block",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "next_validators_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "consensus_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "app_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "last_results_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "evidence_hash": {
                    "title": "consensus info",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "proposer_address": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  }
                },
                "description": "Header defines the structure of a block header."
              },
              "commit": {
                "type": "object",
                "properties": {
                  "height": {
                    "type": "string",
                    "format": "int64"
                  },
                  "round": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "block_id": {
                    "title": "BlockID",
                    "type": "object",
                    "properties": {
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "part_set_header": {
                        "title": "PartsetHeader",
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  },
                  "signatures": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "block_id_flag": {
                          "title": "BlockIdFlag indicates which BlockID the signature is for",
                          "type": "string",
                          "default": "BLOCK_ID_FLAG_UNKNOWN",
                          "enum": [
                            "BLOCK_ID_FLAG_UNKNOWN",
                            "BLOCK_ID_FLAG_ABSENT",
                            "BLOCK_ID_FLAG_COMMIT",
                            "BLOCK_ID_FLAG_NIL"
                          ]
                        },
                        "validator_address": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "signature": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        }
                      },
                      "description": "CommitSig is a part of the Vote included in a Commit."
                    }
                  }
                },
                "description": "Commit contains the evidence that a block was committed by a set of validators."
              }
            }
          },
          "validator_set": {
            "type": "object",
            "properties": {
              "validators": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "address": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    },
                    "pub_key": {
                      "title": "PublicKey defines the keys available for use with Validators",
                      "type": "object",
                      "properties": {
                        "ed25519": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        },
                        "secp256k1": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        }
                      }
                    },
                    "voting_power": {
                      "type": "string",
                      "format": "int64"
                    },
                    "proposer_priority": {
                      "type": "string",
                      "format": "int64"
                    }
                  }
                }
              },
              "proposer": {
                "type": "object",
                "properties": {
                  "address": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "pub_key": {
                    "title": "PublicKey defines the keys available for use with Validators",
                    "type": "object",
                    "properties": {
                      "ed25519": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "secp256k1": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      }
                    }
                  },
                  "voting_power": {
                    "type": "string",
                    "format": "int64"
                  },
                  "proposer_priority": {
                    "type": "string",
                    "format": "int64"
                  }
                }
              },
              "total_voting_power": {
                "type": "string",
                "format": "int64"
              }
            }
          }
        }
      },
      "tendermint.types.LightClientAttackEvidence": {
        "type": "object",
        "properties": {
          "conflicting_block": {
            "type": "object",
            "properties": {
              "signed_header": {
                "type": "object",
                "properties": {
                  "header": {
                    "type": "object",
                    "properties": {
                      "version": {
                        "title": "basic block info",
                        "type": "object",
                        "properties": {
                          "block": {
                            "type": "string",
                            "format": "uint64"
                          },
                          "app": {
                            "type": "string",
                            "format": "uint64"
                          }
                        },
                        "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                      },
                      "chain_id": {
                        "type": "string"
                      },
                      "height": {
                        "type": "string",
                        "format": "int64"
                      },
                      "time": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "last_block_id": {
                        "title": "BlockID",
                        "type": "object",
                        "properties": {
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          },
                          "part_set_header": {
                            "title": "PartsetHeader",
                            "type": "object",
                            "properties": {
                              "total": {
                                "type": "integer",
                                "format": "int64"
                              },
                              "hash": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "format": "byte"
                              }
                            }
                          }
                        }
                      },
                      "last_commit_hash": {
                        "title": "hashes of block data",
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "data_hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "validators_hash": {
                        "title": "hashes from the app output from the prev block",
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "next_validators_hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "consensus_hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "app_hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "last_results_hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "evidence_hash": {
                        "title": "consensus info",
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "proposer_address": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      }
                    },
                    "description": "Header defines the structure of a block header."
                  },
                  "commit": {
                    "type": "object",
                    "properties": {
                      "height": {
                        "type": "string",
                        "format": "int64"
                      },
                      "round": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "block_id": {
                        "title": "BlockID",
                        "type": "object",
                        "properties": {
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          },
                          "part_set_header": {
                            "title": "PartsetHeader",
                            "type": "object",
                            "properties": {
                              "total": {
                                "type": "integer",
                                "format": "int64"
                              },
                              "hash": {
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                "type": "string",
                                "format": "byte"
                              }
                            }
                          }
                        }
                      },
                      "signatures": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "block_id_flag": {
                              "title": "BlockIdFlag indicates which BlockID the signature is for",
                              "type": "string",
                              "default": "BLOCK_ID_FLAG_UNKNOWN",
                              "enum": [
                                "BLOCK_ID_FLAG_UNKNOWN",
                                "BLOCK_ID_FLAG_ABSENT",
                                "BLOCK_ID_FLAG_COMMIT",
                                "BLOCK_ID_FLAG_NIL"
                              ]
                            },
                            "validator_address": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "signature": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            }
                          },
                          "description": "CommitSig is a part of the Vote included in a Commit."
                        }
                      }
                    },
                    "description": "Commit contains the evidence that a block was committed by a set of validators."
                  }
                }
              },
              "validator_set": {
                "type": "object",
                "properties": {
                  "validators": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        },
                        "pub_key": {
                          "title": "PublicKey defines the keys available for use with Validators",
                          "type": "object",
                          "properties": {
                            "ed25519": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            },
                            "secp256k1": {
                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                              "type": "string",
                              "format": "byte"
                            }
                          }
                        },
                        "voting_power": {
                          "type": "string",
                          "format": "int64"
                        },
                        "proposer_priority": {
                          "type": "string",
                          "format": "int64"
                        }
                      }
                    }
                  },
                  "proposer": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "pub_key": {
                        "title": "PublicKey defines the keys available for use with Validators",
                        "type": "object",
                        "properties": {
                          "ed25519": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          },
                          "secp256k1": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      },
                      "voting_power": {
                        "type": "string",
                        "format": "int64"
                      },
                      "proposer_priority": {
                        "type": "string",
                        "format": "int64"
                      }
                    }
                  },
                  "total_voting_power": {
                    "type": "string",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "common_height": {
            "type": "string",
            "format": "int64"
          },
          "byzantine_validators": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "format": "byte"
                },
                "pub_key": {
                  "title": "PublicKey defines the keys available for use with Validators",
                  "type": "object",
                  "properties": {
                    "ed25519": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    },
                    "secp256k1": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    }
                  }
                },
                "voting_power": {
                  "type": "string",
                  "format": "int64"
                },
                "proposer_priority": {
                  "type": "string",
                  "format": "int64"
                }
              }
            }
          },
          "total_voting_power": {
            "type": "string",
            "format": "int64"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
      },
      "tendermint.types.PartSetHeader": {
        "title": "PartsetHeader",
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          }
        }
      },
      "tendermint.types.SignedHeader": {
        "type": "object",
        "properties": {
          "header": {
            "type": "object",
            "properties": {
              "version": {
                "title": "basic block info",
                "type": "object",
                "properties": {
                  "block": {
                    "type": "string",
                    "format": "uint64"
                  },
                  "app": {
                    "type": "string",
                    "format": "uint64"
                  }
                },
                "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
              },
              "chain_id": {
                "type": "string"
              },
              "height": {
                "type": "string",
                "format": "int64"
              },
              "time": {
                "type": "string",
                "format": "date-time"
              },
              "last_block_id": {
                "title": "BlockID",
                "type": "object",
                "properties": {
                  "hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "part_set_header": {
                    "title": "PartsetHeader",
                    "type": "object",
                    "properties": {
                      "total": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      }
                    }
                  }
                }
              },
              "last_commit_hash": {
                "title": "hashes of block data",
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "data_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "validators_hash": {
                "title": "hashes from the app output from the prev block",
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "next_validators_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "consensus_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "app_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "last_results_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "evidence_hash": {
                "title": "consensus info",
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "proposer_address": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              }
            },
            "description": "Header defines the structure of a block header."
          },
          "commit": {
            "type": "object",
            "properties": {
              "height": {
                "type": "string",
                "format": "int64"
              },
              "round": {
                "type": "integer",
                "format": "int32"
              },
              "block_id": {
                "title": "BlockID",
                "type": "object",
                "properties": {
                  "hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "part_set_header": {
                    "title": "PartsetHeader",
                    "type": "object",
                    "properties": {
                      "total": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      }
                    }
                  }
                }
              },
              "signatures": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "block_id_flag": {
                      "title": "BlockIdFlag indicates which BlockID the signature is for",
                      "type": "string",
                      "default": "BLOCK_ID_FLAG_UNKNOWN",
                      "enum": [
                        "BLOCK_ID_FLAG_UNKNOWN",
                        "BLOCK_ID_FLAG_ABSENT",
                        "BLOCK_ID_FLAG_COMMIT",
                        "BLOCK_ID_FLAG_NIL"
                      ]
                    },
                    "validator_address": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "signature": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    }
                  },
                  "description": "CommitSig is a part of the Vote included in a Commit."
                }
              }
            },
            "description": "Commit contains the evidence that a block was committed by a set of validators."
          }
        }
      },
      "tendermint.types.SignedMsgType": {
        "type": "string",
        "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
        "default": "SIGNED_MSG_TYPE_UNKNOWN",
        "enum": [
          "SIGNED_MSG_TYPE_UNKNOWN",
          "SIGNED_MSG_TYPE_PREVOTE",
          "SIGNED_MSG_TYPE_PRECOMMIT",
          "SIGNED_MSG_TYPE_PROPOSAL"
        ]
      },
      "tendermint.types.Validator": {
        "type": "object",
        "properties": {
          "address": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "pub_key": {
            "title": "PublicKey defines the keys available for use with Validators",
            "type": "object",
            "properties": {
              "ed25519": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "secp256k1": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              }
            }
          },
          "voting_power": {
            "type": "string",
            "format": "int64"
          },
          "proposer_priority": {
            "type": "string",
            "format": "int64"
          }
        }
      },
      "tendermint.types.ValidatorSet": {
        "type": "object",
        "properties": {
          "validators": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "format": "byte"
                },
                "pub_key": {
                  "title": "PublicKey defines the keys available for use with Validators",
                  "type": "object",
                  "properties": {
                    "ed25519": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    },
                    "secp256k1": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    }
                  }
                },
                "voting_power": {
                  "type": "string",
                  "format": "int64"
                },
                "proposer_priority": {
                  "type": "string",
                  "format": "int64"
                }
              }
            }
          },
          "proposer": {
            "type": "object",
            "properties": {
              "address": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "pub_key": {
                "title": "PublicKey defines the keys available for use with Validators",
                "type": "object",
                "properties": {
                  "ed25519": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "secp256k1": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  }
                }
              },
              "voting_power": {
                "type": "string",
                "format": "int64"
              },
              "proposer_priority": {
                "type": "string",
                "format": "int64"
              }
            }
          },
          "total_voting_power": {
            "type": "string",
            "format": "int64"
          }
        }
      },
      "tendermint.types.Vote": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
            "default": "SIGNED_MSG_TYPE_UNKNOWN",
            "enum": [
              "SIGNED_MSG_TYPE_UNKNOWN",
              "SIGNED_MSG_TYPE_PREVOTE",
              "SIGNED_MSG_TYPE_PRECOMMIT",
              "SIGNED_MSG_TYPE_PROPOSAL"
            ]
          },
          "height": {
            "type": "string",
            "format": "int64"
          },
          "round": {
            "type": "integer",
            "format": "int32"
          },
          "block_id": {
            "title": "BlockID",
            "type": "object",
            "properties": {
              "hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "part_set_header": {
                "title": "PartsetHeader",
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  }
                }
              }
            }
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "validator_address": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "validator_index": {
            "type": "integer",
            "format": "int32"
          },
          "signature": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
            "format": "byte"
          },
          "extension": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
            "format": "byte"
          },
          "extension_signature": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
            "format": "byte"
          }
        },
        "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
      },
      "tendermint.version.Consensus": {
        "type": "object",
        "properties": {
          "block": {
            "type": "string",
            "format": "uint64"
          },
          "app": {
            "type": "string",
            "format": "uint64"
          }
        },
        "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
      },
      "cosmos.base.node.v1beta1.ConfigResponse": {
        "type": "object",
        "properties": {
          "minimum_gas_price": {
            "type": "string"
          },
          "pruning_keep_recent": {
            "title": "pruning settings",
            "type": "string"
          },
          "pruning_interval": {
            "type": "string"
          }
        },
        "description": "ConfigResponse defines the response structure for the Config gRPC query."
      },
      "cosmos.base.node.v1beta1.StatusResponse": {
        "type": "object",
        "properties": {
          "earliest_store_height": {
            "type": "string",
            "format": "uint64"
          },
          "height": {
            "type": "string",
            "format": "uint64"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "app_hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "validator_hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          }
        },
        "description": "StateResponse defines the response structure for the status of a node."
      },
      "cosmos.base.v1beta1.DecCoin": {
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        },
        "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
      },
      "cosmos.distribution.v1beta1.DelegationDelegatorReward": {
        "type": "object",
        "properties": {
          "validator_address": {
            "type": "string"
          },
          "reward": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
            }
          }
        },
        "description": "DelegationDelegatorReward represents the properties\nof a delegator's delegation reward."
      },
      "cosmos.distribution.v1beta1.Params": {
        "type": "object",
        "properties": {
          "community_tax": {
            "type": "string"
          },
          "base_proposer_reward": {
            "type": "string",
            "description": "Deprecated: The base_proposer_reward field is deprecated and is no longer used\nin the x/distribution module's reward mechanism."
          },
          "bonus_proposer_reward": {
            "type": "string",
            "description": "Deprecated: The bonus_proposer_reward field is deprecated and is no longer used\nin the x/distribution module's reward mechanism."
          },
          "withdraw_addr_enabled": {
            "type": "boolean"
          }
        },
        "description": "Params defines the set of params for the distribution module."
      },
      "cosmos.distribution.v1beta1.QueryCommunityPoolResponse": {
        "type": "object",
        "properties": {
          "pool": {
            "type": "array",
            "description": "pool defines community pool's coins.",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
            }
          }
        },
        "description": "QueryCommunityPoolResponse is the response type for the Query/CommunityPool\nRPC method."
      },
      "cosmos.distribution.v1beta1.QueryDelegationRewardsResponse": {
        "type": "object",
        "properties": {
          "rewards": {
            "type": "array",
            "description": "rewards defines the rewards accrued by a delegation.",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
            }
          }
        },
        "description": "QueryDelegationRewardsResponse is the response type for the\nQuery/DelegationRewards RPC method."
      },
      "cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse": {
        "type": "object",
        "properties": {
          "rewards": {
            "type": "array",
            "description": "rewards defines all the rewards accrued by a delegator.",
            "items": {
              "type": "object",
              "properties": {
                "validator_address": {
                  "type": "string"
                },
                "reward": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "denom": {
                        "type": "string"
                      },
                      "amount": {
                        "type": "string"
                      }
                    },
                    "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
                  }
                }
              },
              "description": "DelegationDelegatorReward represents the properties\nof a delegator's delegation reward."
            }
          },
          "total": {
            "type": "array",
            "description": "total defines the sum of all the rewards.",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
            }
          }
        },
        "description": "QueryDelegationTotalRewardsResponse is the response type for the\nQuery/DelegationTotalRewards RPC method."
      },
      "cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse": {
        "type": "object",
        "properties": {
          "validators": {
            "type": "array",
            "description": "validators defines the validators a delegator is delegating for.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "QueryDelegatorValidatorsResponse is the response type for the\nQuery/DelegatorValidators RPC method."
      },
      "cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse": {
        "type": "object",
        "properties": {
          "withdraw_address": {
            "type": "string",
            "description": "withdraw_address defines the delegator address to query for."
          }
        },
        "description": "QueryDelegatorWithdrawAddressResponse is the response type for the\nQuery/DelegatorWithdrawAddress RPC method."
      },
      "cosmos.distribution.v1beta1.QueryParamsResponse": {
        "type": "object",
        "properties": {
          "params": {
            "type": "object",
            "properties": {
              "community_tax": {
                "type": "string"
              },
              "base_proposer_reward": {
                "type": "string",
                "description": "Deprecated: The base_proposer_reward field is deprecated and is no longer used\nin the x/distribution module's reward mechanism."
              },
              "bonus_proposer_reward": {
                "type": "string",
                "description": "Deprecated: The bonus_proposer_reward field is deprecated and is no longer used\nin the x/distribution module's reward mechanism."
              },
              "withdraw_addr_enabled": {
                "type": "boolean"
              }
            },
            "description": "params defines the parameters of the module."
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "cosmos.distribution.v1beta1.QueryValidatorCommissionResponse": {
        "title": "QueryValidatorCommissionResponse is the response type for the\nQuery/ValidatorCommission RPC method",
        "type": "object",
        "properties": {
          "commission": {
            "type": "object",
            "properties": {
              "commission": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
                }
              }
            },
            "description": "commission defines the commission the validator received."
          }
        }
      },
      "cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse": {
        "type": "object",
        "properties": {
          "operator_address": {
            "type": "string",
            "description": "operator_address defines the validator operator address."
          },
          "self_bond_rewards": {
            "type": "array",
            "description": "self_bond_rewards defines the self delegations rewards.",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
            }
          },
          "commission": {
            "type": "array",
            "description": "commission defines the commission the validator received.",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
            }
          }
        },
        "description": "QueryValidatorDistributionInfoResponse is the response type for the Query/ValidatorDistributionInfo RPC method."
      },
      "cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse": {
        "type": "object",
        "properties": {
          "rewards": {
            "type": "object",
            "properties": {
              "rewards": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
                }
              }
            },
            "description": "ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards\nfor a validator inexpensive to track, allows simple sanity checks."
          }
        },
        "description": "QueryValidatorOutstandingRewardsResponse is the response type for the\nQuery/ValidatorOutstandingRewards RPC method."
      },
      "cosmos.distribution.v1beta1.QueryValidatorSlashesResponse": {
        "type": "object",
        "properties": {
          "slashes": {
            "type": "array",
            "description": "slashes defines the slashes the validator received.",
            "items": {
              "type": "object",
              "properties": {
                "validator_period": {
                  "type": "string",
                  "format": "uint64"
                },
                "fraction": {
                  "type": "string"
                }
              },
              "description": "ValidatorSlashEvent represents a validator slash event.\nHeight is implicit within the store key.\nThis is needed to calculate appropriate amount of staking tokens\nfor delegations which are withdrawn after a slash has occurred."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryValidatorSlashesResponse is the response type for the\nQuery/ValidatorSlashes RPC method."
      },
      "cosmos.distribution.v1beta1.ValidatorAccumulatedCommission": {
        "type": "object",
        "properties": {
          "commission": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
            }
          }
        },
        "description": "ValidatorAccumulatedCommission represents accumulated commission\nfor a validator kept as a running counter, can be withdrawn at any time."
      },
      "cosmos.distribution.v1beta1.ValidatorOutstandingRewards": {
        "type": "object",
        "properties": {
          "rewards": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
            }
          }
        },
        "description": "ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards\nfor a validator inexpensive to track, allows simple sanity checks."
      },
      "cosmos.distribution.v1beta1.ValidatorSlashEvent": {
        "type": "object",
        "properties": {
          "validator_period": {
            "type": "string",
            "format": "uint64"
          },
          "fraction": {
            "type": "string"
          }
        },
        "description": "ValidatorSlashEvent represents a validator slash event.\nHeight is implicit within the store key.\nThis is needed to calculate appropriate amount of staking tokens\nfor delegations which are withdrawn after a slash has occurred."
      },
      "cosmos.evidence.v1beta1.QueryAllEvidenceResponse": {
        "type": "object",
        "properties": {
          "evidence": {
            "type": "array",
            "description": "evidence returns all evidences.",
            "items": {
              "type": "object",
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "byte"
                }
              },
              "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC\nmethod."
      },
      "cosmos.evidence.v1beta1.QueryEvidenceResponse": {
        "type": "object",
        "properties": {
          "evidence": {
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
          }
        },
        "description": "QueryEvidenceResponse is the response type for the Query/Evidence RPC method."
      },
      "cosmos.gov.v1beta1.Deposit": {
        "type": "object",
        "properties": {
          "proposal_id": {
            "type": "string",
            "description": "proposal_id defines the unique id of the proposal.",
            "format": "uint64"
          },
          "depositor": {
            "type": "string",
            "description": "depositor defines the deposit addresses from the proposals."
          },
          "amount": {
            "type": "array",
            "description": "amount to be deposited by depositor.",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
            }
          }
        },
        "description": "Deposit defines an amount deposited by an account address to an active\nproposal."
      },
      "cosmos.gov.v1beta1.DepositParams": {
        "type": "object",
        "properties": {
          "min_deposit": {
            "type": "array",
            "description": "Minimum deposit for a proposal to enter voting period.",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
            }
          },
          "max_deposit_period": {
            "type": "string",
            "description": "Maximum period for Atom holders to deposit on a proposal. Initial value: 2\nmonths."
          }
        },
        "description": "DepositParams defines the params for deposits on governance proposals."
      },
      "cosmos.gov.v1beta1.Proposal": {
        "type": "object",
        "properties": {
          "proposal_id": {
            "type": "string",
            "description": "proposal_id defines the unique id of the proposal.",
            "format": "uint64"
          },
          "content": {
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
          },
          "status": {
            "type": "string",
            "description": "status defines the proposal status.",
            "default": "PROPOSAL_STATUS_UNSPECIFIED",
            "enum": [
              "PROPOSAL_STATUS_UNSPECIFIED",
              "PROPOSAL_STATUS_DEPOSIT_PERIOD",
              "PROPOSAL_STATUS_VOTING_PERIOD",
              "PROPOSAL_STATUS_PASSED",
              "PROPOSAL_STATUS_REJECTED",
              "PROPOSAL_STATUS_FAILED"
            ]
          },
          "final_tally_result": {
            "type": "object",
            "properties": {
              "yes": {
                "type": "string",
                "description": "yes is the number of yes votes on a proposal."
              },
              "abstain": {
                "type": "string",
                "description": "abstain is the number of abstain votes on a proposal."
              },
              "no": {
                "type": "string",
                "description": "no is the number of no votes on a proposal."
              },
              "no_with_veto": {
                "type": "string",
                "description": "no_with_veto is the number of no with veto votes on a proposal."
              }
            },
            "description": "final_tally_result is the final tally result of the proposal. When\nquerying a proposal via gRPC, this field is not populated until the\nproposal's voting period has ended."
          },
          "submit_time": {
            "type": "string",
            "description": "submit_time is the time of proposal submission.",
            "format": "date-time"
          },
          "deposit_end_time": {
            "type": "string",
            "description": "deposit_end_time is the end time for deposition.",
            "format": "date-time"
          },
          "total_deposit": {
            "type": "array",
            "description": "total_deposit is the total deposit on the proposal.",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
            }
          },
          "voting_start_time": {
            "type": "string",
            "description": "voting_start_time is the starting time to vote on a proposal.",
            "format": "date-time"
          },
          "voting_end_time": {
            "type": "string",
            "description": "voting_end_time is the end time of voting on a proposal.",
            "format": "date-time"
          }
        },
        "description": "Proposal defines the core field members of a governance proposal."
      },
      "cosmos.gov.v1beta1.ProposalStatus": {
        "type": "string",
        "description": "ProposalStatus enumerates the valid statuses of a proposal.\n\n - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.\n - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit\nperiod.\n - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting\nperiod.\n - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has\npassed.\n - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has\nbeen rejected.\n - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has\nfailed.",
        "default": "PROPOSAL_STATUS_UNSPECIFIED",
        "enum": [
          "PROPOSAL_STATUS_UNSPECIFIED",
          "PROPOSAL_STATUS_DEPOSIT_PERIOD",
          "PROPOSAL_STATUS_VOTING_PERIOD",
          "PROPOSAL_STATUS_PASSED",
          "PROPOSAL_STATUS_REJECTED",
          "PROPOSAL_STATUS_FAILED"
        ]
      },
      "cosmos.gov.v1beta1.QueryDepositResponse": {
        "type": "object",
        "properties": {
          "deposit": {
            "type": "object",
            "properties": {
              "proposal_id": {
                "type": "string",
                "description": "proposal_id defines the unique id of the proposal.",
                "format": "uint64"
              },
              "depositor": {
                "type": "string",
                "description": "depositor defines the deposit addresses from the proposals."
              },
              "amount": {
                "type": "array",
                "description": "amount to be deposited by depositor.",
                "items": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                }
              }
            },
            "description": "Deposit defines an amount deposited by an account address to an active\nproposal."
          }
        },
        "description": "QueryDepositResponse is the response type for the Query/Deposit RPC method."
      },
      "cosmos.gov.v1beta1.QueryDepositsResponse": {
        "type": "object",
        "properties": {
          "deposits": {
            "type": "array",
            "description": "deposits defines the requested deposits.",
            "items": {
              "type": "object",
              "properties": {
                "proposal_id": {
                  "type": "string",
                  "description": "proposal_id defines the unique id of the proposal.",
                  "format": "uint64"
                },
                "depositor": {
                  "type": "string",
                  "description": "depositor defines the deposit addresses from the proposals."
                },
                "amount": {
                  "type": "array",
                  "description": "amount to be deposited by depositor.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "denom": {
                        "type": "string"
                      },
                      "amount": {
                        "type": "string"
                      }
                    },
                    "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                  }
                }
              },
              "description": "Deposit defines an amount deposited by an account address to an active\nproposal."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryDepositsResponse is the response type for the Query/Deposits RPC method."
      },
      "cosmos.gov.v1beta1.QueryParamsResponse": {
        "type": "object",
        "properties": {
          "voting_params": {
            "type": "object",
            "properties": {
              "voting_period": {
                "type": "string",
                "description": "Duration of the voting period."
              }
            },
            "description": "voting_params defines the parameters related to voting."
          },
          "deposit_params": {
            "type": "object",
            "properties": {
              "min_deposit": {
                "type": "array",
                "description": "Minimum deposit for a proposal to enter voting period.",
                "items": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                }
              },
              "max_deposit_period": {
                "type": "string",
                "description": "Maximum period for Atom holders to deposit on a proposal. Initial value: 2\nmonths."
              }
            },
            "description": "deposit_params defines the parameters related to deposit."
          },
          "tally_params": {
            "type": "object",
            "properties": {
              "quorum": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Minimum percentage of total stake needed to vote for a result to be\nconsidered valid.",
                "format": "byte"
              },
              "threshold": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.",
                "format": "byte"
              },
              "veto_threshold": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Minimum value of Veto votes to Total votes ratio for proposal to be\nvetoed. Default value: 1/3.",
                "format": "byte"
              }
            },
            "description": "tally_params defines the parameters related to tally."
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "cosmos.gov.v1beta1.QueryProposalResponse": {
        "type": "object",
        "properties": {
          "proposal": {
            "type": "object",
            "properties": {
              "proposal_id": {
                "type": "string",
                "description": "proposal_id defines the unique id of the proposal.",
                "format": "uint64"
              },
              "content": {
                "type": "object",
                "properties": {
                  "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                  },
                  "value": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                  }
                },
                "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
              },
              "status": {
                "type": "string",
                "description": "status defines the proposal status.",
                "default": "PROPOSAL_STATUS_UNSPECIFIED",
                "enum": [
                  "PROPOSAL_STATUS_UNSPECIFIED",
                  "PROPOSAL_STATUS_DEPOSIT_PERIOD",
                  "PROPOSAL_STATUS_VOTING_PERIOD",
                  "PROPOSAL_STATUS_PASSED",
                  "PROPOSAL_STATUS_REJECTED",
                  "PROPOSAL_STATUS_FAILED"
                ]
              },
              "final_tally_result": {
                "type": "object",
                "properties": {
                  "yes": {
                    "type": "string",
                    "description": "yes is the number of yes votes on a proposal."
                  },
                  "abstain": {
                    "type": "string",
                    "description": "abstain is the number of abstain votes on a proposal."
                  },
                  "no": {
                    "type": "string",
                    "description": "no is the number of no votes on a proposal."
                  },
                  "no_with_veto": {
                    "type": "string",
                    "description": "no_with_veto is the number of no with veto votes on a proposal."
                  }
                },
                "description": "final_tally_result is the final tally result of the proposal. When\nquerying a proposal via gRPC, this field is not populated until the\nproposal's voting period has ended."
              },
              "submit_time": {
                "type": "string",
                "description": "submit_time is the time of proposal submission.",
                "format": "date-time"
              },
              "deposit_end_time": {
                "type": "string",
                "description": "deposit_end_time is the end time for deposition.",
                "format": "date-time"
              },
              "total_deposit": {
                "type": "array",
                "description": "total_deposit is the total deposit on the proposal.",
                "items": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                }
              },
              "voting_start_time": {
                "type": "string",
                "description": "voting_start_time is the starting time to vote on a proposal.",
                "format": "date-time"
              },
              "voting_end_time": {
                "type": "string",
                "description": "voting_end_time is the end time of voting on a proposal.",
                "format": "date-time"
              }
            },
            "description": "Proposal defines the core field members of a governance proposal."
          }
        },
        "description": "QueryProposalResponse is the response type for the Query/Proposal RPC method."
      },
      "cosmos.gov.v1beta1.QueryProposalsResponse": {
        "type": "object",
        "properties": {
          "proposals": {
            "type": "array",
            "description": "proposals defines all the requested governance proposals.",
            "items": {
              "type": "object",
              "properties": {
                "proposal_id": {
                  "type": "string",
                  "description": "proposal_id defines the unique id of the proposal.",
                  "format": "uint64"
                },
                "content": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                },
                "status": {
                  "type": "string",
                  "description": "status defines the proposal status.",
                  "default": "PROPOSAL_STATUS_UNSPECIFIED",
                  "enum": [
                    "PROPOSAL_STATUS_UNSPECIFIED",
                    "PROPOSAL_STATUS_DEPOSIT_PERIOD",
                    "PROPOSAL_STATUS_VOTING_PERIOD",
                    "PROPOSAL_STATUS_PASSED",
                    "PROPOSAL_STATUS_REJECTED",
                    "PROPOSAL_STATUS_FAILED"
                  ]
                },
                "final_tally_result": {
                  "type": "object",
                  "properties": {
                    "yes": {
                      "type": "string",
                      "description": "yes is the number of yes votes on a proposal."
                    },
                    "abstain": {
                      "type": "string",
                      "description": "abstain is the number of abstain votes on a proposal."
                    },
                    "no": {
                      "type": "string",
                      "description": "no is the number of no votes on a proposal."
                    },
                    "no_with_veto": {
                      "type": "string",
                      "description": "no_with_veto is the number of no with veto votes on a proposal."
                    }
                  },
                  "description": "final_tally_result is the final tally result of the proposal. When\nquerying a proposal via gRPC, this field is not populated until the\nproposal's voting period has ended."
                },
                "submit_time": {
                  "type": "string",
                  "description": "submit_time is the time of proposal submission.",
                  "format": "date-time"
                },
                "deposit_end_time": {
                  "type": "string",
                  "description": "deposit_end_time is the end time for deposition.",
                  "format": "date-time"
                },
                "total_deposit": {
                  "type": "array",
                  "description": "total_deposit is the total deposit on the proposal.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "denom": {
                        "type": "string"
                      },
                      "amount": {
                        "type": "string"
                      }
                    },
                    "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                  }
                },
                "voting_start_time": {
                  "type": "string",
                  "description": "voting_start_time is the starting time to vote on a proposal.",
                  "format": "date-time"
                },
                "voting_end_time": {
                  "type": "string",
                  "description": "voting_end_time is the end time of voting on a proposal.",
                  "format": "date-time"
                }
              },
              "description": "Proposal defines the core field members of a governance proposal."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryProposalsResponse is the response type for the Query/Proposals RPC\nmethod."
      },
      "cosmos.gov.v1beta1.QueryTallyResultResponse": {
        "type": "object",
        "properties": {
          "tally": {
            "type": "object",
            "properties": {
              "yes": {
                "type": "string",
                "description": "yes is the number of yes votes on a proposal."
              },
              "abstain": {
                "type": "string",
                "description": "abstain is the number of abstain votes on a proposal."
              },
              "no": {
                "type": "string",
                "description": "no is the number of no votes on a proposal."
              },
              "no_with_veto": {
                "type": "string",
                "description": "no_with_veto is the number of no with veto votes on a proposal."
              }
            },
            "description": "tally defines the requested tally."
          }
        },
        "description": "QueryTallyResultResponse is the response type for the Query/Tally RPC method."
      },
      "cosmos.gov.v1beta1.QueryVoteResponse": {
        "type": "object",
        "properties": {
          "vote": {
            "type": "object",
            "properties": {
              "proposal_id": {
                "type": "string",
                "description": "proposal_id defines the unique id of the proposal.",
                "format": "uint64"
              },
              "voter": {
                "type": "string",
                "description": "voter is the voter address of the proposal."
              },
              "option": {
                "type": "string",
                "description": "Deprecated: Prefer to use `options` instead. This field is set in queries\nif and only if `len(options) == 1` and that option has weight 1. In all\nother cases, this field will default to VOTE_OPTION_UNSPECIFIED.",
                "default": "VOTE_OPTION_UNSPECIFIED",
                "enum": [
                  "VOTE_OPTION_UNSPECIFIED",
                  "VOTE_OPTION_YES",
                  "VOTE_OPTION_ABSTAIN",
                  "VOTE_OPTION_NO",
                  "VOTE_OPTION_NO_WITH_VETO"
                ]
              },
              "options": {
                "type": "array",
                "description": "options is the weighted vote options.\n\nSince: cosmos-sdk 0.43",
                "items": {
                  "type": "object",
                  "properties": {
                    "option": {
                      "type": "string",
                      "description": "option defines the valid vote options, it must not contain duplicate vote options.",
                      "default": "VOTE_OPTION_UNSPECIFIED",
                      "enum": [
                        "VOTE_OPTION_UNSPECIFIED",
                        "VOTE_OPTION_YES",
                        "VOTE_OPTION_ABSTAIN",
                        "VOTE_OPTION_NO",
                        "VOTE_OPTION_NO_WITH_VETO"
                      ]
                    },
                    "weight": {
                      "type": "string",
                      "description": "weight is the vote weight associated with the vote option."
                    }
                  },
                  "description": "WeightedVoteOption defines a unit of vote for vote split.\n\nSince: cosmos-sdk 0.43"
                }
              }
            },
            "description": "Vote defines a vote on a governance proposal.\nA Vote consists of a proposal ID, the voter, and the vote option."
          }
        },
        "description": "QueryVoteResponse is the response type for the Query/Vote RPC method."
      },
      "cosmos.gov.v1beta1.QueryVotesResponse": {
        "type": "object",
        "properties": {
          "votes": {
            "type": "array",
            "description": "votes defines the queried votes.",
            "items": {
              "type": "object",
              "properties": {
                "proposal_id": {
                  "type": "string",
                  "description": "proposal_id defines the unique id of the proposal.",
                  "format": "uint64"
                },
                "voter": {
                  "type": "string",
                  "description": "voter is the voter address of the proposal."
                },
                "option": {
                  "type": "string",
                  "description": "Deprecated: Prefer to use `options` instead. This field is set in queries\nif and only if `len(options) == 1` and that option has weight 1. In all\nother cases, this field will default to VOTE_OPTION_UNSPECIFIED.",
                  "default": "VOTE_OPTION_UNSPECIFIED",
                  "enum": [
                    "VOTE_OPTION_UNSPECIFIED",
                    "VOTE_OPTION_YES",
                    "VOTE_OPTION_ABSTAIN",
                    "VOTE_OPTION_NO",
                    "VOTE_OPTION_NO_WITH_VETO"
                  ]
                },
                "options": {
                  "type": "array",
                  "description": "options is the weighted vote options.\n\nSince: cosmos-sdk 0.43",
                  "items": {
                    "type": "object",
                    "properties": {
                      "option": {
                        "type": "string",
                        "description": "option defines the valid vote options, it must not contain duplicate vote options.",
                        "default": "VOTE_OPTION_UNSPECIFIED",
                        "enum": [
                          "VOTE_OPTION_UNSPECIFIED",
                          "VOTE_OPTION_YES",
                          "VOTE_OPTION_ABSTAIN",
                          "VOTE_OPTION_NO",
                          "VOTE_OPTION_NO_WITH_VETO"
                        ]
                      },
                      "weight": {
                        "type": "string",
                        "description": "weight is the vote weight associated with the vote option."
                      }
                    },
                    "description": "WeightedVoteOption defines a unit of vote for vote split.\n\nSince: cosmos-sdk 0.43"
                  }
                }
              },
              "description": "Vote defines a vote on a governance proposal.\nA Vote consists of a proposal ID, the voter, and the vote option."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryVotesResponse is the response type for the Query/Votes RPC method."
      },
      "cosmos.gov.v1beta1.TallyParams": {
        "type": "object",
        "properties": {
          "quorum": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Minimum percentage of total stake needed to vote for a result to be\nconsidered valid.",
            "format": "byte"
          },
          "threshold": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.",
            "format": "byte"
          },
          "veto_threshold": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Minimum value of Veto votes to Total votes ratio for proposal to be\nvetoed. Default value: 1/3.",
            "format": "byte"
          }
        },
        "description": "TallyParams defines the params for tallying votes on governance proposals."
      },
      "cosmos.gov.v1beta1.TallyResult": {
        "type": "object",
        "properties": {
          "yes": {
            "type": "string",
            "description": "yes is the number of yes votes on a proposal."
          },
          "abstain": {
            "type": "string",
            "description": "abstain is the number of abstain votes on a proposal."
          },
          "no": {
            "type": "string",
            "description": "no is the number of no votes on a proposal."
          },
          "no_with_veto": {
            "type": "string",
            "description": "no_with_veto is the number of no with veto votes on a proposal."
          }
        },
        "description": "TallyResult defines a standard tally for a governance proposal."
      },
      "cosmos.gov.v1beta1.Vote": {
        "type": "object",
        "properties": {
          "proposal_id": {
            "type": "string",
            "description": "proposal_id defines the unique id of the proposal.",
            "format": "uint64"
          },
          "voter": {
            "type": "string",
            "description": "voter is the voter address of the proposal."
          },
          "option": {
            "type": "string",
            "description": "Deprecated: Prefer to use `options` instead. This field is set in queries\nif and only if `len(options) == 1` and that option has weight 1. In all\nother cases, this field will default to VOTE_OPTION_UNSPECIFIED.",
            "default": "VOTE_OPTION_UNSPECIFIED",
            "enum": [
              "VOTE_OPTION_UNSPECIFIED",
              "VOTE_OPTION_YES",
              "VOTE_OPTION_ABSTAIN",
              "VOTE_OPTION_NO",
              "VOTE_OPTION_NO_WITH_VETO"
            ]
          },
          "options": {
            "type": "array",
            "description": "options is the weighted vote options.\n\nSince: cosmos-sdk 0.43",
            "items": {
              "type": "object",
              "properties": {
                "option": {
                  "type": "string",
                  "description": "option defines the valid vote options, it must not contain duplicate vote options.",
                  "default": "VOTE_OPTION_UNSPECIFIED",
                  "enum": [
                    "VOTE_OPTION_UNSPECIFIED",
                    "VOTE_OPTION_YES",
                    "VOTE_OPTION_ABSTAIN",
                    "VOTE_OPTION_NO",
                    "VOTE_OPTION_NO_WITH_VETO"
                  ]
                },
                "weight": {
                  "type": "string",
                  "description": "weight is the vote weight associated with the vote option."
                }
              },
              "description": "WeightedVoteOption defines a unit of vote for vote split.\n\nSince: cosmos-sdk 0.43"
            }
          }
        },
        "description": "Vote defines a vote on a governance proposal.\nA Vote consists of a proposal ID, the voter, and the vote option."
      },
      "cosmos.gov.v1beta1.VoteOption": {
        "type": "string",
        "description": "VoteOption enumerates the valid vote options for a given governance proposal.\n\n - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.\n - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.\n - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.\n - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.\n - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.",
        "default": "VOTE_OPTION_UNSPECIFIED",
        "enum": [
          "VOTE_OPTION_UNSPECIFIED",
          "VOTE_OPTION_YES",
          "VOTE_OPTION_ABSTAIN",
          "VOTE_OPTION_NO",
          "VOTE_OPTION_NO_WITH_VETO"
        ]
      },
      "cosmos.gov.v1beta1.VotingParams": {
        "type": "object",
        "properties": {
          "voting_period": {
            "type": "string",
            "description": "Duration of the voting period."
          }
        },
        "description": "VotingParams defines the params for voting on governance proposals."
      },
      "cosmos.gov.v1beta1.WeightedVoteOption": {
        "type": "object",
        "properties": {
          "option": {
            "type": "string",
            "description": "option defines the valid vote options, it must not contain duplicate vote options.",
            "default": "VOTE_OPTION_UNSPECIFIED",
            "enum": [
              "VOTE_OPTION_UNSPECIFIED",
              "VOTE_OPTION_YES",
              "VOTE_OPTION_ABSTAIN",
              "VOTE_OPTION_NO",
              "VOTE_OPTION_NO_WITH_VETO"
            ]
          },
          "weight": {
            "type": "string",
            "description": "weight is the vote weight associated with the vote option."
          }
        },
        "description": "WeightedVoteOption defines a unit of vote for vote split.\n\nSince: cosmos-sdk 0.43"
      },
      "cosmos.gov.v1.Deposit": {
        "type": "object",
        "properties": {
          "proposal_id": {
            "type": "string",
            "description": "proposal_id defines the unique id of the proposal.",
            "format": "uint64"
          },
          "depositor": {
            "type": "string",
            "description": "depositor defines the deposit addresses from the proposals."
          },
          "amount": {
            "type": "array",
            "description": "amount to be deposited by depositor.",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
            }
          }
        },
        "description": "Deposit defines an amount deposited by an account address to an active\nproposal."
      },
      "cosmos.gov.v1.DepositParams": {
        "type": "object",
        "properties": {
          "min_deposit": {
            "type": "array",
            "description": "Minimum deposit for a proposal to enter voting period.",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
            }
          },
          "max_deposit_period": {
            "type": "string",
            "description": "Maximum period for Atom holders to deposit on a proposal. Initial value: 2\nmonths."
          }
        },
        "description": "DepositParams defines the params for deposits on governance proposals."
      },
      "cosmos.gov.v1.Params": {
        "type": "object",
        "properties": {
          "min_deposit": {
            "type": "array",
            "description": "Minimum deposit for a proposal to enter voting period.",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
            }
          },
          "max_deposit_period": {
            "type": "string",
            "description": "Maximum period for Atom holders to deposit on a proposal. Initial value: 2\nmonths."
          },
          "voting_period": {
            "type": "string",
            "description": "Duration of the voting period."
          },
          "quorum": {
            "type": "string",
            "description": "Minimum percentage of total stake needed to vote for a result to be\n considered valid."
          },
          "threshold": {
            "type": "string",
            "description": "Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."
          },
          "veto_threshold": {
            "type": "string",
            "description": "Minimum value of Veto votes to Total votes ratio for proposal to be\n vetoed. Default value: 1/3."
          },
          "min_initial_deposit_ratio": {
            "type": "string",
            "description": "The ratio representing the proportion of the deposit value that must be paid at proposal submission."
          },
          "proposal_cancel_ratio": {
            "type": "string",
            "description": "The cancel ratio which will not be returned back to the depositors when a proposal is cancelled.\n\nSince: cosmos-sdk 0.50"
          },
          "proposal_cancel_dest": {
            "type": "string",
            "description": "The address which will receive (proposal_cancel_ratio * deposit) proposal deposits.\nIf empty, the (proposal_cancel_ratio * deposit) proposal deposits will be burned.\n\nSince: cosmos-sdk 0.50"
          },
          "expedited_voting_period": {
            "type": "string",
            "description": "Duration of the voting period of an expedited proposal.\n\nSince: cosmos-sdk 0.50"
          },
          "expedited_threshold": {
            "type": "string",
            "description": "Minimum proportion of Yes votes for proposal to pass. Default value: 0.67.\n\nSince: cosmos-sdk 0.50"
          },
          "expedited_min_deposit": {
            "type": "array",
            "description": "Minimum expedited deposit for a proposal to enter voting period.",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
            }
          },
          "burn_vote_quorum": {
            "title": "burn deposits if a proposal does not meet quorum",
            "type": "boolean"
          },
          "burn_proposal_deposit_prevote": {
            "title": "burn deposits if the proposal does not enter voting period",
            "type": "boolean"
          },
          "burn_vote_veto": {
            "title": "burn deposits if quorum with vote type no_veto is met",
            "type": "boolean"
          }
        },
        "description": "Params defines the parameters for the x/gov module.\n\nSince: cosmos-sdk 0.47"
      },
      "cosmos.gov.v1.Proposal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id defines the unique id of the proposal.",
            "format": "uint64"
          },
          "messages": {
            "type": "array",
            "description": "messages are the arbitrary messages to be executed if the proposal passes.",
            "items": {
              "type": "object",
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "byte"
                }
              },
              "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
            }
          },
          "status": {
            "type": "string",
            "description": "status defines the proposal status.",
            "default": "PROPOSAL_STATUS_UNSPECIFIED",
            "enum": [
              "PROPOSAL_STATUS_UNSPECIFIED",
              "PROPOSAL_STATUS_DEPOSIT_PERIOD",
              "PROPOSAL_STATUS_VOTING_PERIOD",
              "PROPOSAL_STATUS_PASSED",
              "PROPOSAL_STATUS_REJECTED",
              "PROPOSAL_STATUS_FAILED"
            ]
          },
          "final_tally_result": {
            "type": "object",
            "properties": {
              "yes_count": {
                "type": "string",
                "description": "yes_count is the number of yes votes on a proposal."
              },
              "abstain_count": {
                "type": "string",
                "description": "abstain_count is the number of abstain votes on a proposal."
              },
              "no_count": {
                "type": "string",
                "description": "no_count is the number of no votes on a proposal."
              },
              "no_with_veto_count": {
                "type": "string",
                "description": "no_with_veto_count is the number of no with veto votes on a proposal."
              }
            },
            "description": "final_tally_result is the final tally result of the proposal. When\nquerying a proposal via gRPC, this field is not populated until the\nproposal's voting period has ended."
          },
          "submit_time": {
            "type": "string",
            "description": "submit_time is the time of proposal submission.",
            "format": "date-time"
          },
          "deposit_end_time": {
            "type": "string",
            "description": "deposit_end_time is the end time for deposition.",
            "format": "date-time"
          },
          "total_deposit": {
            "type": "array",
            "description": "total_deposit is the total deposit on the proposal.",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
            }
          },
          "voting_start_time": {
            "type": "string",
            "description": "voting_start_time is the starting time to vote on a proposal.",
            "format": "date-time"
          },
          "voting_end_time": {
            "type": "string",
            "description": "voting_end_time is the end time of voting on a proposal.",
            "format": "date-time"
          },
          "metadata": {
            "title": "metadata is any arbitrary metadata attached to the proposal.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#proposal-3",
            "type": "string"
          },
          "title": {
            "title": "title is the title of the proposal",
            "type": "string",
            "description": "Since: cosmos-sdk 0.47"
          },
          "summary": {
            "title": "summary is a short summary of the proposal",
            "type": "string",
            "description": "Since: cosmos-sdk 0.47"
          },
          "proposer": {
            "title": "proposer is the address of the proposal sumbitter",
            "type": "string",
            "description": "Since: cosmos-sdk 0.47"
          },
          "expedited": {
            "title": "expedited defines if the proposal is expedited",
            "type": "boolean",
            "description": "Since: cosmos-sdk 0.50"
          },
          "failed_reason": {
            "title": "failed_reason defines the reason why the proposal failed",
            "type": "string",
            "description": "Since: cosmos-sdk 0.50"
          }
        },
        "description": "Proposal defines the core field members of a governance proposal."
      },
      "cosmos.gov.v1.ProposalStatus": {
        "type": "string",
        "description": "ProposalStatus enumerates the valid statuses of a proposal.\n\n - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.\n - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit\nperiod.\n - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting\nperiod.\n - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has\npassed.\n - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has\nbeen rejected.\n - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has\nfailed.",
        "default": "PROPOSAL_STATUS_UNSPECIFIED",
        "enum": [
          "PROPOSAL_STATUS_UNSPECIFIED",
          "PROPOSAL_STATUS_DEPOSIT_PERIOD",
          "PROPOSAL_STATUS_VOTING_PERIOD",
          "PROPOSAL_STATUS_PASSED",
          "PROPOSAL_STATUS_REJECTED",
          "PROPOSAL_STATUS_FAILED"
        ]
      },
      "cosmos.gov.v1.QueryConstitutionResponse": {
        "title": "QueryConstitutionResponse is the response type for the Query/Constitution RPC method",
        "type": "object",
        "properties": {
          "constitution": {
            "type": "string"
          }
        }
      },
      "cosmos.gov.v1.QueryDepositResponse": {
        "type": "object",
        "properties": {
          "deposit": {
            "type": "object",
            "properties": {
              "proposal_id": {
                "type": "string",
                "description": "proposal_id defines the unique id of the proposal.",
                "format": "uint64"
              },
              "depositor": {
                "type": "string",
                "description": "depositor defines the deposit addresses from the proposals."
              },
              "amount": {
                "type": "array",
                "description": "amount to be deposited by depositor.",
                "items": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                }
              }
            },
            "description": "Deposit defines an amount deposited by an account address to an active\nproposal."
          }
        },
        "description": "QueryDepositResponse is the response type for the Query/Deposit RPC method."
      },
      "cosmos.gov.v1.QueryDepositsResponse": {
        "type": "object",
        "properties": {
          "deposits": {
            "type": "array",
            "description": "deposits defines the requested deposits.",
            "items": {
              "type": "object",
              "properties": {
                "proposal_id": {
                  "type": "string",
                  "description": "proposal_id defines the unique id of the proposal.",
                  "format": "uint64"
                },
                "depositor": {
                  "type": "string",
                  "description": "depositor defines the deposit addresses from the proposals."
                },
                "amount": {
                  "type": "array",
                  "description": "amount to be deposited by depositor.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "denom": {
                        "type": "string"
                      },
                      "amount": {
                        "type": "string"
                      }
                    },
                    "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                  }
                }
              },
              "description": "Deposit defines an amount deposited by an account address to an active\nproposal."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryDepositsResponse is the response type for the Query/Deposits RPC method."
      },
      "cosmos.gov.v1.QueryParamsResponse": {
        "type": "object",
        "properties": {
          "voting_params": {
            "type": "object",
            "properties": {
              "voting_period": {
                "type": "string",
                "description": "Duration of the voting period."
              }
            },
            "description": "Deprecated: Prefer to use `params` instead.\nvoting_params defines the parameters related to voting."
          },
          "deposit_params": {
            "type": "object",
            "properties": {
              "min_deposit": {
                "type": "array",
                "description": "Minimum deposit for a proposal to enter voting period.",
                "items": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                }
              },
              "max_deposit_period": {
                "type": "string",
                "description": "Maximum period for Atom holders to deposit on a proposal. Initial value: 2\nmonths."
              }
            },
            "description": "Deprecated: Prefer to use `params` instead.\ndeposit_params defines the parameters related to deposit."
          },
          "tally_params": {
            "type": "object",
            "properties": {
              "quorum": {
                "type": "string",
                "description": "Minimum percentage of total stake needed to vote for a result to be\nconsidered valid."
              },
              "threshold": {
                "type": "string",
                "description": "Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."
              },
              "veto_threshold": {
                "type": "string",
                "description": "Minimum value of Veto votes to Total votes ratio for proposal to be\nvetoed. Default value: 1/3."
              }
            },
            "description": "Deprecated: Prefer to use `params` instead.\ntally_params defines the parameters related to tally."
          },
          "params": {
            "type": "object",
            "properties": {
              "min_deposit": {
                "type": "array",
                "description": "Minimum deposit for a proposal to enter voting period.",
                "items": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                }
              },
              "max_deposit_period": {
                "type": "string",
                "description": "Maximum period for Atom holders to deposit on a proposal. Initial value: 2\nmonths."
              },
              "voting_period": {
                "type": "string",
                "description": "Duration of the voting period."
              },
              "quorum": {
                "type": "string",
                "description": "Minimum percentage of total stake needed to vote for a result to be\n considered valid."
              },
              "threshold": {
                "type": "string",
                "description": "Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."
              },
              "veto_threshold": {
                "type": "string",
                "description": "Minimum value of Veto votes to Total votes ratio for proposal to be\n vetoed. Default value: 1/3."
              },
              "min_initial_deposit_ratio": {
                "type": "string",
                "description": "The ratio representing the proportion of the deposit value that must be paid at proposal submission."
              },
              "proposal_cancel_ratio": {
                "type": "string",
                "description": "The cancel ratio which will not be returned back to the depositors when a proposal is cancelled.\n\nSince: cosmos-sdk 0.50"
              },
              "proposal_cancel_dest": {
                "type": "string",
                "description": "The address which will receive (proposal_cancel_ratio * deposit) proposal deposits.\nIf empty, the (proposal_cancel_ratio * deposit) proposal deposits will be burned.\n\nSince: cosmos-sdk 0.50"
              },
              "expedited_voting_period": {
                "type": "string",
                "description": "Duration of the voting period of an expedited proposal.\n\nSince: cosmos-sdk 0.50"
              },
              "expedited_threshold": {
                "type": "string",
                "description": "Minimum proportion of Yes votes for proposal to pass. Default value: 0.67.\n\nSince: cosmos-sdk 0.50"
              },
              "expedited_min_deposit": {
                "type": "array",
                "description": "Minimum expedited deposit for a proposal to enter voting period.",
                "items": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                }
              },
              "burn_vote_quorum": {
                "title": "burn deposits if a proposal does not meet quorum",
                "type": "boolean"
              },
              "burn_proposal_deposit_prevote": {
                "title": "burn deposits if the proposal does not enter voting period",
                "type": "boolean"
              },
              "burn_vote_veto": {
                "title": "burn deposits if quorum with vote type no_veto is met",
                "type": "boolean"
              }
            },
            "description": "params defines all the paramaters of x/gov module.\n\nSince: cosmos-sdk 0.47"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "cosmos.gov.v1.QueryProposalResponse": {
        "type": "object",
        "properties": {
          "proposal": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "id defines the unique id of the proposal.",
                "format": "uint64"
              },
              "messages": {
                "type": "array",
                "description": "messages are the arbitrary messages to be executed if the proposal passes.",
                "items": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                }
              },
              "status": {
                "type": "string",
                "description": "status defines the proposal status.",
                "default": "PROPOSAL_STATUS_UNSPECIFIED",
                "enum": [
                  "PROPOSAL_STATUS_UNSPECIFIED",
                  "PROPOSAL_STATUS_DEPOSIT_PERIOD",
                  "PROPOSAL_STATUS_VOTING_PERIOD",
                  "PROPOSAL_STATUS_PASSED",
                  "PROPOSAL_STATUS_REJECTED",
                  "PROPOSAL_STATUS_FAILED"
                ]
              },
              "final_tally_result": {
                "type": "object",
                "properties": {
                  "yes_count": {
                    "type": "string",
                    "description": "yes_count is the number of yes votes on a proposal."
                  },
                  "abstain_count": {
                    "type": "string",
                    "description": "abstain_count is the number of abstain votes on a proposal."
                  },
                  "no_count": {
                    "type": "string",
                    "description": "no_count is the number of no votes on a proposal."
                  },
                  "no_with_veto_count": {
                    "type": "string",
                    "description": "no_with_veto_count is the number of no with veto votes on a proposal."
                  }
                },
                "description": "final_tally_result is the final tally result of the proposal. When\nquerying a proposal via gRPC, this field is not populated until the\nproposal's voting period has ended."
              },
              "submit_time": {
                "type": "string",
                "description": "submit_time is the time of proposal submission.",
                "format": "date-time"
              },
              "deposit_end_time": {
                "type": "string",
                "description": "deposit_end_time is the end time for deposition.",
                "format": "date-time"
              },
              "total_deposit": {
                "type": "array",
                "description": "total_deposit is the total deposit on the proposal.",
                "items": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                }
              },
              "voting_start_time": {
                "type": "string",
                "description": "voting_start_time is the starting time to vote on a proposal.",
                "format": "date-time"
              },
              "voting_end_time": {
                "type": "string",
                "description": "voting_end_time is the end time of voting on a proposal.",
                "format": "date-time"
              },
              "metadata": {
                "title": "metadata is any arbitrary metadata attached to the proposal.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#proposal-3",
                "type": "string"
              },
              "title": {
                "title": "title is the title of the proposal",
                "type": "string",
                "description": "Since: cosmos-sdk 0.47"
              },
              "summary": {
                "title": "summary is a short summary of the proposal",
                "type": "string",
                "description": "Since: cosmos-sdk 0.47"
              },
              "proposer": {
                "title": "proposer is the address of the proposal sumbitter",
                "type": "string",
                "description": "Since: cosmos-sdk 0.47"
              },
              "expedited": {
                "title": "expedited defines if the proposal is expedited",
                "type": "boolean",
                "description": "Since: cosmos-sdk 0.50"
              },
              "failed_reason": {
                "title": "failed_reason defines the reason why the proposal failed",
                "type": "string",
                "description": "Since: cosmos-sdk 0.50"
              }
            },
            "description": "Proposal defines the core field members of a governance proposal."
          }
        },
        "description": "QueryProposalResponse is the response type for the Query/Proposal RPC method."
      },
      "cosmos.gov.v1.QueryProposalsResponse": {
        "type": "object",
        "properties": {
          "proposals": {
            "type": "array",
            "description": "proposals defines all the requested governance proposals.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "id defines the unique id of the proposal.",
                  "format": "uint64"
                },
                "messages": {
                  "type": "array",
                  "description": "messages are the arbitrary messages to be executed if the proposal passes.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type_url": {
                        "type": "string",
                        "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                      },
                      "value": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "description": "Must be a valid serialized protocol buffer of the above specified type.",
                        "format": "byte"
                      }
                    },
                    "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                  }
                },
                "status": {
                  "type": "string",
                  "description": "status defines the proposal status.",
                  "default": "PROPOSAL_STATUS_UNSPECIFIED",
                  "enum": [
                    "PROPOSAL_STATUS_UNSPECIFIED",
                    "PROPOSAL_STATUS_DEPOSIT_PERIOD",
                    "PROPOSAL_STATUS_VOTING_PERIOD",
                    "PROPOSAL_STATUS_PASSED",
                    "PROPOSAL_STATUS_REJECTED",
                    "PROPOSAL_STATUS_FAILED"
                  ]
                },
                "final_tally_result": {
                  "type": "object",
                  "properties": {
                    "yes_count": {
                      "type": "string",
                      "description": "yes_count is the number of yes votes on a proposal."
                    },
                    "abstain_count": {
                      "type": "string",
                      "description": "abstain_count is the number of abstain votes on a proposal."
                    },
                    "no_count": {
                      "type": "string",
                      "description": "no_count is the number of no votes on a proposal."
                    },
                    "no_with_veto_count": {
                      "type": "string",
                      "description": "no_with_veto_count is the number of no with veto votes on a proposal."
                    }
                  },
                  "description": "final_tally_result is the final tally result of the proposal. When\nquerying a proposal via gRPC, this field is not populated until the\nproposal's voting period has ended."
                },
                "submit_time": {
                  "type": "string",
                  "description": "submit_time is the time of proposal submission.",
                  "format": "date-time"
                },
                "deposit_end_time": {
                  "type": "string",
                  "description": "deposit_end_time is the end time for deposition.",
                  "format": "date-time"
                },
                "total_deposit": {
                  "type": "array",
                  "description": "total_deposit is the total deposit on the proposal.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "denom": {
                        "type": "string"
                      },
                      "amount": {
                        "type": "string"
                      }
                    },
                    "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                  }
                },
                "voting_start_time": {
                  "type": "string",
                  "description": "voting_start_time is the starting time to vote on a proposal.",
                  "format": "date-time"
                },
                "voting_end_time": {
                  "type": "string",
                  "description": "voting_end_time is the end time of voting on a proposal.",
                  "format": "date-time"
                },
                "metadata": {
                  "title": "metadata is any arbitrary metadata attached to the proposal.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#proposal-3",
                  "type": "string"
                },
                "title": {
                  "title": "title is the title of the proposal",
                  "type": "string",
                  "description": "Since: cosmos-sdk 0.47"
                },
                "summary": {
                  "title": "summary is a short summary of the proposal",
                  "type": "string",
                  "description": "Since: cosmos-sdk 0.47"
                },
                "proposer": {
                  "title": "proposer is the address of the proposal sumbitter",
                  "type": "string",
                  "description": "Since: cosmos-sdk 0.47"
                },
                "expedited": {
                  "title": "expedited defines if the proposal is expedited",
                  "type": "boolean",
                  "description": "Since: cosmos-sdk 0.50"
                },
                "failed_reason": {
                  "title": "failed_reason defines the reason why the proposal failed",
                  "type": "string",
                  "description": "Since: cosmos-sdk 0.50"
                }
              },
              "description": "Proposal defines the core field members of a governance proposal."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryProposalsResponse is the response type for the Query/Proposals RPC\nmethod."
      },
      "cosmos.gov.v1.QueryTallyResultResponse": {
        "type": "object",
        "properties": {
          "tally": {
            "type": "object",
            "properties": {
              "yes_count": {
                "type": "string",
                "description": "yes_count is the number of yes votes on a proposal."
              },
              "abstain_count": {
                "type": "string",
                "description": "abstain_count is the number of abstain votes on a proposal."
              },
              "no_count": {
                "type": "string",
                "description": "no_count is the number of no votes on a proposal."
              },
              "no_with_veto_count": {
                "type": "string",
                "description": "no_with_veto_count is the number of no with veto votes on a proposal."
              }
            },
            "description": "tally defines the requested tally."
          }
        },
        "description": "QueryTallyResultResponse is the response type for the Query/Tally RPC method."
      },
      "cosmos.gov.v1.QueryVoteResponse": {
        "type": "object",
        "properties": {
          "vote": {
            "type": "object",
            "properties": {
              "proposal_id": {
                "type": "string",
                "description": "proposal_id defines the unique id of the proposal.",
                "format": "uint64"
              },
              "voter": {
                "type": "string",
                "description": "voter is the voter address of the proposal."
              },
              "options": {
                "type": "array",
                "description": "options is the weighted vote options.",
                "items": {
                  "type": "object",
                  "properties": {
                    "option": {
                      "type": "string",
                      "description": "option defines the valid vote options, it must not contain duplicate vote options.",
                      "default": "VOTE_OPTION_UNSPECIFIED",
                      "enum": [
                        "VOTE_OPTION_UNSPECIFIED",
                        "VOTE_OPTION_YES",
                        "VOTE_OPTION_ABSTAIN",
                        "VOTE_OPTION_NO",
                        "VOTE_OPTION_NO_WITH_VETO"
                      ]
                    },
                    "weight": {
                      "type": "string",
                      "description": "weight is the vote weight associated with the vote option."
                    }
                  },
                  "description": "WeightedVoteOption defines a unit of vote for vote split."
                }
              },
              "metadata": {
                "title": "metadata is any arbitrary metadata attached to the vote.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#vote-5",
                "type": "string"
              }
            },
            "description": "Vote defines a vote on a governance proposal.\nA Vote consists of a proposal ID, the voter, and the vote option."
          }
        },
        "description": "QueryVoteResponse is the response type for the Query/Vote RPC method."
      },
      "cosmos.gov.v1.QueryVotesResponse": {
        "type": "object",
        "properties": {
          "votes": {
            "type": "array",
            "description": "votes defines the queried votes.",
            "items": {
              "type": "object",
              "properties": {
                "proposal_id": {
                  "type": "string",
                  "description": "proposal_id defines the unique id of the proposal.",
                  "format": "uint64"
                },
                "voter": {
                  "type": "string",
                  "description": "voter is the voter address of the proposal."
                },
                "options": {
                  "type": "array",
                  "description": "options is the weighted vote options.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "option": {
                        "type": "string",
                        "description": "option defines the valid vote options, it must not contain duplicate vote options.",
                        "default": "VOTE_OPTION_UNSPECIFIED",
                        "enum": [
                          "VOTE_OPTION_UNSPECIFIED",
                          "VOTE_OPTION_YES",
                          "VOTE_OPTION_ABSTAIN",
                          "VOTE_OPTION_NO",
                          "VOTE_OPTION_NO_WITH_VETO"
                        ]
                      },
                      "weight": {
                        "type": "string",
                        "description": "weight is the vote weight associated with the vote option."
                      }
                    },
                    "description": "WeightedVoteOption defines a unit of vote for vote split."
                  }
                },
                "metadata": {
                  "title": "metadata is any arbitrary metadata attached to the vote.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#vote-5",
                  "type": "string"
                }
              },
              "description": "Vote defines a vote on a governance proposal.\nA Vote consists of a proposal ID, the voter, and the vote option."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryVotesResponse is the response type for the Query/Votes RPC method."
      },
      "cosmos.gov.v1.TallyParams": {
        "type": "object",
        "properties": {
          "quorum": {
            "type": "string",
            "description": "Minimum percentage of total stake needed to vote for a result to be\nconsidered valid."
          },
          "threshold": {
            "type": "string",
            "description": "Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."
          },
          "veto_threshold": {
            "type": "string",
            "description": "Minimum value of Veto votes to Total votes ratio for proposal to be\nvetoed. Default value: 1/3."
          }
        },
        "description": "TallyParams defines the params for tallying votes on governance proposals."
      },
      "cosmos.gov.v1.TallyResult": {
        "type": "object",
        "properties": {
          "yes_count": {
            "type": "string",
            "description": "yes_count is the number of yes votes on a proposal."
          },
          "abstain_count": {
            "type": "string",
            "description": "abstain_count is the number of abstain votes on a proposal."
          },
          "no_count": {
            "type": "string",
            "description": "no_count is the number of no votes on a proposal."
          },
          "no_with_veto_count": {
            "type": "string",
            "description": "no_with_veto_count is the number of no with veto votes on a proposal."
          }
        },
        "description": "TallyResult defines a standard tally for a governance proposal."
      },
      "cosmos.gov.v1.Vote": {
        "type": "object",
        "properties": {
          "proposal_id": {
            "type": "string",
            "description": "proposal_id defines the unique id of the proposal.",
            "format": "uint64"
          },
          "voter": {
            "type": "string",
            "description": "voter is the voter address of the proposal."
          },
          "options": {
            "type": "array",
            "description": "options is the weighted vote options.",
            "items": {
              "type": "object",
              "properties": {
                "option": {
                  "type": "string",
                  "description": "option defines the valid vote options, it must not contain duplicate vote options.",
                  "default": "VOTE_OPTION_UNSPECIFIED",
                  "enum": [
                    "VOTE_OPTION_UNSPECIFIED",
                    "VOTE_OPTION_YES",
                    "VOTE_OPTION_ABSTAIN",
                    "VOTE_OPTION_NO",
                    "VOTE_OPTION_NO_WITH_VETO"
                  ]
                },
                "weight": {
                  "type": "string",
                  "description": "weight is the vote weight associated with the vote option."
                }
              },
              "description": "WeightedVoteOption defines a unit of vote for vote split."
            }
          },
          "metadata": {
            "title": "metadata is any arbitrary metadata attached to the vote.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#vote-5",
            "type": "string"
          }
        },
        "description": "Vote defines a vote on a governance proposal.\nA Vote consists of a proposal ID, the voter, and the vote option."
      },
      "cosmos.gov.v1.VoteOption": {
        "type": "string",
        "description": "VoteOption enumerates the valid vote options for a given governance proposal.\n\n - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.\n - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.\n - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.\n - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.\n - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.",
        "default": "VOTE_OPTION_UNSPECIFIED",
        "enum": [
          "VOTE_OPTION_UNSPECIFIED",
          "VOTE_OPTION_YES",
          "VOTE_OPTION_ABSTAIN",
          "VOTE_OPTION_NO",
          "VOTE_OPTION_NO_WITH_VETO"
        ]
      },
      "cosmos.gov.v1.VotingParams": {
        "type": "object",
        "properties": {
          "voting_period": {
            "type": "string",
            "description": "Duration of the voting period."
          }
        },
        "description": "VotingParams defines the params for voting on governance proposals."
      },
      "cosmos.gov.v1.WeightedVoteOption": {
        "type": "object",
        "properties": {
          "option": {
            "type": "string",
            "description": "option defines the valid vote options, it must not contain duplicate vote options.",
            "default": "VOTE_OPTION_UNSPECIFIED",
            "enum": [
              "VOTE_OPTION_UNSPECIFIED",
              "VOTE_OPTION_YES",
              "VOTE_OPTION_ABSTAIN",
              "VOTE_OPTION_NO",
              "VOTE_OPTION_NO_WITH_VETO"
            ]
          },
          "weight": {
            "type": "string",
            "description": "weight is the vote weight associated with the vote option."
          }
        },
        "description": "WeightedVoteOption defines a unit of vote for vote split."
      },
      "cosmos.mint.v1beta1.Params": {
        "type": "object",
        "properties": {
          "mint_denom": {
            "title": "type of coin to mint",
            "type": "string"
          },
          "inflation_rate_change": {
            "title": "maximum annual change in inflation rate",
            "type": "string"
          },
          "inflation_max": {
            "title": "maximum inflation rate",
            "type": "string"
          },
          "inflation_min": {
            "title": "minimum inflation rate",
            "type": "string"
          },
          "goal_bonded": {
            "title": "goal of percent bonded atoms",
            "type": "string"
          },
          "blocks_per_year": {
            "title": "expected blocks per year",
            "type": "string",
            "format": "uint64"
          }
        },
        "description": "Params defines the parameters for the x/mint module."
      },
      "cosmos.mint.v1beta1.QueryAnnualProvisionsResponse": {
        "type": "object",
        "properties": {
          "annual_provisions": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "annual_provisions is the current minting annual provisions value.",
            "format": "byte"
          }
        },
        "description": "QueryAnnualProvisionsResponse is the response type for the\nQuery/AnnualProvisions RPC method."
      },
      "cosmos.mint.v1beta1.QueryInflationResponse": {
        "type": "object",
        "properties": {
          "inflation": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "inflation is the current minting inflation value.",
            "format": "byte"
          }
        },
        "description": "QueryInflationResponse is the response type for the Query/Inflation RPC\nmethod."
      },
      "cosmos.mint.v1beta1.QueryParamsResponse": {
        "type": "object",
        "properties": {
          "params": {
            "type": "object",
            "properties": {
              "mint_denom": {
                "title": "type of coin to mint",
                "type": "string"
              },
              "inflation_rate_change": {
                "title": "maximum annual change in inflation rate",
                "type": "string"
              },
              "inflation_max": {
                "title": "maximum inflation rate",
                "type": "string"
              },
              "inflation_min": {
                "title": "minimum inflation rate",
                "type": "string"
              },
              "goal_bonded": {
                "title": "goal of percent bonded atoms",
                "type": "string"
              },
              "blocks_per_year": {
                "title": "expected blocks per year",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "params defines the parameters of the module."
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "cosmos.params.v1beta1.ParamChange": {
        "type": "object",
        "properties": {
          "subspace": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "description": "ParamChange defines an individual parameter change, for use in\nParameterChangeProposal."
      },
      "cosmos.params.v1beta1.QueryParamsResponse": {
        "type": "object",
        "properties": {
          "param": {
            "type": "object",
            "properties": {
              "subspace": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "description": "param defines the queried parameter."
          }
        },
        "description": "QueryParamsResponse is response type for the Query/Params RPC method."
      },
      "cosmos.params.v1beta1.QuerySubspacesResponse": {
        "type": "object",
        "properties": {
          "subspaces": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "subspace": {
                  "type": "string"
                },
                "keys": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "description": "Subspace defines a parameter subspace name and all the keys that exist for\nthe subspace.\n\nSince: cosmos-sdk 0.46"
            }
          }
        },
        "description": "QuerySubspacesResponse defines the response types for querying for all\nregistered subspaces and all keys for a subspace.\n\nSince: cosmos-sdk 0.46"
      },
      "cosmos.params.v1beta1.Subspace": {
        "type": "object",
        "properties": {
          "subspace": {
            "type": "string"
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Subspace defines a parameter subspace name and all the keys that exist for\nthe subspace.\n\nSince: cosmos-sdk 0.46"
      },
      "cosmos.slashing.v1beta1.Params": {
        "type": "object",
        "properties": {
          "signed_blocks_window": {
            "type": "string",
            "format": "int64"
          },
          "min_signed_per_window": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "downtime_jail_duration": {
            "type": "string"
          },
          "slash_fraction_double_sign": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "slash_fraction_downtime": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          }
        },
        "description": "Params represents the parameters used for by the slashing module."
      },
      "cosmos.slashing.v1beta1.QueryParamsResponse": {
        "title": "QueryParamsResponse is the response type for the Query/Params RPC method",
        "type": "object",
        "properties": {
          "params": {
            "type": "object",
            "properties": {
              "signed_blocks_window": {
                "type": "string",
                "format": "int64"
              },
              "min_signed_per_window": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "downtime_jail_duration": {
                "type": "string"
              },
              "slash_fraction_double_sign": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "slash_fraction_downtime": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              }
            },
            "description": "Params represents the parameters used for by the slashing module."
          }
        }
      },
      "cosmos.slashing.v1beta1.QuerySigningInfoResponse": {
        "title": "QuerySigningInfoResponse is the response type for the Query/SigningInfo RPC\nmethod",
        "type": "object",
        "properties": {
          "val_signing_info": {
            "title": "val_signing_info is the signing info of requested val cons address",
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "start_height": {
                "title": "Height at which validator was first a candidate OR was un-jailed",
                "type": "string",
                "format": "int64"
              },
              "index_offset": {
                "type": "string",
                "description": "Index which is incremented every time a validator is bonded in a block and\n_may_ have signed a pre-commit or not. This in conjunction with the\nsigned_blocks_window param determines the index in the missed block bitmap.",
                "format": "int64"
              },
              "jailed_until": {
                "type": "string",
                "description": "Timestamp until which the validator is jailed due to liveness downtime.",
                "format": "date-time"
              },
              "tombstoned": {
                "type": "boolean",
                "description": "Whether or not a validator has been tombstoned (killed out of validator\nset). It is set once the validator commits an equivocation or for any other\nconfigured misbehavior."
              },
              "missed_blocks_counter": {
                "type": "string",
                "description": "A counter of missed (unsigned) blocks. It is used to avoid unnecessary\nreads in the missed block bitmap.",
                "format": "int64"
              }
            },
            "description": "ValidatorSigningInfo defines a validator's signing info for monitoring their\nliveness activity."
          }
        }
      },
      "cosmos.slashing.v1beta1.QuerySigningInfosResponse": {
        "title": "QuerySigningInfosResponse is the response type for the Query/SigningInfos RPC\nmethod",
        "type": "object",
        "properties": {
          "info": {
            "title": "info is the signing info of all validators",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "start_height": {
                  "title": "Height at which validator was first a candidate OR was un-jailed",
                  "type": "string",
                  "format": "int64"
                },
                "index_offset": {
                  "type": "string",
                  "description": "Index which is incremented every time a validator is bonded in a block and\n_may_ have signed a pre-commit or not. This in conjunction with the\nsigned_blocks_window param determines the index in the missed block bitmap.",
                  "format": "int64"
                },
                "jailed_until": {
                  "type": "string",
                  "description": "Timestamp until which the validator is jailed due to liveness downtime.",
                  "format": "date-time"
                },
                "tombstoned": {
                  "type": "boolean",
                  "description": "Whether or not a validator has been tombstoned (killed out of validator\nset). It is set once the validator commits an equivocation or for any other\nconfigured misbehavior."
                },
                "missed_blocks_counter": {
                  "type": "string",
                  "description": "A counter of missed (unsigned) blocks. It is used to avoid unnecessary\nreads in the missed block bitmap.",
                  "format": "int64"
                }
              },
              "description": "ValidatorSigningInfo defines a validator's signing info for monitoring their\nliveness activity."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "PageResponse is to be embedded in gRPC response messages where the\ncorresponding request message has used PageRequest.\n\n message SomeResponse {\n         repeated Bar results = 1;\n         PageResponse page = 2;\n }"
          }
        }
      },
      "cosmos.slashing.v1beta1.ValidatorSigningInfo": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "start_height": {
            "title": "Height at which validator was first a candidate OR was un-jailed",
            "type": "string",
            "format": "int64"
          },
          "index_offset": {
            "type": "string",
            "description": "Index which is incremented every time a validator is bonded in a block and\n_may_ have signed a pre-commit or not. This in conjunction with the\nsigned_blocks_window param determines the index in the missed block bitmap.",
            "format": "int64"
          },
          "jailed_until": {
            "type": "string",
            "description": "Timestamp until which the validator is jailed due to liveness downtime.",
            "format": "date-time"
          },
          "tombstoned": {
            "type": "boolean",
            "description": "Whether or not a validator has been tombstoned (killed out of validator\nset). It is set once the validator commits an equivocation or for any other\nconfigured misbehavior."
          },
          "missed_blocks_counter": {
            "type": "string",
            "description": "A counter of missed (unsigned) blocks. It is used to avoid unnecessary\nreads in the missed block bitmap.",
            "format": "int64"
          }
        },
        "description": "ValidatorSigningInfo defines a validator's signing info for monitoring their\nliveness activity."
      },
      "cosmos.staking.v1beta1.BondStatus": {
        "type": "string",
        "description": "BondStatus is the status of a validator.\n\n - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.\n - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.\n - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.\n - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.",
        "default": "BOND_STATUS_UNSPECIFIED",
        "enum": [
          "BOND_STATUS_UNSPECIFIED",
          "BOND_STATUS_UNBONDED",
          "BOND_STATUS_UNBONDING",
          "BOND_STATUS_BONDED"
        ]
      },
      "cosmos.staking.v1beta1.Commission": {
        "type": "object",
        "properties": {
          "commission_rates": {
            "type": "object",
            "properties": {
              "rate": {
                "type": "string",
                "description": "rate is the commission rate charged to delegators, as a fraction."
              },
              "max_rate": {
                "type": "string",
                "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
              },
              "max_change_rate": {
                "type": "string",
                "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
              }
            },
            "description": "commission_rates defines the initial commission rates to be used for creating a validator."
          },
          "update_time": {
            "type": "string",
            "description": "update_time is the last time the commission rate was changed.",
            "format": "date-time"
          }
        },
        "description": "Commission defines commission parameters for a given validator."
      },
      "cosmos.staking.v1beta1.CommissionRates": {
        "type": "object",
        "properties": {
          "rate": {
            "type": "string",
            "description": "rate is the commission rate charged to delegators, as a fraction."
          },
          "max_rate": {
            "type": "string",
            "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
          },
          "max_change_rate": {
            "type": "string",
            "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
          }
        },
        "description": "CommissionRates defines the initial commission rates to be used for creating\na validator."
      },
      "cosmos.staking.v1beta1.Delegation": {
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string",
            "description": "delegator_address is the encoded address of the delegator."
          },
          "validator_address": {
            "type": "string",
            "description": "validator_address is the encoded address of the validator."
          },
          "shares": {
            "type": "string",
            "description": "shares define the delegation shares received."
          }
        },
        "description": "Delegation represents the bond with tokens held by an account. It is\nowned by one delegator, and is associated with the voting power of one\nvalidator."
      },
      "cosmos.staking.v1beta1.DelegationResponse": {
        "type": "object",
        "properties": {
          "delegation": {
            "type": "object",
            "properties": {
              "delegator_address": {
                "type": "string",
                "description": "delegator_address is the encoded address of the delegator."
              },
              "validator_address": {
                "type": "string",
                "description": "validator_address is the encoded address of the validator."
              },
              "shares": {
                "type": "string",
                "description": "shares define the delegation shares received."
              }
            },
            "description": "Delegation represents the bond with tokens held by an account. It is\nowned by one delegator, and is associated with the voting power of one\nvalidator."
          },
          "balance": {
            "type": "object",
            "properties": {
              "denom": {
                "type": "string"
              },
              "amount": {
                "type": "string"
              }
            },
            "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
          }
        },
        "description": "DelegationResponse is equivalent to Delegation except that it contains a\nbalance in addition to shares which is more suitable for client responses."
      },
      "cosmos.staking.v1beta1.Description": {
        "type": "object",
        "properties": {
          "moniker": {
            "type": "string",
            "description": "moniker defines a human-readable name for the validator."
          },
          "identity": {
            "type": "string",
            "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
          },
          "website": {
            "type": "string",
            "description": "website defines an optional website link."
          },
          "security_contact": {
            "type": "string",
            "description": "security_contact defines an optional email for security contact."
          },
          "details": {
            "type": "string",
            "description": "details define other optional details."
          }
        },
        "description": "Description defines a validator description."
      },
      "cosmos.staking.v1beta1.HistoricalInfo": {
        "type": "object",
        "properties": {
          "header": {
            "type": "object",
            "properties": {
              "version": {
                "title": "basic block info",
                "type": "object",
                "properties": {
                  "block": {
                    "type": "string",
                    "format": "uint64"
                  },
                  "app": {
                    "type": "string",
                    "format": "uint64"
                  }
                },
                "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
              },
              "chain_id": {
                "type": "string"
              },
              "height": {
                "type": "string",
                "format": "int64"
              },
              "time": {
                "type": "string",
                "format": "date-time"
              },
              "last_block_id": {
                "title": "prev block info",
                "type": "object",
                "properties": {
                  "hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "part_set_header": {
                    "title": "PartsetHeader",
                    "type": "object",
                    "properties": {
                      "total": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      }
                    }
                  }
                }
              },
              "last_commit_hash": {
                "title": "hashes of block data",
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "data_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "validators_hash": {
                "title": "hashes from the app output from the prev block",
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "next_validators_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "consensus_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "app_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "last_results_hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "evidence_hash": {
                "title": "consensus info",
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "proposer_address": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              }
            },
            "description": "Header defines the structure of a block header."
          },
          "valset": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "operator_address": {
                  "type": "string",
                  "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
                },
                "consensus_pubkey": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                },
                "jailed": {
                  "type": "boolean",
                  "description": "jailed defined whether the validator has been jailed from bonded status or not."
                },
                "status": {
                  "type": "string",
                  "description": "status is the validator status (bonded/unbonding/unbonded).",
                  "default": "BOND_STATUS_UNSPECIFIED",
                  "enum": [
                    "BOND_STATUS_UNSPECIFIED",
                    "BOND_STATUS_UNBONDED",
                    "BOND_STATUS_UNBONDING",
                    "BOND_STATUS_BONDED"
                  ]
                },
                "tokens": {
                  "type": "string",
                  "description": "tokens define the delegated tokens (incl. self-delegation)."
                },
                "delegator_shares": {
                  "type": "string",
                  "description": "delegator_shares defines total shares issued to a validator's delegators."
                },
                "description": {
                  "type": "object",
                  "properties": {
                    "moniker": {
                      "type": "string",
                      "description": "moniker defines a human-readable name for the validator."
                    },
                    "identity": {
                      "type": "string",
                      "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
                    },
                    "website": {
                      "type": "string",
                      "description": "website defines an optional website link."
                    },
                    "security_contact": {
                      "type": "string",
                      "description": "security_contact defines an optional email for security contact."
                    },
                    "details": {
                      "type": "string",
                      "description": "details define other optional details."
                    }
                  },
                  "description": "description defines the description terms for the validator."
                },
                "unbonding_height": {
                  "type": "string",
                  "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.",
                  "format": "int64"
                },
                "unbonding_time": {
                  "type": "string",
                  "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
                  "format": "date-time"
                },
                "commission": {
                  "type": "object",
                  "properties": {
                    "commission_rates": {
                      "type": "object",
                      "properties": {
                        "rate": {
                          "type": "string",
                          "description": "rate is the commission rate charged to delegators, as a fraction."
                        },
                        "max_rate": {
                          "type": "string",
                          "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
                        },
                        "max_change_rate": {
                          "type": "string",
                          "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
                        }
                      },
                      "description": "commission_rates defines the initial commission rates to be used for creating a validator."
                    },
                    "update_time": {
                      "type": "string",
                      "description": "update_time is the last time the commission rate was changed.",
                      "format": "date-time"
                    }
                  },
                  "description": "commission defines the commission parameters."
                },
                "min_self_delegation": {
                  "type": "string",
                  "description": "min_self_delegation is the validator's self declared minimum self delegation.\n\nSince: cosmos-sdk 0.46"
                },
                "unbonding_on_hold_ref_count": {
                  "title": "strictly positive if this validator's unbonding has been stopped by external modules",
                  "type": "string",
                  "format": "int64"
                },
                "unbonding_ids": {
                  "title": "list of unbonding ids, each uniquely identifing an unbonding of this validator",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uint64"
                  }
                }
              },
              "description": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
            }
          }
        },
        "description": "HistoricalInfo contains header and validator information for a given block.\nIt is stored as part of staking module's state, which persists the `n` most\nrecent HistoricalInfo\n(`n` is set by the staking module's `historical_entries` parameter)."
      },
      "cosmos.staking.v1beta1.Params": {
        "type": "object",
        "properties": {
          "unbonding_time": {
            "type": "string",
            "description": "unbonding_time is the time duration of unbonding."
          },
          "max_validators": {
            "type": "integer",
            "description": "max_validators is the maximum number of validators.",
            "format": "int64"
          },
          "max_entries": {
            "type": "integer",
            "description": "max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).",
            "format": "int64"
          },
          "historical_entries": {
            "type": "integer",
            "description": "historical_entries is the number of historical entries to persist.",
            "format": "int64"
          },
          "bond_denom": {
            "type": "string",
            "description": "bond_denom defines the bondable coin denomination."
          },
          "min_commission_rate": {
            "title": "min_commission_rate is the chain-wide minimum commission rate that a validator can charge their delegators",
            "type": "string"
          }
        },
        "description": "Params defines the parameters for the x/staking module."
      },
      "cosmos.staking.v1beta1.Pool": {
        "type": "object",
        "properties": {
          "not_bonded_tokens": {
            "type": "string"
          },
          "bonded_tokens": {
            "type": "string"
          }
        },
        "description": "Pool is used for tracking bonded and not-bonded token supply of the bond\ndenomination."
      },
      "cosmos.staking.v1beta1.QueryDelegationResponse": {
        "type": "object",
        "properties": {
          "delegation_response": {
            "type": "object",
            "properties": {
              "delegation": {
                "type": "object",
                "properties": {
                  "delegator_address": {
                    "type": "string",
                    "description": "delegator_address is the encoded address of the delegator."
                  },
                  "validator_address": {
                    "type": "string",
                    "description": "validator_address is the encoded address of the validator."
                  },
                  "shares": {
                    "type": "string",
                    "description": "shares define the delegation shares received."
                  }
                },
                "description": "Delegation represents the bond with tokens held by an account. It is\nowned by one delegator, and is associated with the voting power of one\nvalidator."
              },
              "balance": {
                "type": "object",
                "properties": {
                  "denom": {
                    "type": "string"
                  },
                  "amount": {
                    "type": "string"
                  }
                },
                "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
              }
            },
            "description": "DelegationResponse is equivalent to Delegation except that it contains a\nbalance in addition to shares which is more suitable for client responses."
          }
        },
        "description": "QueryDelegationResponse is response type for the Query/Delegation RPC method."
      },
      "cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse": {
        "type": "object",
        "properties": {
          "delegation_responses": {
            "type": "array",
            "description": "delegation_responses defines all the delegations' info of a delegator.",
            "items": {
              "type": "object",
              "properties": {
                "delegation": {
                  "type": "object",
                  "properties": {
                    "delegator_address": {
                      "type": "string",
                      "description": "delegator_address is the encoded address of the delegator."
                    },
                    "validator_address": {
                      "type": "string",
                      "description": "validator_address is the encoded address of the validator."
                    },
                    "shares": {
                      "type": "string",
                      "description": "shares define the delegation shares received."
                    }
                  },
                  "description": "Delegation represents the bond with tokens held by an account. It is\nowned by one delegator, and is associated with the voting power of one\nvalidator."
                },
                "balance": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                }
              },
              "description": "DelegationResponse is equivalent to Delegation except that it contains a\nbalance in addition to shares which is more suitable for client responses."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryDelegatorDelegationsResponse is response type for the\nQuery/DelegatorDelegations RPC method."
      },
      "cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse": {
        "type": "object",
        "properties": {
          "unbonding_responses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "delegator_address": {
                  "type": "string",
                  "description": "delegator_address is the encoded address of the delegator."
                },
                "validator_address": {
                  "type": "string",
                  "description": "validator_address is the encoded address of the validator."
                },
                "entries": {
                  "type": "array",
                  "description": "entries are the unbonding delegation entries.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "creation_height": {
                        "type": "string",
                        "description": "creation_height is the height which the unbonding took place.",
                        "format": "int64"
                      },
                      "completion_time": {
                        "type": "string",
                        "description": "completion_time is the unix time for unbonding completion.",
                        "format": "date-time"
                      },
                      "initial_balance": {
                        "type": "string",
                        "description": "initial_balance defines the tokens initially scheduled to receive at completion."
                      },
                      "balance": {
                        "type": "string",
                        "description": "balance defines the tokens to receive at completion."
                      },
                      "unbonding_id": {
                        "title": "Incrementing id that uniquely identifies this entry",
                        "type": "string",
                        "format": "uint64"
                      },
                      "unbonding_on_hold_ref_count": {
                        "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
                        "type": "string",
                        "format": "int64"
                      }
                    },
                    "description": "UnbondingDelegationEntry defines an unbonding object with relevant metadata."
                  }
                }
              },
              "description": "UnbondingDelegation stores all of a single delegator's unbonding bonds\nfor a single validator in an time-ordered list."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryUnbondingDelegatorDelegationsResponse is response type for the\nQuery/UnbondingDelegatorDelegations RPC method."
      },
      "cosmos.staking.v1beta1.QueryDelegatorValidatorResponse": {
        "type": "object",
        "properties": {
          "validator": {
            "type": "object",
            "properties": {
              "operator_address": {
                "type": "string",
                "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
              },
              "consensus_pubkey": {
                "type": "object",
                "properties": {
                  "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                  },
                  "value": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                  }
                },
                "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
              },
              "jailed": {
                "type": "boolean",
                "description": "jailed defined whether the validator has been jailed from bonded status or not."
              },
              "status": {
                "type": "string",
                "description": "status is the validator status (bonded/unbonding/unbonded).",
                "default": "BOND_STATUS_UNSPECIFIED",
                "enum": [
                  "BOND_STATUS_UNSPECIFIED",
                  "BOND_STATUS_UNBONDED",
                  "BOND_STATUS_UNBONDING",
                  "BOND_STATUS_BONDED"
                ]
              },
              "tokens": {
                "type": "string",
                "description": "tokens define the delegated tokens (incl. self-delegation)."
              },
              "delegator_shares": {
                "type": "string",
                "description": "delegator_shares defines total shares issued to a validator's delegators."
              },
              "description": {
                "type": "object",
                "properties": {
                  "moniker": {
                    "type": "string",
                    "description": "moniker defines a human-readable name for the validator."
                  },
                  "identity": {
                    "type": "string",
                    "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
                  },
                  "website": {
                    "type": "string",
                    "description": "website defines an optional website link."
                  },
                  "security_contact": {
                    "type": "string",
                    "description": "security_contact defines an optional email for security contact."
                  },
                  "details": {
                    "type": "string",
                    "description": "details define other optional details."
                  }
                },
                "description": "description defines the description terms for the validator."
              },
              "unbonding_height": {
                "type": "string",
                "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.",
                "format": "int64"
              },
              "unbonding_time": {
                "type": "string",
                "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
                "format": "date-time"
              },
              "commission": {
                "type": "object",
                "properties": {
                  "commission_rates": {
                    "type": "object",
                    "properties": {
                      "rate": {
                        "type": "string",
                        "description": "rate is the commission rate charged to delegators, as a fraction."
                      },
                      "max_rate": {
                        "type": "string",
                        "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
                      },
                      "max_change_rate": {
                        "type": "string",
                        "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
                      }
                    },
                    "description": "commission_rates defines the initial commission rates to be used for creating a validator."
                  },
                  "update_time": {
                    "type": "string",
                    "description": "update_time is the last time the commission rate was changed.",
                    "format": "date-time"
                  }
                },
                "description": "commission defines the commission parameters."
              },
              "min_self_delegation": {
                "type": "string",
                "description": "min_self_delegation is the validator's self declared minimum self delegation.\n\nSince: cosmos-sdk 0.46"
              },
              "unbonding_on_hold_ref_count": {
                "title": "strictly positive if this validator's unbonding has been stopped by external modules",
                "type": "string",
                "format": "int64"
              },
              "unbonding_ids": {
                "title": "list of unbonding ids, each uniquely identifing an unbonding of this validator",
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uint64"
                }
              }
            },
            "description": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
          }
        },
        "description": "QueryDelegatorValidatorResponse response type for the\nQuery/DelegatorValidator RPC method."
      },
      "cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse": {
        "type": "object",
        "properties": {
          "validators": {
            "type": "array",
            "description": "validators defines the validators' info of a delegator.",
            "items": {
              "type": "object",
              "properties": {
                "operator_address": {
                  "type": "string",
                  "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
                },
                "consensus_pubkey": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                },
                "jailed": {
                  "type": "boolean",
                  "description": "jailed defined whether the validator has been jailed from bonded status or not."
                },
                "status": {
                  "type": "string",
                  "description": "status is the validator status (bonded/unbonding/unbonded).",
                  "default": "BOND_STATUS_UNSPECIFIED",
                  "enum": [
                    "BOND_STATUS_UNSPECIFIED",
                    "BOND_STATUS_UNBONDED",
                    "BOND_STATUS_UNBONDING",
                    "BOND_STATUS_BONDED"
                  ]
                },
                "tokens": {
                  "type": "string",
                  "description": "tokens define the delegated tokens (incl. self-delegation)."
                },
                "delegator_shares": {
                  "type": "string",
                  "description": "delegator_shares defines total shares issued to a validator's delegators."
                },
                "description": {
                  "type": "object",
                  "properties": {
                    "moniker": {
                      "type": "string",
                      "description": "moniker defines a human-readable name for the validator."
                    },
                    "identity": {
                      "type": "string",
                      "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
                    },
                    "website": {
                      "type": "string",
                      "description": "website defines an optional website link."
                    },
                    "security_contact": {
                      "type": "string",
                      "description": "security_contact defines an optional email for security contact."
                    },
                    "details": {
                      "type": "string",
                      "description": "details define other optional details."
                    }
                  },
                  "description": "description defines the description terms for the validator."
                },
                "unbonding_height": {
                  "type": "string",
                  "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.",
                  "format": "int64"
                },
                "unbonding_time": {
                  "type": "string",
                  "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
                  "format": "date-time"
                },
                "commission": {
                  "type": "object",
                  "properties": {
                    "commission_rates": {
                      "type": "object",
                      "properties": {
                        "rate": {
                          "type": "string",
                          "description": "rate is the commission rate charged to delegators, as a fraction."
                        },
                        "max_rate": {
                          "type": "string",
                          "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
                        },
                        "max_change_rate": {
                          "type": "string",
                          "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
                        }
                      },
                      "description": "commission_rates defines the initial commission rates to be used for creating a validator."
                    },
                    "update_time": {
                      "type": "string",
                      "description": "update_time is the last time the commission rate was changed.",
                      "format": "date-time"
                    }
                  },
                  "description": "commission defines the commission parameters."
                },
                "min_self_delegation": {
                  "type": "string",
                  "description": "min_self_delegation is the validator's self declared minimum self delegation.\n\nSince: cosmos-sdk 0.46"
                },
                "unbonding_on_hold_ref_count": {
                  "title": "strictly positive if this validator's unbonding has been stopped by external modules",
                  "type": "string",
                  "format": "int64"
                },
                "unbonding_ids": {
                  "title": "list of unbonding ids, each uniquely identifing an unbonding of this validator",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uint64"
                  }
                }
              },
              "description": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryDelegatorValidatorsResponse is response type for the\nQuery/DelegatorValidators RPC method."
      },
      "cosmos.staking.v1beta1.QueryHistoricalInfoResponse": {
        "type": "object",
        "properties": {
          "hist": {
            "type": "object",
            "properties": {
              "header": {
                "type": "object",
                "properties": {
                  "version": {
                    "title": "basic block info",
                    "type": "object",
                    "properties": {
                      "block": {
                        "type": "string",
                        "format": "uint64"
                      },
                      "app": {
                        "type": "string",
                        "format": "uint64"
                      }
                    },
                    "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                  },
                  "chain_id": {
                    "type": "string"
                  },
                  "height": {
                    "type": "string",
                    "format": "int64"
                  },
                  "time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "last_block_id": {
                    "title": "prev block info",
                    "type": "object",
                    "properties": {
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "part_set_header": {
                        "title": "PartsetHeader",
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  },
                  "last_commit_hash": {
                    "title": "hashes of block data",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "data_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "validators_hash": {
                    "title": "hashes from the app output from the prev block",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "next_validators_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "consensus_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "app_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "last_results_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "evidence_hash": {
                    "title": "consensus info",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "proposer_address": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  }
                },
                "description": "Header defines the structure of a block header."
              },
              "valset": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "operator_address": {
                      "type": "string",
                      "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
                    },
                    "consensus_pubkey": {
                      "type": "object",
                      "properties": {
                        "type_url": {
                          "type": "string",
                          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                        },
                        "value": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "Must be a valid serialized protocol buffer of the above specified type.",
                          "format": "byte"
                        }
                      },
                      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                    },
                    "jailed": {
                      "type": "boolean",
                      "description": "jailed defined whether the validator has been jailed from bonded status or not."
                    },
                    "status": {
                      "type": "string",
                      "description": "status is the validator status (bonded/unbonding/unbonded).",
                      "default": "BOND_STATUS_UNSPECIFIED",
                      "enum": [
                        "BOND_STATUS_UNSPECIFIED",
                        "BOND_STATUS_UNBONDED",
                        "BOND_STATUS_UNBONDING",
                        "BOND_STATUS_BONDED"
                      ]
                    },
                    "tokens": {
                      "type": "string",
                      "description": "tokens define the delegated tokens (incl. self-delegation)."
                    },
                    "delegator_shares": {
                      "type": "string",
                      "description": "delegator_shares defines total shares issued to a validator's delegators."
                    },
                    "description": {
                      "type": "object",
                      "properties": {
                        "moniker": {
                          "type": "string",
                          "description": "moniker defines a human-readable name for the validator."
                        },
                        "identity": {
                          "type": "string",
                          "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
                        },
                        "website": {
                          "type": "string",
                          "description": "website defines an optional website link."
                        },
                        "security_contact": {
                          "type": "string",
                          "description": "security_contact defines an optional email for security contact."
                        },
                        "details": {
                          "type": "string",
                          "description": "details define other optional details."
                        }
                      },
                      "description": "description defines the description terms for the validator."
                    },
                    "unbonding_height": {
                      "type": "string",
                      "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.",
                      "format": "int64"
                    },
                    "unbonding_time": {
                      "type": "string",
                      "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
                      "format": "date-time"
                    },
                    "commission": {
                      "type": "object",
                      "properties": {
                        "commission_rates": {
                          "type": "object",
                          "properties": {
                            "rate": {
                              "type": "string",
                              "description": "rate is the commission rate charged to delegators, as a fraction."
                            },
                            "max_rate": {
                              "type": "string",
                              "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
                            },
                            "max_change_rate": {
                              "type": "string",
                              "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
                            }
                          },
                          "description": "commission_rates defines the initial commission rates to be used for creating a validator."
                        },
                        "update_time": {
                          "type": "string",
                          "description": "update_time is the last time the commission rate was changed.",
                          "format": "date-time"
                        }
                      },
                      "description": "commission defines the commission parameters."
                    },
                    "min_self_delegation": {
                      "type": "string",
                      "description": "min_self_delegation is the validator's self declared minimum self delegation.\n\nSince: cosmos-sdk 0.46"
                    },
                    "unbonding_on_hold_ref_count": {
                      "title": "strictly positive if this validator's unbonding has been stopped by external modules",
                      "type": "string",
                      "format": "int64"
                    },
                    "unbonding_ids": {
                      "title": "list of unbonding ids, each uniquely identifing an unbonding of this validator",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uint64"
                      }
                    }
                  },
                  "description": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
                }
              }
            },
            "description": "hist defines the historical info at the given height."
          }
        },
        "description": "QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC\nmethod."
      },
      "cosmos.staking.v1beta1.QueryParamsResponse": {
        "type": "object",
        "properties": {
          "params": {
            "type": "object",
            "properties": {
              "unbonding_time": {
                "type": "string",
                "description": "unbonding_time is the time duration of unbonding."
              },
              "max_validators": {
                "type": "integer",
                "description": "max_validators is the maximum number of validators.",
                "format": "int64"
              },
              "max_entries": {
                "type": "integer",
                "description": "max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).",
                "format": "int64"
              },
              "historical_entries": {
                "type": "integer",
                "description": "historical_entries is the number of historical entries to persist.",
                "format": "int64"
              },
              "bond_denom": {
                "type": "string",
                "description": "bond_denom defines the bondable coin denomination."
              },
              "min_commission_rate": {
                "title": "min_commission_rate is the chain-wide minimum commission rate that a validator can charge their delegators",
                "type": "string"
              }
            },
            "description": "params holds all the parameters of this module."
          }
        },
        "description": "QueryParamsResponse is response type for the Query/Params RPC method."
      },
      "cosmos.staking.v1beta1.QueryPoolResponse": {
        "type": "object",
        "properties": {
          "pool": {
            "type": "object",
            "properties": {
              "not_bonded_tokens": {
                "type": "string"
              },
              "bonded_tokens": {
                "type": "string"
              }
            },
            "description": "pool defines the pool info."
          }
        },
        "description": "QueryPoolResponse is response type for the Query/Pool RPC method."
      },
      "cosmos.staking.v1beta1.QueryRedelegationsResponse": {
        "type": "object",
        "properties": {
          "redelegation_responses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "redelegation": {
                  "type": "object",
                  "properties": {
                    "delegator_address": {
                      "type": "string",
                      "description": "delegator_address is the bech32-encoded address of the delegator."
                    },
                    "validator_src_address": {
                      "type": "string",
                      "description": "validator_src_address is the validator redelegation source operator address."
                    },
                    "validator_dst_address": {
                      "type": "string",
                      "description": "validator_dst_address is the validator redelegation destination operator address."
                    },
                    "entries": {
                      "type": "array",
                      "description": "entries are the redelegation entries.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "creation_height": {
                            "type": "string",
                            "description": "creation_height  defines the height which the redelegation took place.",
                            "format": "int64"
                          },
                          "completion_time": {
                            "type": "string",
                            "description": "completion_time defines the unix time for redelegation completion.",
                            "format": "date-time"
                          },
                          "initial_balance": {
                            "type": "string",
                            "description": "initial_balance defines the initial balance when redelegation started."
                          },
                          "shares_dst": {
                            "type": "string",
                            "description": "shares_dst is the amount of destination-validator shares created by redelegation."
                          },
                          "unbonding_id": {
                            "title": "Incrementing id that uniquely identifies this entry",
                            "type": "string",
                            "format": "uint64"
                          },
                          "unbonding_on_hold_ref_count": {
                            "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
                            "type": "string",
                            "format": "int64"
                          }
                        },
                        "description": "RedelegationEntry defines a redelegation object with relevant metadata."
                      }
                    }
                  },
                  "description": "Redelegation contains the list of a particular delegator's redelegating bonds\nfrom a particular source validator to a particular destination validator."
                },
                "entries": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "redelegation_entry": {
                        "type": "object",
                        "properties": {
                          "creation_height": {
                            "type": "string",
                            "description": "creation_height  defines the height which the redelegation took place.",
                            "format": "int64"
                          },
                          "completion_time": {
                            "type": "string",
                            "description": "completion_time defines the unix time for redelegation completion.",
                            "format": "date-time"
                          },
                          "initial_balance": {
                            "type": "string",
                            "description": "initial_balance defines the initial balance when redelegation started."
                          },
                          "shares_dst": {
                            "type": "string",
                            "description": "shares_dst is the amount of destination-validator shares created by redelegation."
                          },
                          "unbonding_id": {
                            "title": "Incrementing id that uniquely identifies this entry",
                            "type": "string",
                            "format": "uint64"
                          },
                          "unbonding_on_hold_ref_count": {
                            "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
                            "type": "string",
                            "format": "int64"
                          }
                        },
                        "description": "RedelegationEntry defines a redelegation object with relevant metadata."
                      },
                      "balance": {
                        "type": "string"
                      }
                    },
                    "description": "RedelegationEntryResponse is equivalent to a RedelegationEntry except that it\ncontains a balance in addition to shares which is more suitable for client\nresponses."
                  }
                }
              },
              "description": "RedelegationResponse is equivalent to a Redelegation except that its entries\ncontain a balance in addition to shares which is more suitable for client\nresponses."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryRedelegationsResponse is response type for the Query/Redelegations RPC\nmethod."
      },
      "cosmos.staking.v1beta1.QueryUnbondingDelegationResponse": {
        "type": "object",
        "properties": {
          "unbond": {
            "type": "object",
            "properties": {
              "delegator_address": {
                "type": "string",
                "description": "delegator_address is the encoded address of the delegator."
              },
              "validator_address": {
                "type": "string",
                "description": "validator_address is the encoded address of the validator."
              },
              "entries": {
                "type": "array",
                "description": "entries are the unbonding delegation entries.",
                "items": {
                  "type": "object",
                  "properties": {
                    "creation_height": {
                      "type": "string",
                      "description": "creation_height is the height which the unbonding took place.",
                      "format": "int64"
                    },
                    "completion_time": {
                      "type": "string",
                      "description": "completion_time is the unix time for unbonding completion.",
                      "format": "date-time"
                    },
                    "initial_balance": {
                      "type": "string",
                      "description": "initial_balance defines the tokens initially scheduled to receive at completion."
                    },
                    "balance": {
                      "type": "string",
                      "description": "balance defines the tokens to receive at completion."
                    },
                    "unbonding_id": {
                      "title": "Incrementing id that uniquely identifies this entry",
                      "type": "string",
                      "format": "uint64"
                    },
                    "unbonding_on_hold_ref_count": {
                      "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
                      "type": "string",
                      "format": "int64"
                    }
                  },
                  "description": "UnbondingDelegationEntry defines an unbonding object with relevant metadata."
                }
              }
            },
            "description": "UnbondingDelegation stores all of a single delegator's unbonding bonds\nfor a single validator in an time-ordered list."
          }
        },
        "description": "QueryDelegationResponse is response type for the Query/UnbondingDelegation\nRPC method."
      },
      "cosmos.staking.v1beta1.QueryValidatorDelegationsResponse": {
        "title": "QueryValidatorDelegationsResponse is response type for the\nQuery/ValidatorDelegations RPC method",
        "type": "object",
        "properties": {
          "delegation_responses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "delegation": {
                  "type": "object",
                  "properties": {
                    "delegator_address": {
                      "type": "string",
                      "description": "delegator_address is the encoded address of the delegator."
                    },
                    "validator_address": {
                      "type": "string",
                      "description": "validator_address is the encoded address of the validator."
                    },
                    "shares": {
                      "type": "string",
                      "description": "shares define the delegation shares received."
                    }
                  },
                  "description": "Delegation represents the bond with tokens held by an account. It is\nowned by one delegator, and is associated with the voting power of one\nvalidator."
                },
                "balance": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                }
              },
              "description": "DelegationResponse is equivalent to Delegation except that it contains a\nbalance in addition to shares which is more suitable for client responses."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        }
      },
      "cosmos.staking.v1beta1.QueryValidatorResponse": {
        "title": "QueryValidatorResponse is response type for the Query/Validator RPC method",
        "type": "object",
        "properties": {
          "validator": {
            "type": "object",
            "properties": {
              "operator_address": {
                "type": "string",
                "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
              },
              "consensus_pubkey": {
                "type": "object",
                "properties": {
                  "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                  },
                  "value": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                  }
                },
                "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
              },
              "jailed": {
                "type": "boolean",
                "description": "jailed defined whether the validator has been jailed from bonded status or not."
              },
              "status": {
                "type": "string",
                "description": "status is the validator status (bonded/unbonding/unbonded).",
                "default": "BOND_STATUS_UNSPECIFIED",
                "enum": [
                  "BOND_STATUS_UNSPECIFIED",
                  "BOND_STATUS_UNBONDED",
                  "BOND_STATUS_UNBONDING",
                  "BOND_STATUS_BONDED"
                ]
              },
              "tokens": {
                "type": "string",
                "description": "tokens define the delegated tokens (incl. self-delegation)."
              },
              "delegator_shares": {
                "type": "string",
                "description": "delegator_shares defines total shares issued to a validator's delegators."
              },
              "description": {
                "type": "object",
                "properties": {
                  "moniker": {
                    "type": "string",
                    "description": "moniker defines a human-readable name for the validator."
                  },
                  "identity": {
                    "type": "string",
                    "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
                  },
                  "website": {
                    "type": "string",
                    "description": "website defines an optional website link."
                  },
                  "security_contact": {
                    "type": "string",
                    "description": "security_contact defines an optional email for security contact."
                  },
                  "details": {
                    "type": "string",
                    "description": "details define other optional details."
                  }
                },
                "description": "description defines the description terms for the validator."
              },
              "unbonding_height": {
                "type": "string",
                "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.",
                "format": "int64"
              },
              "unbonding_time": {
                "type": "string",
                "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
                "format": "date-time"
              },
              "commission": {
                "type": "object",
                "properties": {
                  "commission_rates": {
                    "type": "object",
                    "properties": {
                      "rate": {
                        "type": "string",
                        "description": "rate is the commission rate charged to delegators, as a fraction."
                      },
                      "max_rate": {
                        "type": "string",
                        "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
                      },
                      "max_change_rate": {
                        "type": "string",
                        "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
                      }
                    },
                    "description": "commission_rates defines the initial commission rates to be used for creating a validator."
                  },
                  "update_time": {
                    "type": "string",
                    "description": "update_time is the last time the commission rate was changed.",
                    "format": "date-time"
                  }
                },
                "description": "commission defines the commission parameters."
              },
              "min_self_delegation": {
                "type": "string",
                "description": "min_self_delegation is the validator's self declared minimum self delegation.\n\nSince: cosmos-sdk 0.46"
              },
              "unbonding_on_hold_ref_count": {
                "title": "strictly positive if this validator's unbonding has been stopped by external modules",
                "type": "string",
                "format": "int64"
              },
              "unbonding_ids": {
                "title": "list of unbonding ids, each uniquely identifing an unbonding of this validator",
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uint64"
                }
              }
            },
            "description": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
          }
        }
      },
      "cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse": {
        "type": "object",
        "properties": {
          "unbonding_responses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "delegator_address": {
                  "type": "string",
                  "description": "delegator_address is the encoded address of the delegator."
                },
                "validator_address": {
                  "type": "string",
                  "description": "validator_address is the encoded address of the validator."
                },
                "entries": {
                  "type": "array",
                  "description": "entries are the unbonding delegation entries.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "creation_height": {
                        "type": "string",
                        "description": "creation_height is the height which the unbonding took place.",
                        "format": "int64"
                      },
                      "completion_time": {
                        "type": "string",
                        "description": "completion_time is the unix time for unbonding completion.",
                        "format": "date-time"
                      },
                      "initial_balance": {
                        "type": "string",
                        "description": "initial_balance defines the tokens initially scheduled to receive at completion."
                      },
                      "balance": {
                        "type": "string",
                        "description": "balance defines the tokens to receive at completion."
                      },
                      "unbonding_id": {
                        "title": "Incrementing id that uniquely identifies this entry",
                        "type": "string",
                        "format": "uint64"
                      },
                      "unbonding_on_hold_ref_count": {
                        "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
                        "type": "string",
                        "format": "int64"
                      }
                    },
                    "description": "UnbondingDelegationEntry defines an unbonding object with relevant metadata."
                  }
                }
              },
              "description": "UnbondingDelegation stores all of a single delegator's unbonding bonds\nfor a single validator in an time-ordered list."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryValidatorUnbondingDelegationsResponse is response type for the\nQuery/ValidatorUnbondingDelegations RPC method."
      },
      "cosmos.staking.v1beta1.QueryValidatorsResponse": {
        "title": "QueryValidatorsResponse is response type for the Query/Validators RPC method",
        "type": "object",
        "properties": {
          "validators": {
            "type": "array",
            "description": "validators contains all the queried validators.",
            "items": {
              "type": "object",
              "properties": {
                "operator_address": {
                  "type": "string",
                  "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
                },
                "consensus_pubkey": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                },
                "jailed": {
                  "type": "boolean",
                  "description": "jailed defined whether the validator has been jailed from bonded status or not."
                },
                "status": {
                  "type": "string",
                  "description": "status is the validator status (bonded/unbonding/unbonded).",
                  "default": "BOND_STATUS_UNSPECIFIED",
                  "enum": [
                    "BOND_STATUS_UNSPECIFIED",
                    "BOND_STATUS_UNBONDED",
                    "BOND_STATUS_UNBONDING",
                    "BOND_STATUS_BONDED"
                  ]
                },
                "tokens": {
                  "type": "string",
                  "description": "tokens define the delegated tokens (incl. self-delegation)."
                },
                "delegator_shares": {
                  "type": "string",
                  "description": "delegator_shares defines total shares issued to a validator's delegators."
                },
                "description": {
                  "type": "object",
                  "properties": {
                    "moniker": {
                      "type": "string",
                      "description": "moniker defines a human-readable name for the validator."
                    },
                    "identity": {
                      "type": "string",
                      "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
                    },
                    "website": {
                      "type": "string",
                      "description": "website defines an optional website link."
                    },
                    "security_contact": {
                      "type": "string",
                      "description": "security_contact defines an optional email for security contact."
                    },
                    "details": {
                      "type": "string",
                      "description": "details define other optional details."
                    }
                  },
                  "description": "description defines the description terms for the validator."
                },
                "unbonding_height": {
                  "type": "string",
                  "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.",
                  "format": "int64"
                },
                "unbonding_time": {
                  "type": "string",
                  "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
                  "format": "date-time"
                },
                "commission": {
                  "type": "object",
                  "properties": {
                    "commission_rates": {
                      "type": "object",
                      "properties": {
                        "rate": {
                          "type": "string",
                          "description": "rate is the commission rate charged to delegators, as a fraction."
                        },
                        "max_rate": {
                          "type": "string",
                          "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
                        },
                        "max_change_rate": {
                          "type": "string",
                          "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
                        }
                      },
                      "description": "commission_rates defines the initial commission rates to be used for creating a validator."
                    },
                    "update_time": {
                      "type": "string",
                      "description": "update_time is the last time the commission rate was changed.",
                      "format": "date-time"
                    }
                  },
                  "description": "commission defines the commission parameters."
                },
                "min_self_delegation": {
                  "type": "string",
                  "description": "min_self_delegation is the validator's self declared minimum self delegation.\n\nSince: cosmos-sdk 0.46"
                },
                "unbonding_on_hold_ref_count": {
                  "title": "strictly positive if this validator's unbonding has been stopped by external modules",
                  "type": "string",
                  "format": "int64"
                },
                "unbonding_ids": {
                  "title": "list of unbonding ids, each uniquely identifing an unbonding of this validator",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uint64"
                  }
                }
              },
              "description": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        }
      },
      "cosmos.staking.v1beta1.Redelegation": {
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string",
            "description": "delegator_address is the bech32-encoded address of the delegator."
          },
          "validator_src_address": {
            "type": "string",
            "description": "validator_src_address is the validator redelegation source operator address."
          },
          "validator_dst_address": {
            "type": "string",
            "description": "validator_dst_address is the validator redelegation destination operator address."
          },
          "entries": {
            "type": "array",
            "description": "entries are the redelegation entries.",
            "items": {
              "type": "object",
              "properties": {
                "creation_height": {
                  "type": "string",
                  "description": "creation_height  defines the height which the redelegation took place.",
                  "format": "int64"
                },
                "completion_time": {
                  "type": "string",
                  "description": "completion_time defines the unix time for redelegation completion.",
                  "format": "date-time"
                },
                "initial_balance": {
                  "type": "string",
                  "description": "initial_balance defines the initial balance when redelegation started."
                },
                "shares_dst": {
                  "type": "string",
                  "description": "shares_dst is the amount of destination-validator shares created by redelegation."
                },
                "unbonding_id": {
                  "title": "Incrementing id that uniquely identifies this entry",
                  "type": "string",
                  "format": "uint64"
                },
                "unbonding_on_hold_ref_count": {
                  "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
                  "type": "string",
                  "format": "int64"
                }
              },
              "description": "RedelegationEntry defines a redelegation object with relevant metadata."
            }
          }
        },
        "description": "Redelegation contains the list of a particular delegator's redelegating bonds\nfrom a particular source validator to a particular destination validator."
      },
      "cosmos.staking.v1beta1.RedelegationEntry": {
        "type": "object",
        "properties": {
          "creation_height": {
            "type": "string",
            "description": "creation_height  defines the height which the redelegation took place.",
            "format": "int64"
          },
          "completion_time": {
            "type": "string",
            "description": "completion_time defines the unix time for redelegation completion.",
            "format": "date-time"
          },
          "initial_balance": {
            "type": "string",
            "description": "initial_balance defines the initial balance when redelegation started."
          },
          "shares_dst": {
            "type": "string",
            "description": "shares_dst is the amount of destination-validator shares created by redelegation."
          },
          "unbonding_id": {
            "title": "Incrementing id that uniquely identifies this entry",
            "type": "string",
            "format": "uint64"
          },
          "unbonding_on_hold_ref_count": {
            "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
            "type": "string",
            "format": "int64"
          }
        },
        "description": "RedelegationEntry defines a redelegation object with relevant metadata."
      },
      "cosmos.staking.v1beta1.RedelegationEntryResponse": {
        "type": "object",
        "properties": {
          "redelegation_entry": {
            "type": "object",
            "properties": {
              "creation_height": {
                "type": "string",
                "description": "creation_height  defines the height which the redelegation took place.",
                "format": "int64"
              },
              "completion_time": {
                "type": "string",
                "description": "completion_time defines the unix time for redelegation completion.",
                "format": "date-time"
              },
              "initial_balance": {
                "type": "string",
                "description": "initial_balance defines the initial balance when redelegation started."
              },
              "shares_dst": {
                "type": "string",
                "description": "shares_dst is the amount of destination-validator shares created by redelegation."
              },
              "unbonding_id": {
                "title": "Incrementing id that uniquely identifies this entry",
                "type": "string",
                "format": "uint64"
              },
              "unbonding_on_hold_ref_count": {
                "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
                "type": "string",
                "format": "int64"
              }
            },
            "description": "RedelegationEntry defines a redelegation object with relevant metadata."
          },
          "balance": {
            "type": "string"
          }
        },
        "description": "RedelegationEntryResponse is equivalent to a RedelegationEntry except that it\ncontains a balance in addition to shares which is more suitable for client\nresponses."
      },
      "cosmos.staking.v1beta1.RedelegationResponse": {
        "type": "object",
        "properties": {
          "redelegation": {
            "type": "object",
            "properties": {
              "delegator_address": {
                "type": "string",
                "description": "delegator_address is the bech32-encoded address of the delegator."
              },
              "validator_src_address": {
                "type": "string",
                "description": "validator_src_address is the validator redelegation source operator address."
              },
              "validator_dst_address": {
                "type": "string",
                "description": "validator_dst_address is the validator redelegation destination operator address."
              },
              "entries": {
                "type": "array",
                "description": "entries are the redelegation entries.",
                "items": {
                  "type": "object",
                  "properties": {
                    "creation_height": {
                      "type": "string",
                      "description": "creation_height  defines the height which the redelegation took place.",
                      "format": "int64"
                    },
                    "completion_time": {
                      "type": "string",
                      "description": "completion_time defines the unix time for redelegation completion.",
                      "format": "date-time"
                    },
                    "initial_balance": {
                      "type": "string",
                      "description": "initial_balance defines the initial balance when redelegation started."
                    },
                    "shares_dst": {
                      "type": "string",
                      "description": "shares_dst is the amount of destination-validator shares created by redelegation."
                    },
                    "unbonding_id": {
                      "title": "Incrementing id that uniquely identifies this entry",
                      "type": "string",
                      "format": "uint64"
                    },
                    "unbonding_on_hold_ref_count": {
                      "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
                      "type": "string",
                      "format": "int64"
                    }
                  },
                  "description": "RedelegationEntry defines a redelegation object with relevant metadata."
                }
              }
            },
            "description": "Redelegation contains the list of a particular delegator's redelegating bonds\nfrom a particular source validator to a particular destination validator."
          },
          "entries": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "redelegation_entry": {
                  "type": "object",
                  "properties": {
                    "creation_height": {
                      "type": "string",
                      "description": "creation_height  defines the height which the redelegation took place.",
                      "format": "int64"
                    },
                    "completion_time": {
                      "type": "string",
                      "description": "completion_time defines the unix time for redelegation completion.",
                      "format": "date-time"
                    },
                    "initial_balance": {
                      "type": "string",
                      "description": "initial_balance defines the initial balance when redelegation started."
                    },
                    "shares_dst": {
                      "type": "string",
                      "description": "shares_dst is the amount of destination-validator shares created by redelegation."
                    },
                    "unbonding_id": {
                      "title": "Incrementing id that uniquely identifies this entry",
                      "type": "string",
                      "format": "uint64"
                    },
                    "unbonding_on_hold_ref_count": {
                      "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
                      "type": "string",
                      "format": "int64"
                    }
                  },
                  "description": "RedelegationEntry defines a redelegation object with relevant metadata."
                },
                "balance": {
                  "type": "string"
                }
              },
              "description": "RedelegationEntryResponse is equivalent to a RedelegationEntry except that it\ncontains a balance in addition to shares which is more suitable for client\nresponses."
            }
          }
        },
        "description": "RedelegationResponse is equivalent to a Redelegation except that its entries\ncontain a balance in addition to shares which is more suitable for client\nresponses."
      },
      "cosmos.staking.v1beta1.UnbondingDelegation": {
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string",
            "description": "delegator_address is the encoded address of the delegator."
          },
          "validator_address": {
            "type": "string",
            "description": "validator_address is the encoded address of the validator."
          },
          "entries": {
            "type": "array",
            "description": "entries are the unbonding delegation entries.",
            "items": {
              "type": "object",
              "properties": {
                "creation_height": {
                  "type": "string",
                  "description": "creation_height is the height which the unbonding took place.",
                  "format": "int64"
                },
                "completion_time": {
                  "type": "string",
                  "description": "completion_time is the unix time for unbonding completion.",
                  "format": "date-time"
                },
                "initial_balance": {
                  "type": "string",
                  "description": "initial_balance defines the tokens initially scheduled to receive at completion."
                },
                "balance": {
                  "type": "string",
                  "description": "balance defines the tokens to receive at completion."
                },
                "unbonding_id": {
                  "title": "Incrementing id that uniquely identifies this entry",
                  "type": "string",
                  "format": "uint64"
                },
                "unbonding_on_hold_ref_count": {
                  "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
                  "type": "string",
                  "format": "int64"
                }
              },
              "description": "UnbondingDelegationEntry defines an unbonding object with relevant metadata."
            }
          }
        },
        "description": "UnbondingDelegation stores all of a single delegator's unbonding bonds\nfor a single validator in an time-ordered list."
      },
      "cosmos.staking.v1beta1.UnbondingDelegationEntry": {
        "type": "object",
        "properties": {
          "creation_height": {
            "type": "string",
            "description": "creation_height is the height which the unbonding took place.",
            "format": "int64"
          },
          "completion_time": {
            "type": "string",
            "description": "completion_time is the unix time for unbonding completion.",
            "format": "date-time"
          },
          "initial_balance": {
            "type": "string",
            "description": "initial_balance defines the tokens initially scheduled to receive at completion."
          },
          "balance": {
            "type": "string",
            "description": "balance defines the tokens to receive at completion."
          },
          "unbonding_id": {
            "title": "Incrementing id that uniquely identifies this entry",
            "type": "string",
            "format": "uint64"
          },
          "unbonding_on_hold_ref_count": {
            "title": "Strictly positive if this entry's unbonding has been stopped by external modules",
            "type": "string",
            "format": "int64"
          }
        },
        "description": "UnbondingDelegationEntry defines an unbonding object with relevant metadata."
      },
      "cosmos.staking.v1beta1.Validator": {
        "type": "object",
        "properties": {
          "operator_address": {
            "type": "string",
            "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
          },
          "consensus_pubkey": {
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
          },
          "jailed": {
            "type": "boolean",
            "description": "jailed defined whether the validator has been jailed from bonded status or not."
          },
          "status": {
            "type": "string",
            "description": "status is the validator status (bonded/unbonding/unbonded).",
            "default": "BOND_STATUS_UNSPECIFIED",
            "enum": [
              "BOND_STATUS_UNSPECIFIED",
              "BOND_STATUS_UNBONDED",
              "BOND_STATUS_UNBONDING",
              "BOND_STATUS_BONDED"
            ]
          },
          "tokens": {
            "type": "string",
            "description": "tokens define the delegated tokens (incl. self-delegation)."
          },
          "delegator_shares": {
            "type": "string",
            "description": "delegator_shares defines total shares issued to a validator's delegators."
          },
          "description": {
            "type": "object",
            "properties": {
              "moniker": {
                "type": "string",
                "description": "moniker defines a human-readable name for the validator."
              },
              "identity": {
                "type": "string",
                "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
              },
              "website": {
                "type": "string",
                "description": "website defines an optional website link."
              },
              "security_contact": {
                "type": "string",
                "description": "security_contact defines an optional email for security contact."
              },
              "details": {
                "type": "string",
                "description": "details define other optional details."
              }
            },
            "description": "description defines the description terms for the validator."
          },
          "unbonding_height": {
            "type": "string",
            "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.",
            "format": "int64"
          },
          "unbonding_time": {
            "type": "string",
            "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
            "format": "date-time"
          },
          "commission": {
            "type": "object",
            "properties": {
              "commission_rates": {
                "type": "object",
                "properties": {
                  "rate": {
                    "type": "string",
                    "description": "rate is the commission rate charged to delegators, as a fraction."
                  },
                  "max_rate": {
                    "type": "string",
                    "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
                  },
                  "max_change_rate": {
                    "type": "string",
                    "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
                  }
                },
                "description": "commission_rates defines the initial commission rates to be used for creating a validator."
              },
              "update_time": {
                "type": "string",
                "description": "update_time is the last time the commission rate was changed.",
                "format": "date-time"
              }
            },
            "description": "commission defines the commission parameters."
          },
          "min_self_delegation": {
            "type": "string",
            "description": "min_self_delegation is the validator's self declared minimum self delegation.\n\nSince: cosmos-sdk 0.46"
          },
          "unbonding_on_hold_ref_count": {
            "title": "strictly positive if this validator's unbonding has been stopped by external modules",
            "type": "string",
            "format": "int64"
          },
          "unbonding_ids": {
            "title": "list of unbonding ids, each uniquely identifing an unbonding of this validator",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            }
          }
        },
        "description": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
      },
      "cosmos.base.abci.v1beta1.ABCIMessageLog": {
        "type": "object",
        "properties": {
          "msg_index": {
            "type": "integer",
            "format": "int64"
          },
          "log": {
            "type": "string"
          },
          "events": {
            "type": "array",
            "description": "Events contains a slice of Event objects that were emitted during some\nexecution.",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "attributes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "description": "Attribute defines an attribute wrapper where the key and value are\nstrings instead of raw bytes."
                  }
                }
              },
              "description": "StringEvent defines en Event object wrapper where all the attributes\ncontain key/value pairs that are strings instead of raw bytes."
            }
          }
        },
        "description": "ABCIMessageLog defines a structure containing an indexed tx ABCI message log."
      },
      "cosmos.base.abci.v1beta1.Attribute": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "description": "Attribute defines an attribute wrapper where the key and value are\nstrings instead of raw bytes."
      },
      "cosmos.base.abci.v1beta1.GasInfo": {
        "type": "object",
        "properties": {
          "gas_wanted": {
            "type": "string",
            "description": "GasWanted is the maximum units of work we allow this tx to perform.",
            "format": "uint64"
          },
          "gas_used": {
            "type": "string",
            "description": "GasUsed is the amount of gas actually consumed.",
            "format": "uint64"
          }
        },
        "description": "GasInfo defines tx execution gas context."
      },
      "cosmos.base.abci.v1beta1.Result": {
        "type": "object",
        "properties": {
          "data": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Data is any data returned from message or handler execution. It MUST be\nlength prefixed in order to separate data from multiple message executions.\nDeprecated. This field is still populated, but prefer msg_response instead\nbecause it also contains the Msg response typeURL.",
            "format": "byte"
          },
          "log": {
            "type": "string",
            "description": "Log contains the log information from message or handler execution."
          },
          "events": {
            "type": "array",
            "description": "Events contains a slice of Event objects that were emitted during message\nor handler execution.",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "attributes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      },
                      "index": {
                        "type": "boolean"
                      }
                    },
                    "description": "EventAttribute is a single key-value pair, associated with an event."
                  }
                }
              },
              "description": "Event allows application developers to attach additional information to\nResponseFinalizeBlock and ResponseCheckTx.\nLater, transactions may be queried using these events."
            }
          },
          "msg_responses": {
            "type": "array",
            "description": "msg_responses contains the Msg handler responses type packed in Anys.\n\nSince: cosmos-sdk 0.46",
            "items": {
              "type": "object",
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "byte"
                }
              },
              "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
            }
          }
        },
        "description": "Result is the union of ResponseFormat and ResponseCheckTx."
      },
      "cosmos.base.abci.v1beta1.StringEvent": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "description": "Attribute defines an attribute wrapper where the key and value are\nstrings instead of raw bytes."
            }
          }
        },
        "description": "StringEvent defines en Event object wrapper where all the attributes\ncontain key/value pairs that are strings instead of raw bytes."
      },
      "cosmos.base.abci.v1beta1.TxResponse": {
        "type": "object",
        "properties": {
          "height": {
            "title": "The block height",
            "type": "string",
            "format": "int64"
          },
          "txhash": {
            "type": "string",
            "description": "The transaction hash."
          },
          "codespace": {
            "title": "Namespace for the Code",
            "type": "string"
          },
          "code": {
            "type": "integer",
            "description": "Response code.",
            "format": "int64"
          },
          "data": {
            "type": "string",
            "description": "Result bytes, if any."
          },
          "raw_log": {
            "type": "string",
            "description": "The output of the application's logger (raw string). May be\nnon-deterministic."
          },
          "logs": {
            "type": "array",
            "description": "The output of the application's logger (typed). May be non-deterministic.",
            "items": {
              "type": "object",
              "properties": {
                "msg_index": {
                  "type": "integer",
                  "format": "int64"
                },
                "log": {
                  "type": "string"
                },
                "events": {
                  "type": "array",
                  "description": "Events contains a slice of Event objects that were emitted during some\nexecution.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "attributes": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          },
                          "description": "Attribute defines an attribute wrapper where the key and value are\nstrings instead of raw bytes."
                        }
                      }
                    },
                    "description": "StringEvent defines en Event object wrapper where all the attributes\ncontain key/value pairs that are strings instead of raw bytes."
                  }
                }
              },
              "description": "ABCIMessageLog defines a structure containing an indexed tx ABCI message log."
            }
          },
          "info": {
            "type": "string",
            "description": "Additional information. May be non-deterministic."
          },
          "gas_wanted": {
            "type": "string",
            "description": "Amount of gas requested for transaction.",
            "format": "int64"
          },
          "gas_used": {
            "type": "string",
            "description": "Amount of gas consumed by transaction.",
            "format": "int64"
          },
          "tx": {
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
          },
          "timestamp": {
            "type": "string",
            "description": "Time of the previous block. For heights > 1, it's the weighted median of\nthe timestamps of the valid votes in the block.LastCommit. For height == 1,\nit's genesis time."
          },
          "events": {
            "type": "array",
            "description": "Events defines all the events emitted by processing a transaction. Note,\nthese events include those emitted by processing all the messages and those\nemitted from the ante. Whereas Logs contains the events, with\nadditional metadata, emitted only by processing the messages.\n\nSince: cosmos-sdk 0.42.11, 0.44.5, 0.45",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "attributes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      },
                      "index": {
                        "type": "boolean"
                      }
                    },
                    "description": "EventAttribute is a single key-value pair, associated with an event."
                  }
                }
              },
              "description": "Event allows application developers to attach additional information to\nResponseFinalizeBlock and ResponseCheckTx.\nLater, transactions may be queried using these events."
            }
          }
        },
        "description": "TxResponse defines a structure containing relevant tx data and metadata. The\ntags are stringified and the log is JSON decoded."
      },
      "cosmos.crypto.multisig.v1beta1.CompactBitArray": {
        "type": "object",
        "properties": {
          "extra_bits_stored": {
            "type": "integer",
            "format": "int64"
          },
          "elems": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          }
        },
        "description": "CompactBitArray is an implementation of a space efficient bit array.\nThis is used to ensure that the encoded data takes up a minimal amount of\nspace after proto encoding.\nThis is not thread safe, and is not intended for concurrent usage."
      },
      "cosmos.tx.signing.v1beta1.SignMode": {
        "type": "string",
        "description": "SignMode represents a signing mode with its own security guarantees.\n\nThis enum should be considered a registry of all known sign modes\nin the Cosmos ecosystem. Apps are not expected to support all known\nsign modes. Apps that would like to support custom  sign modes are\nencouraged to open a small PR against this file to add a new case\nto this SignMode enum describing their sign mode so that different\napps have a consistent version of this enum.\n\n - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be\nrejected.\n - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is\nverified with raw bytes from Tx.\n - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some\nhuman-readable textual representation on top of the binary representation\nfrom SIGN_MODE_DIRECT. It is currently experimental, and should be used\nfor testing purposes only, until Textual is fully released. Please follow\nthe tracking issue https://github.com/cosmos/cosmos-sdk/issues/11970.\n - SIGN_MODE_DIRECT_AUX: SIGN_MODE_DIRECT_AUX specifies a signing mode which uses\nSignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not\nrequire signers signing over other signers' `signer_info`. It also allows\nfor adding Tips in transactions.\n\nSince: cosmos-sdk 0.46\n - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses\nAmino JSON and will be removed in the future.\n - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos\nSDK. Ref: https://eips.ethereum.org/EIPS/eip-191\n\nCurrently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,\nbut is not implemented on the SDK by default. To enable EIP-191, you need\nto pass a custom `TxConfig` that has an implementation of\n`SignModeHandler` for EIP-191. The SDK may decide to fully support\nEIP-191 in the future.\n\nSince: cosmos-sdk 0.45.2",
        "default": "SIGN_MODE_UNSPECIFIED",
        "enum": [
          "SIGN_MODE_UNSPECIFIED",
          "SIGN_MODE_DIRECT",
          "SIGN_MODE_TEXTUAL",
          "SIGN_MODE_DIRECT_AUX",
          "SIGN_MODE_LEGACY_AMINO_JSON",
          "SIGN_MODE_EIP_191"
        ]
      },
      "cosmos.tx.v1beta1.AuthInfo": {
        "type": "object",
        "properties": {
          "signer_infos": {
            "type": "array",
            "description": "signer_infos defines the signing modes for the required signers. The number\nand order of elements must match the required signers from TxBody's\nmessages. The first element is the primary signer and the one which pays\nthe fee.",
            "items": {
              "$ref": "#/components/schemas/cosmos.tx.v1beta1.SignerInfo"
            }
          },
          "fee": {
            "type": "object",
            "properties": {
              "amount": {
                "title": "amount is the amount of coins to be paid as a fee",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                }
              },
              "gas_limit": {
                "title": "gas_limit is the maximum gas that can be used in transaction processing\nbefore an out of gas error occurs",
                "type": "string",
                "format": "uint64"
              },
              "payer": {
                "type": "string",
                "description": "if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees.\nthe payer must be a tx signer (and thus have signed this field in AuthInfo).\nsetting this field does *not* change the ordering of required signers for the transaction."
              },
              "granter": {
                "title": "if set, the fee payer (either the first signer or the value of the payer field) requests that a fee grant be used\nto pay fees instead of the fee payer's own balance. If an appropriate fee grant does not exist or the chain does\nnot support fee grants, this will fail",
                "type": "string"
              }
            },
            "description": "Fee is the fee and gas limit for the transaction. The first signer is the\nprimary signer and the one which pays the fee. The fee can be calculated\nbased on the cost of evaluating the body and doing signature verification\nof the signers. This can be estimated via simulation."
          },
          "tip": {
            "type": "object",
            "properties": {
              "amount": {
                "title": "amount is the amount of the tip",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "denom": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
                }
              },
              "tipper": {
                "title": "tipper is the address of the account paying for the tip",
                "type": "string"
              }
            },
            "description": "Tip is the optional tip used for transactions fees paid in another denom.\n\nThis field is ignored if the chain didn't enable tips, i.e. didn't add the\n`TipDecorator` in its posthandler.\n\nSince: cosmos-sdk 0.46"
          }
        },
        "description": "AuthInfo describes the fee and signer modes that are used to sign a\ntransaction."
      },
      "cosmos.tx.v1beta1.BroadcastMode": {
        "type": "string",
        "description": "BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC\nmethod.\n\n - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering\n - BROADCAST_MODE_BLOCK: DEPRECATED: use BROADCAST_MODE_SYNC instead,\nBROADCAST_MODE_BLOCK is not supported by the SDK from v0.47.x onwards.\n - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits\nfor a CheckTx execution response only.\n - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client\nreturns immediately.",
        "default": "BROADCAST_MODE_UNSPECIFIED",
        "enum": [
          "BROADCAST_MODE_UNSPECIFIED",
          "BROADCAST_MODE_BLOCK",
          "BROADCAST_MODE_SYNC",
          "BROADCAST_MODE_ASYNC"
        ]
      },
      "cosmos.tx.v1beta1.BroadcastTxRequest": {
        "type": "object",
        "properties": {
          "tx_bytes": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "tx_bytes is the raw transaction.",
            "format": "byte"
          },
          "mode": {
            "type": "string",
            "description": "BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC\nmethod.\n\n - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering\n - BROADCAST_MODE_BLOCK: DEPRECATED: use BROADCAST_MODE_SYNC instead,\nBROADCAST_MODE_BLOCK is not supported by the SDK from v0.47.x onwards.\n - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits\nfor a CheckTx execution response only.\n - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client\nreturns immediately.",
            "default": "BROADCAST_MODE_UNSPECIFIED",
            "enum": [
              "BROADCAST_MODE_UNSPECIFIED",
              "BROADCAST_MODE_BLOCK",
              "BROADCAST_MODE_SYNC",
              "BROADCAST_MODE_ASYNC"
            ]
          }
        },
        "description": "BroadcastTxRequest is the request type for the Service.BroadcastTxRequest\nRPC method."
      },
      "cosmos.tx.v1beta1.BroadcastTxResponse": {
        "type": "object",
        "properties": {
          "tx_response": {
            "type": "object",
            "properties": {
              "height": {
                "title": "The block height",
                "type": "string",
                "format": "int64"
              },
              "txhash": {
                "type": "string",
                "description": "The transaction hash."
              },
              "codespace": {
                "title": "Namespace for the Code",
                "type": "string"
              },
              "code": {
                "type": "integer",
                "description": "Response code.",
                "format": "int64"
              },
              "data": {
                "type": "string",
                "description": "Result bytes, if any."
              },
              "raw_log": {
                "type": "string",
                "description": "The output of the application's logger (raw string). May be\nnon-deterministic."
              },
              "logs": {
                "type": "array",
                "description": "The output of the application's logger (typed). May be non-deterministic.",
                "items": {
                  "type": "object",
                  "properties": {
                    "msg_index": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "log": {
                      "type": "string"
                    },
                    "events": {
                      "type": "array",
                      "description": "Events contains a slice of Event objects that were emitted during some\nexecution.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "attributes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              },
                              "description": "Attribute defines an attribute wrapper where the key and value are\nstrings instead of raw bytes."
                            }
                          }
                        },
                        "description": "StringEvent defines en Event object wrapper where all the attributes\ncontain key/value pairs that are strings instead of raw bytes."
                      }
                    }
                  },
                  "description": "ABCIMessageLog defines a structure containing an indexed tx ABCI message log."
                }
              },
              "info": {
                "type": "string",
                "description": "Additional information. May be non-deterministic."
              },
              "gas_wanted": {
                "type": "string",
                "description": "Amount of gas requested for transaction.",
                "format": "int64"
              },
              "gas_used": {
                "type": "string",
                "description": "Amount of gas consumed by transaction.",
                "format": "int64"
              },
              "tx": {
                "type": "object",
                "properties": {
                  "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                  },
                  "value": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                  }
                },
                "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
              },
              "timestamp": {
                "type": "string",
                "description": "Time of the previous block. For heights > 1, it's the weighted median of\nthe timestamps of the valid votes in the block.LastCommit. For height == 1,\nit's genesis time."
              },
              "events": {
                "type": "array",
                "description": "Events defines all the events emitted by processing a transaction. Note,\nthese events include those emitted by processing all the messages and those\nemitted from the ante. Whereas Logs contains the events, with\nadditional metadata, emitted only by processing the messages.\n\nSince: cosmos-sdk 0.42.11, 0.44.5, 0.45",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "attributes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "index": {
                            "type": "boolean"
                          }
                        },
                        "description": "EventAttribute is a single key-value pair, associated with an event."
                      }
                    }
                  },
                  "description": "Event allows application developers to attach additional information to\nResponseFinalizeBlock and ResponseCheckTx.\nLater, transactions may be queried using these events."
                }
              }
            },
            "description": "TxResponse defines a structure containing relevant tx data and metadata. The\ntags are stringified and the log is JSON decoded."
          }
        },
        "description": "BroadcastTxResponse is the response type for the\nService.BroadcastTx method."
      },
      "cosmos.tx.v1beta1.Fee": {
        "type": "object",
        "properties": {
          "amount": {
            "title": "amount is the amount of coins to be paid as a fee",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
            }
          },
          "gas_limit": {
            "title": "gas_limit is the maximum gas that can be used in transaction processing\nbefore an out of gas error occurs",
            "type": "string",
            "format": "uint64"
          },
          "payer": {
            "type": "string",
            "description": "if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees.\nthe payer must be a tx signer (and thus have signed this field in AuthInfo).\nsetting this field does *not* change the ordering of required signers for the transaction."
          },
          "granter": {
            "title": "if set, the fee payer (either the first signer or the value of the payer field) requests that a fee grant be used\nto pay fees instead of the fee payer's own balance. If an appropriate fee grant does not exist or the chain does\nnot support fee grants, this will fail",
            "type": "string"
          }
        },
        "description": "Fee includes the amount of coins paid in fees and the maximum\ngas to be used by the transaction. The ratio yields an effective \"gasprice\",\nwhich must be above some miminum to be accepted into the mempool."
      },
      "cosmos.tx.v1beta1.GetBlockWithTxsResponse": {
        "type": "object",
        "properties": {
          "txs": {
            "type": "array",
            "description": "txs are the transactions in the block.",
            "items": {
              "$ref": "#/components/schemas/cosmos.tx.v1beta1.Tx"
            }
          },
          "block_id": {
            "title": "BlockID",
            "type": "object",
            "properties": {
              "hash": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              },
              "part_set_header": {
                "title": "PartsetHeader",
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  }
                }
              }
            }
          },
          "block": {
            "type": "object",
            "properties": {
              "header": {
                "type": "object",
                "properties": {
                  "version": {
                    "title": "basic block info",
                    "type": "object",
                    "properties": {
                      "block": {
                        "type": "string",
                        "format": "uint64"
                      },
                      "app": {
                        "type": "string",
                        "format": "uint64"
                      }
                    },
                    "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                  },
                  "chain_id": {
                    "type": "string"
                  },
                  "height": {
                    "type": "string",
                    "format": "int64"
                  },
                  "time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "last_block_id": {
                    "title": "BlockID",
                    "type": "object",
                    "properties": {
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "part_set_header": {
                        "title": "PartsetHeader",
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  },
                  "last_commit_hash": {
                    "title": "hashes of block data",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "data_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "validators_hash": {
                    "title": "hashes from the app output from the prev block",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "next_validators_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "consensus_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "app_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "last_results_hash": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "evidence_hash": {
                    "title": "consensus info",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  },
                  "proposer_address": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "format": "byte"
                  }
                },
                "description": "Header defines the structure of a block header."
              },
              "data": {
                "title": "Data contains the set of transactions included in the block",
                "type": "object",
                "properties": {
                  "txs": {
                    "type": "array",
                    "description": "Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs.",
                    "items": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "format": "byte"
                    }
                  }
                }
              },
              "evidence": {
                "type": "object",
                "properties": {
                  "evidence": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "duplicate_vote_evidence": {
                          "type": "object",
                          "properties": {
                            "vote_a": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                  "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                  "enum": [
                                    "SIGNED_MSG_TYPE_UNKNOWN",
                                    "SIGNED_MSG_TYPE_PREVOTE",
                                    "SIGNED_MSG_TYPE_PRECOMMIT",
                                    "SIGNED_MSG_TYPE_PROPOSAL"
                                  ]
                                },
                                "height": {
                                  "type": "string",
                                  "format": "int64"
                                },
                                "round": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "block_id": {
                                  "title": "BlockID",
                                  "type": "object",
                                  "properties": {
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "part_set_header": {
                                      "title": "PartsetHeader",
                                      "type": "object",
                                      "properties": {
                                        "total": {
                                          "type": "integer",
                                          "format": "int64"
                                        },
                                        "hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      }
                                    }
                                  }
                                },
                                "timestamp": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "validator_address": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "validator_index": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                  "format": "byte"
                                },
                                "extension": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                  "format": "byte"
                                },
                                "extension_signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                  "format": "byte"
                                }
                              },
                              "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                            },
                            "vote_b": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals",
                                  "default": "SIGNED_MSG_TYPE_UNKNOWN",
                                  "enum": [
                                    "SIGNED_MSG_TYPE_UNKNOWN",
                                    "SIGNED_MSG_TYPE_PREVOTE",
                                    "SIGNED_MSG_TYPE_PRECOMMIT",
                                    "SIGNED_MSG_TYPE_PROPOSAL"
                                  ]
                                },
                                "height": {
                                  "type": "string",
                                  "format": "int64"
                                },
                                "round": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "block_id": {
                                  "title": "BlockID",
                                  "type": "object",
                                  "properties": {
                                    "hash": {
                                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "part_set_header": {
                                      "title": "PartsetHeader",
                                      "type": "object",
                                      "properties": {
                                        "total": {
                                          "type": "integer",
                                          "format": "int64"
                                        },
                                        "hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      }
                                    }
                                  }
                                },
                                "timestamp": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "validator_address": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "format": "byte"
                                },
                                "validator_index": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote signature by the validator if they participated in consensus for the\nassociated block.",
                                  "format": "byte"
                                },
                                "extension": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension provided by the application. Only valid for precommit\nmessages.",
                                  "format": "byte"
                                },
                                "extension_signature": {
                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                  "type": "string",
                                  "description": "Vote extension signature by the validator if they participated in\nconsensus for the associated block.\nOnly valid for precommit messages.",
                                  "format": "byte"
                                }
                              },
                              "description": "Vote represents a prevote or precommit vote from validators for\nconsensus."
                            },
                            "total_voting_power": {
                              "type": "string",
                              "format": "int64"
                            },
                            "validator_power": {
                              "type": "string",
                              "format": "int64"
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            }
                          },
                          "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
                        },
                        "light_client_attack_evidence": {
                          "type": "object",
                          "properties": {
                            "conflicting_block": {
                              "type": "object",
                              "properties": {
                                "signed_header": {
                                  "type": "object",
                                  "properties": {
                                    "header": {
                                      "type": "object",
                                      "properties": {
                                        "version": {
                                          "title": "basic block info",
                                          "type": "object",
                                          "properties": {
                                            "block": {
                                              "type": "string",
                                              "format": "uint64"
                                            },
                                            "app": {
                                              "type": "string",
                                              "format": "uint64"
                                            }
                                          },
                                          "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
                                        },
                                        "chain_id": {
                                          "type": "string"
                                        },
                                        "height": {
                                          "type": "string",
                                          "format": "int64"
                                        },
                                        "time": {
                                          "type": "string",
                                          "format": "date-time"
                                        },
                                        "last_block_id": {
                                          "title": "BlockID",
                                          "type": "object",
                                          "properties": {
                                            "hash": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "part_set_header": {
                                              "title": "PartsetHeader",
                                              "type": "object",
                                              "properties": {
                                                "total": {
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "hash": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "last_commit_hash": {
                                          "title": "hashes of block data",
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "data_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "validators_hash": {
                                          "title": "hashes from the app output from the prev block",
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "next_validators_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "consensus_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "app_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "last_results_hash": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "evidence_hash": {
                                          "title": "consensus info",
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "proposer_address": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        }
                                      },
                                      "description": "Header defines the structure of a block header."
                                    },
                                    "commit": {
                                      "type": "object",
                                      "properties": {
                                        "height": {
                                          "type": "string",
                                          "format": "int64"
                                        },
                                        "round": {
                                          "type": "integer",
                                          "format": "int32"
                                        },
                                        "block_id": {
                                          "title": "BlockID",
                                          "type": "object",
                                          "properties": {
                                            "hash": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "part_set_header": {
                                              "title": "PartsetHeader",
                                              "type": "object",
                                              "properties": {
                                                "total": {
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "hash": {
                                                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                  "type": "string",
                                                  "format": "byte"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "signatures": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "block_id_flag": {
                                                "title": "BlockIdFlag indicates which BlockID the signature is for",
                                                "type": "string",
                                                "default": "BLOCK_ID_FLAG_UNKNOWN",
                                                "enum": [
                                                  "BLOCK_ID_FLAG_UNKNOWN",
                                                  "BLOCK_ID_FLAG_ABSENT",
                                                  "BLOCK_ID_FLAG_COMMIT",
                                                  "BLOCK_ID_FLAG_NIL"
                                                ]
                                              },
                                              "validator_address": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "timestamp": {
                                                "type": "string",
                                                "format": "date-time"
                                              },
                                              "signature": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              }
                                            },
                                            "description": "CommitSig is a part of the Vote included in a Commit."
                                          }
                                        }
                                      },
                                      "description": "Commit contains the evidence that a block was committed by a set of validators."
                                    }
                                  }
                                },
                                "validator_set": {
                                  "type": "object",
                                  "properties": {
                                    "validators": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "address": {
                                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "pub_key": {
                                            "title": "PublicKey defines the keys available for use with Validators",
                                            "type": "object",
                                            "properties": {
                                              "ed25519": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              },
                                              "secp256k1": {
                                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                                "type": "string",
                                                "format": "byte"
                                              }
                                            }
                                          },
                                          "voting_power": {
                                            "type": "string",
                                            "format": "int64"
                                          },
                                          "proposer_priority": {
                                            "type": "string",
                                            "format": "int64"
                                          }
                                        }
                                      }
                                    },
                                    "proposer": {
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                          "type": "string",
                                          "format": "byte"
                                        },
                                        "pub_key": {
                                          "title": "PublicKey defines the keys available for use with Validators",
                                          "type": "object",
                                          "properties": {
                                            "ed25519": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            },
                                            "secp256k1": {
                                              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                              "type": "string",
                                              "format": "byte"
                                            }
                                          }
                                        },
                                        "voting_power": {
                                          "type": "string",
                                          "format": "int64"
                                        },
                                        "proposer_priority": {
                                          "type": "string",
                                          "format": "int64"
                                        }
                                      }
                                    },
                                    "total_voting_power": {
                                      "type": "string",
                                      "format": "int64"
                                    }
                                  }
                                }
                              }
                            },
                            "common_height": {
                              "type": "string",
                              "format": "int64"
                            },
                            "byzantine_validators": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                    "type": "string",
                                    "format": "byte"
                                  },
                                  "pub_key": {
                                    "title": "PublicKey defines the keys available for use with Validators",
                                    "type": "object",
                                    "properties": {
                                      "ed25519": {
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                        "type": "string",
                                        "format": "byte"
                                      },
                                      "secp256k1": {
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                                        "type": "string",
                                        "format": "byte"
                                      }
                                    }
                                  },
                                  "voting_power": {
                                    "type": "string",
                                    "format": "int64"
                                  },
                                  "proposer_priority": {
                                    "type": "string",
                                    "format": "int64"
                                  }
                                }
                              }
                            },
                            "total_voting_power": {
                              "type": "string",
                              "format": "int64"
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            }
                          },
                          "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
                        }
                      }
                    }
                  }
                }
              },
              "last_commit": {
                "type": "object",
                "properties": {
                  "height": {
                    "type": "string",
                    "format": "int64"
                  },
                  "round": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "block_id": {
                    "title": "BlockID",
                    "type": "object",
                    "properties": {
                      "hash": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      },
                      "part_set_header": {
                        "title": "PartsetHeader",
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "hash": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                          }
                        }
                      }
                    }
                  },
                  "signatures": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "block_id_flag": {
                          "title": "BlockIdFlag indicates which BlockID the signature is for",
                          "type": "string",
                          "default": "BLOCK_ID_FLAG_UNKNOWN",
                          "enum": [
                            "BLOCK_ID_FLAG_UNKNOWN",
                            "BLOCK_ID_FLAG_ABSENT",
                            "BLOCK_ID_FLAG_COMMIT",
                            "BLOCK_ID_FLAG_NIL"
                          ]
                        },
                        "validator_address": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "signature": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "format": "byte"
                        }
                      },
                      "description": "CommitSig is a part of the Vote included in a Commit."
                    }
                  }
                },
                "description": "Commit contains the evidence that a block was committed by a set of validators."
              }
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines a pagination for the response."
          }
        },
        "description": "GetBlockWithTxsResponse is the response type for the Service.GetBlockWithTxs\nmethod.\n\nSince: cosmos-sdk 0.45.2"
      },
      "cosmos.tx.v1beta1.GetTxResponse": {
        "type": "object",
        "properties": {
          "tx": {
            "$ref": "#/components/schemas/cosmos.tx.v1beta1.Tx"
          },
          "tx_response": {
            "type": "object",
            "properties": {
              "height": {
                "title": "The block height",
                "type": "string",
                "format": "int64"
              },
              "txhash": {
                "type": "string",
                "description": "The transaction hash."
              },
              "codespace": {
                "title": "Namespace for the Code",
                "type": "string"
              },
              "code": {
                "type": "integer",
                "description": "Response code.",
                "format": "int64"
              },
              "data": {
                "type": "string",
                "description": "Result bytes, if any."
              },
              "raw_log": {
                "type": "string",
                "description": "The output of the application's logger (raw string). May be\nnon-deterministic."
              },
              "logs": {
                "type": "array",
                "description": "The output of the application's logger (typed). May be non-deterministic.",
                "items": {
                  "type": "object",
                  "properties": {
                    "msg_index": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "log": {
                      "type": "string"
                    },
                    "events": {
                      "type": "array",
                      "description": "Events contains a slice of Event objects that were emitted during some\nexecution.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "attributes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              },
                              "description": "Attribute defines an attribute wrapper where the key and value are\nstrings instead of raw bytes."
                            }
                          }
                        },
                        "description": "StringEvent defines en Event object wrapper where all the attributes\ncontain key/value pairs that are strings instead of raw bytes."
                      }
                    }
                  },
                  "description": "ABCIMessageLog defines a structure containing an indexed tx ABCI message log."
                }
              },
              "info": {
                "type": "string",
                "description": "Additional information. May be non-deterministic."
              },
              "gas_wanted": {
                "type": "string",
                "description": "Amount of gas requested for transaction.",
                "format": "int64"
              },
              "gas_used": {
                "type": "string",
                "description": "Amount of gas consumed by transaction.",
                "format": "int64"
              },
              "tx": {
                "type": "object",
                "properties": {
                  "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                  },
                  "value": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                  }
                },
                "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
              },
              "timestamp": {
                "type": "string",
                "description": "Time of the previous block. For heights > 1, it's the weighted median of\nthe timestamps of the valid votes in the block.LastCommit. For height == 1,\nit's genesis time."
              },
              "events": {
                "type": "array",
                "description": "Events defines all the events emitted by processing a transaction. Note,\nthese events include those emitted by processing all the messages and those\nemitted from the ante. Whereas Logs contains the events, with\nadditional metadata, emitted only by processing the messages.\n\nSince: cosmos-sdk 0.42.11, 0.44.5, 0.45",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "attributes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "index": {
                            "type": "boolean"
                          }
                        },
                        "description": "EventAttribute is a single key-value pair, associated with an event."
                      }
                    }
                  },
                  "description": "Event allows application developers to attach additional information to\nResponseFinalizeBlock and ResponseCheckTx.\nLater, transactions may be queried using these events."
                }
              }
            },
            "description": "TxResponse defines a structure containing relevant tx data and metadata. The\ntags are stringified and the log is JSON decoded."
          }
        },
        "description": "GetTxResponse is the response type for the Service.GetTx method."
      },
      "cosmos.tx.v1beta1.GetTxsEventResponse": {
        "type": "object",
        "properties": {
          "txs": {
            "type": "array",
            "description": "txs is the list of queried transactions.",
            "items": {
              "$ref": "#/components/schemas/cosmos.tx.v1beta1.Tx"
            }
          },
          "tx_responses": {
            "type": "array",
            "description": "tx_responses is the list of queried TxResponses.",
            "items": {
              "type": "object",
              "properties": {
                "height": {
                  "title": "The block height",
                  "type": "string",
                  "format": "int64"
                },
                "txhash": {
                  "type": "string",
                  "description": "The transaction hash."
                },
                "codespace": {
                  "title": "Namespace for the Code",
                  "type": "string"
                },
                "code": {
                  "type": "integer",
                  "description": "Response code.",
                  "format": "int64"
                },
                "data": {
                  "type": "string",
                  "description": "Result bytes, if any."
                },
                "raw_log": {
                  "type": "string",
                  "description": "The output of the application's logger (raw string). May be\nnon-deterministic."
                },
                "logs": {
                  "type": "array",
                  "description": "The output of the application's logger (typed). May be non-deterministic.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "msg_index": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "log": {
                        "type": "string"
                      },
                      "events": {
                        "type": "array",
                        "description": "Events contains a slice of Event objects that were emitted during some\nexecution.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "attributes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                },
                                "description": "Attribute defines an attribute wrapper where the key and value are\nstrings instead of raw bytes."
                              }
                            }
                          },
                          "description": "StringEvent defines en Event object wrapper where all the attributes\ncontain key/value pairs that are strings instead of raw bytes."
                        }
                      }
                    },
                    "description": "ABCIMessageLog defines a structure containing an indexed tx ABCI message log."
                  }
                },
                "info": {
                  "type": "string",
                  "description": "Additional information. May be non-deterministic."
                },
                "gas_wanted": {
                  "type": "string",
                  "description": "Amount of gas requested for transaction.",
                  "format": "int64"
                },
                "gas_used": {
                  "type": "string",
                  "description": "Amount of gas consumed by transaction.",
                  "format": "int64"
                },
                "tx": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                },
                "timestamp": {
                  "type": "string",
                  "description": "Time of the previous block. For heights > 1, it's the weighted median of\nthe timestamps of the valid votes in the block.LastCommit. For height == 1,\nit's genesis time."
                },
                "events": {
                  "type": "array",
                  "description": "Events defines all the events emitted by processing a transaction. Note,\nthese events include those emitted by processing all the messages and those\nemitted from the ante. Whereas Logs contains the events, with\nadditional metadata, emitted only by processing the messages.\n\nSince: cosmos-sdk 0.42.11, 0.44.5, 0.45",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "attributes": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            },
                            "index": {
                              "type": "boolean"
                            }
                          },
                          "description": "EventAttribute is a single key-value pair, associated with an event."
                        }
                      }
                    },
                    "description": "Event allows application developers to attach additional information to\nResponseFinalizeBlock and ResponseCheckTx.\nLater, transactions may be queried using these events."
                  }
                }
              },
              "description": "TxResponse defines a structure containing relevant tx data and metadata. The\ntags are stringified and the log is JSON decoded."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines a pagination for the response.\nDeprecated post v0.46.x: use total instead."
          },
          "total": {
            "title": "total is total number of results available",
            "type": "string",
            "format": "uint64"
          }
        },
        "description": "GetTxsEventResponse is the response type for the Service.TxsByEvents\nRPC method."
      },
      "cosmos.tx.v1beta1.ModeInfo": {
        "type": "object",
        "properties": {
          "single": {
            "title": "single represents a single signer",
            "type": "object",
            "properties": {
              "mode": {
                "title": "mode is the signing mode of the single signer",
                "type": "string",
                "description": "SignMode represents a signing mode with its own security guarantees.\n\nThis enum should be considered a registry of all known sign modes\nin the Cosmos ecosystem. Apps are not expected to support all known\nsign modes. Apps that would like to support custom  sign modes are\nencouraged to open a small PR against this file to add a new case\nto this SignMode enum describing their sign mode so that different\napps have a consistent version of this enum.\n\n - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be\nrejected.\n - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is\nverified with raw bytes from Tx.\n - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some\nhuman-readable textual representation on top of the binary representation\nfrom SIGN_MODE_DIRECT. It is currently experimental, and should be used\nfor testing purposes only, until Textual is fully released. Please follow\nthe tracking issue https://github.com/cosmos/cosmos-sdk/issues/11970.\n - SIGN_MODE_DIRECT_AUX: SIGN_MODE_DIRECT_AUX specifies a signing mode which uses\nSignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not\nrequire signers signing over other signers' `signer_info`. It also allows\nfor adding Tips in transactions.\n\nSince: cosmos-sdk 0.46\n - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses\nAmino JSON and will be removed in the future.\n - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos\nSDK. Ref: https://eips.ethereum.org/EIPS/eip-191\n\nCurrently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,\nbut is not implemented on the SDK by default. To enable EIP-191, you need\nto pass a custom `TxConfig` that has an implementation of\n`SignModeHandler` for EIP-191. The SDK may decide to fully support\nEIP-191 in the future.\n\nSince: cosmos-sdk 0.45.2",
                "default": "SIGN_MODE_UNSPECIFIED",
                "enum": [
                  "SIGN_MODE_UNSPECIFIED",
                  "SIGN_MODE_DIRECT",
                  "SIGN_MODE_TEXTUAL",
                  "SIGN_MODE_DIRECT_AUX",
                  "SIGN_MODE_LEGACY_AMINO_JSON",
                  "SIGN_MODE_EIP_191"
                ]
              }
            }
          },
          "multi": {
            "$ref": "#/components/schemas/cosmos.tx.v1beta1.ModeInfo.Multi"
          }
        },
        "description": "ModeInfo describes the signing mode of a single or nested multisig signer."
      },
      "cosmos.tx.v1beta1.ModeInfo.Multi": {
        "title": "Multi is the mode info for a multisig public key",
        "type": "object",
        "properties": {
          "bitarray": {
            "title": "bitarray specifies which keys within the multisig are signing",
            "type": "object",
            "properties": {
              "extra_bits_stored": {
                "type": "integer",
                "format": "int64"
              },
              "elems": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "format": "byte"
              }
            },
            "description": "CompactBitArray is an implementation of a space efficient bit array.\nThis is used to ensure that the encoded data takes up a minimal amount of\nspace after proto encoding.\nThis is not thread safe, and is not intended for concurrent usage."
          },
          "mode_infos": {
            "title": "mode_infos is the corresponding modes of the signers of the multisig\nwhich could include nested multisig public keys",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.tx.v1beta1.ModeInfo"
            }
          }
        }
      },
      "cosmos.tx.v1beta1.ModeInfo.Single": {
        "title": "Single is the mode info for a single signer. It is structured as a message\nto allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the\nfuture",
        "type": "object",
        "properties": {
          "mode": {
            "title": "mode is the signing mode of the single signer",
            "type": "string",
            "description": "SignMode represents a signing mode with its own security guarantees.\n\nThis enum should be considered a registry of all known sign modes\nin the Cosmos ecosystem. Apps are not expected to support all known\nsign modes. Apps that would like to support custom  sign modes are\nencouraged to open a small PR against this file to add a new case\nto this SignMode enum describing their sign mode so that different\napps have a consistent version of this enum.\n\n - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be\nrejected.\n - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is\nverified with raw bytes from Tx.\n - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some\nhuman-readable textual representation on top of the binary representation\nfrom SIGN_MODE_DIRECT. It is currently experimental, and should be used\nfor testing purposes only, until Textual is fully released. Please follow\nthe tracking issue https://github.com/cosmos/cosmos-sdk/issues/11970.\n - SIGN_MODE_DIRECT_AUX: SIGN_MODE_DIRECT_AUX specifies a signing mode which uses\nSignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not\nrequire signers signing over other signers' `signer_info`. It also allows\nfor adding Tips in transactions.\n\nSince: cosmos-sdk 0.46\n - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses\nAmino JSON and will be removed in the future.\n - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos\nSDK. Ref: https://eips.ethereum.org/EIPS/eip-191\n\nCurrently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,\nbut is not implemented on the SDK by default. To enable EIP-191, you need\nto pass a custom `TxConfig` that has an implementation of\n`SignModeHandler` for EIP-191. The SDK may decide to fully support\nEIP-191 in the future.\n\nSince: cosmos-sdk 0.45.2",
            "default": "SIGN_MODE_UNSPECIFIED",
            "enum": [
              "SIGN_MODE_UNSPECIFIED",
              "SIGN_MODE_DIRECT",
              "SIGN_MODE_TEXTUAL",
              "SIGN_MODE_DIRECT_AUX",
              "SIGN_MODE_LEGACY_AMINO_JSON",
              "SIGN_MODE_EIP_191"
            ]
          }
        }
      },
      "cosmos.tx.v1beta1.OrderBy": {
        "title": "OrderBy defines the sorting order",
        "type": "string",
        "description": "- ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults\nto ASC in this case.\n - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order\n - ORDER_BY_DESC: ORDER_BY_DESC defines descending order",
        "default": "ORDER_BY_UNSPECIFIED",
        "enum": [
          "ORDER_BY_UNSPECIFIED",
          "ORDER_BY_ASC",
          "ORDER_BY_DESC"
        ]
      },
      "cosmos.tx.v1beta1.SignerInfo": {
        "type": "object",
        "properties": {
          "public_key": {
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
          },
          "mode_info": {
            "$ref": "#/components/schemas/cosmos.tx.v1beta1.ModeInfo"
          },
          "sequence": {
            "type": "string",
            "description": "sequence is the sequence of the account, which describes the\nnumber of committed transactions signed by a given address. It is used to\nprevent replay attacks.",
            "format": "uint64"
          }
        },
        "description": "SignerInfo describes the public key and signing mode of a single top-level\nsigner."
      },
      "cosmos.tx.v1beta1.SimulateRequest": {
        "type": "object",
        "properties": {
          "tx": {
            "$ref": "#/components/schemas/cosmos.tx.v1beta1.Tx"
          },
          "tx_bytes": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "tx_bytes is the raw transaction.\n\nSince: cosmos-sdk 0.43",
            "format": "byte"
          }
        },
        "description": "SimulateRequest is the request type for the Service.Simulate\nRPC method."
      },
      "cosmos.tx.v1beta1.SimulateResponse": {
        "type": "object",
        "properties": {
          "gas_info": {
            "type": "object",
            "properties": {
              "gas_wanted": {
                "type": "string",
                "description": "GasWanted is the maximum units of work we allow this tx to perform.",
                "format": "uint64"
              },
              "gas_used": {
                "type": "string",
                "description": "GasUsed is the amount of gas actually consumed.",
                "format": "uint64"
              }
            },
            "description": "gas_info is the information about gas used in the simulation."
          },
          "result": {
            "type": "object",
            "properties": {
              "data": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Data is any data returned from message or handler execution. It MUST be\nlength prefixed in order to separate data from multiple message executions.\nDeprecated. This field is still populated, but prefer msg_response instead\nbecause it also contains the Msg response typeURL.",
                "format": "byte"
              },
              "log": {
                "type": "string",
                "description": "Log contains the log information from message or handler execution."
              },
              "events": {
                "type": "array",
                "description": "Events contains a slice of Event objects that were emitted during message\nor handler execution.",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "attributes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "index": {
                            "type": "boolean"
                          }
                        },
                        "description": "EventAttribute is a single key-value pair, associated with an event."
                      }
                    }
                  },
                  "description": "Event allows application developers to attach additional information to\nResponseFinalizeBlock and ResponseCheckTx.\nLater, transactions may be queried using these events."
                }
              },
              "msg_responses": {
                "type": "array",
                "description": "msg_responses contains the Msg handler responses type packed in Anys.\n\nSince: cosmos-sdk 0.46",
                "items": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                }
              }
            },
            "description": "result is the result of the simulation."
          }
        },
        "description": "SimulateResponse is the response type for the\nService.SimulateRPC method."
      },
      "cosmos.tx.v1beta1.Tip": {
        "type": "object",
        "properties": {
          "amount": {
            "title": "amount is the amount of the tip",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "denom": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
            }
          },
          "tipper": {
            "title": "tipper is the address of the account paying for the tip",
            "type": "string"
          }
        },
        "description": "Tip is the tip used for meta-transactions.\n\nSince: cosmos-sdk 0.46"
      },
      "cosmos.tx.v1beta1.Tx": {
        "type": "object",
        "properties": {
          "body": {
            "title": "body is the processable content of the transaction",
            "type": "object",
            "properties": {
              "messages": {
                "type": "array",
                "description": "messages is a list of messages to be executed. The required signers of\nthose messages define the number and order of elements in AuthInfo's\nsigner_infos and Tx's signatures. Each required signer address is added to\nthe list only the first time it occurs.\nBy convention, the first required signer (usually from the first message)\nis referred to as the primary signer and pays the fee for the whole\ntransaction.",
                "items": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                }
              },
              "memo": {
                "type": "string",
                "description": "memo is any arbitrary note/comment to be added to the transaction.\nWARNING: in clients, any publicly exposed text should not be called memo,\nbut should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122)."
              },
              "timeout_height": {
                "title": "timeout is the block height after which this transaction will not\nbe processed by the chain",
                "type": "string",
                "format": "uint64"
              },
              "extension_options": {
                "title": "extension_options are arbitrary options that can be added by chains\nwhen the default options are not sufficient. If any of these are present\nand can't be handled, the transaction will be rejected",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                }
              },
              "non_critical_extension_options": {
                "title": "extension_options are arbitrary options that can be added by chains\nwhen the default options are not sufficient. If any of these are present\nand can't be handled, they will be ignored",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                }
              }
            },
            "description": "TxBody is the body of a transaction that all signers sign over."
          },
          "auth_info": {
            "$ref": "#/components/schemas/cosmos.tx.v1beta1.AuthInfo"
          },
          "signatures": {
            "type": "array",
            "description": "signatures is a list of signatures that matches the length and order of\nAuthInfo's signer_infos to allow connecting signature meta information like\npublic key and signing mode by position.",
            "items": {
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "type": "string",
              "format": "byte"
            }
          }
        },
        "description": "Tx is the standard type used for broadcasting transactions."
      },
      "cosmos.tx.v1beta1.TxBody": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "description": "messages is a list of messages to be executed. The required signers of\nthose messages define the number and order of elements in AuthInfo's\nsigner_infos and Tx's signatures. Each required signer address is added to\nthe list only the first time it occurs.\nBy convention, the first required signer (usually from the first message)\nis referred to as the primary signer and pays the fee for the whole\ntransaction.",
            "items": {
              "type": "object",
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "byte"
                }
              },
              "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
            }
          },
          "memo": {
            "type": "string",
            "description": "memo is any arbitrary note/comment to be added to the transaction.\nWARNING: in clients, any publicly exposed text should not be called memo,\nbut should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122)."
          },
          "timeout_height": {
            "title": "timeout is the block height after which this transaction will not\nbe processed by the chain",
            "type": "string",
            "format": "uint64"
          },
          "extension_options": {
            "title": "extension_options are arbitrary options that can be added by chains\nwhen the default options are not sufficient. If any of these are present\nand can't be handled, the transaction will be rejected",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "byte"
                }
              },
              "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
            }
          },
          "non_critical_extension_options": {
            "title": "extension_options are arbitrary options that can be added by chains\nwhen the default options are not sufficient. If any of these are present\nand can't be handled, they will be ignored",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "byte"
                }
              },
              "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
            }
          }
        },
        "description": "TxBody is the body of a transaction that all signers sign over."
      },
      "cosmos.tx.v1beta1.TxDecodeAminoRequest": {
        "type": "object",
        "properties": {
          "amino_binary": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          }
        },
        "description": "TxDecodeAminoRequest is the request type for the Service.TxDecodeAmino\nRPC method.\n\nSince: cosmos-sdk 0.47"
      },
      "cosmos.tx.v1beta1.TxDecodeAminoResponse": {
        "type": "object",
        "properties": {
          "amino_json": {
            "type": "string"
          }
        },
        "description": "TxDecodeAminoResponse is the response type for the Service.TxDecodeAmino\nRPC method.\n\nSince: cosmos-sdk 0.47"
      },
      "cosmos.tx.v1beta1.TxDecodeRequest": {
        "type": "object",
        "properties": {
          "tx_bytes": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "tx_bytes is the raw transaction.",
            "format": "byte"
          }
        },
        "description": "TxDecodeRequest is the request type for the Service.TxDecode\nRPC method.\n\nSince: cosmos-sdk 0.47"
      },
      "cosmos.tx.v1beta1.TxDecodeResponse": {
        "type": "object",
        "properties": {
          "tx": {
            "$ref": "#/components/schemas/cosmos.tx.v1beta1.Tx"
          }
        },
        "description": "TxDecodeResponse is the response type for the\nService.TxDecode method.\n\nSince: cosmos-sdk 0.47"
      },
      "cosmos.tx.v1beta1.TxEncodeAminoRequest": {
        "type": "object",
        "properties": {
          "amino_json": {
            "type": "string"
          }
        },
        "description": "TxEncodeAminoRequest is the request type for the Service.TxEncodeAmino\nRPC method.\n\nSince: cosmos-sdk 0.47"
      },
      "cosmos.tx.v1beta1.TxEncodeAminoResponse": {
        "type": "object",
        "properties": {
          "amino_binary": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          }
        },
        "description": "TxEncodeAminoResponse is the response type for the Service.TxEncodeAmino\nRPC method.\n\nSince: cosmos-sdk 0.47"
      },
      "cosmos.tx.v1beta1.TxEncodeRequest": {
        "type": "object",
        "properties": {
          "tx": {
            "$ref": "#/components/schemas/cosmos.tx.v1beta1.Tx"
          }
        },
        "description": "TxEncodeRequest is the request type for the Service.TxEncode\nRPC method.\n\nSince: cosmos-sdk 0.47"
      },
      "cosmos.tx.v1beta1.TxEncodeResponse": {
        "type": "object",
        "properties": {
          "tx_bytes": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "tx_bytes is the encoded transaction bytes.",
            "format": "byte"
          }
        },
        "description": "TxEncodeResponse is the response type for the\nService.TxEncode method.\n\nSince: cosmos-sdk 0.47"
      },
      "tendermint.abci.Event": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                },
                "index": {
                  "type": "boolean"
                }
              },
              "description": "EventAttribute is a single key-value pair, associated with an event."
            }
          }
        },
        "description": "Event allows application developers to attach additional information to\nResponseFinalizeBlock and ResponseCheckTx.\nLater, transactions may be queried using these events."
      },
      "tendermint.abci.EventAttribute": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "index": {
            "type": "boolean"
          }
        },
        "description": "EventAttribute is a single key-value pair, associated with an event."
      },
      "cosmos.upgrade.v1beta1.ModuleVersion": {
        "type": "object",
        "properties": {
          "name": {
            "title": "name of the app module",
            "type": "string"
          },
          "version": {
            "title": "consensus version of the app module",
            "type": "string",
            "format": "uint64"
          }
        },
        "description": "ModuleVersion specifies a module and its consensus version.\n\nSince: cosmos-sdk 0.43"
      },
      "cosmos.upgrade.v1beta1.Plan": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Sets the name for the upgrade. This name will be used by the upgraded\nversion of the software to apply any special \"on-upgrade\" commands during\nthe first BeginBlock method after the upgrade is applied. It is also used\nto detect whether a software version can handle a given upgrade. If no\nupgrade handler with this name has been set in the software, it will be\nassumed that the software is out-of-date when the upgrade Time or Height is\nreached and the software will exit."
          },
          "time": {
            "type": "string",
            "description": "Deprecated: Time based upgrades have been deprecated. Time based upgrade logic\nhas been removed from the SDK.\nIf this field is not empty, an error will be thrown.",
            "format": "date-time"
          },
          "height": {
            "type": "string",
            "description": "The height at which the upgrade must be performed.",
            "format": "int64"
          },
          "info": {
            "title": "Any application specific upgrade info to be included on-chain\nsuch as a git commit that validators could automatically upgrade to",
            "type": "string"
          },
          "upgraded_client_state": {
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
          }
        },
        "description": "Plan specifies information about a planned upgrade and when it should occur."
      },
      "cosmos.upgrade.v1beta1.QueryAppliedPlanResponse": {
        "type": "object",
        "properties": {
          "height": {
            "type": "string",
            "description": "height is the block height at which the plan was applied.",
            "format": "int64"
          }
        },
        "description": "QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC\nmethod."
      },
      "cosmos.upgrade.v1beta1.QueryAuthorityResponse": {
        "title": "QueryAuthorityResponse is the response type for Query/Authority",
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          }
        },
        "description": "Since: cosmos-sdk 0.46"
      },
      "cosmos.upgrade.v1beta1.QueryCurrentPlanResponse": {
        "type": "object",
        "properties": {
          "plan": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Sets the name for the upgrade. This name will be used by the upgraded\nversion of the software to apply any special \"on-upgrade\" commands during\nthe first BeginBlock method after the upgrade is applied. It is also used\nto detect whether a software version can handle a given upgrade. If no\nupgrade handler with this name has been set in the software, it will be\nassumed that the software is out-of-date when the upgrade Time or Height is\nreached and the software will exit."
              },
              "time": {
                "type": "string",
                "description": "Deprecated: Time based upgrades have been deprecated. Time based upgrade logic\nhas been removed from the SDK.\nIf this field is not empty, an error will be thrown.",
                "format": "date-time"
              },
              "height": {
                "type": "string",
                "description": "The height at which the upgrade must be performed.",
                "format": "int64"
              },
              "info": {
                "title": "Any application specific upgrade info to be included on-chain\nsuch as a git commit that validators could automatically upgrade to",
                "type": "string"
              },
              "upgraded_client_state": {
                "type": "object",
                "properties": {
                  "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                  },
                  "value": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                  }
                },
                "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
              }
            },
            "description": "plan is the current upgrade plan."
          }
        },
        "description": "QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC\nmethod."
      },
      "cosmos.upgrade.v1beta1.QueryModuleVersionsResponse": {
        "type": "object",
        "properties": {
          "module_versions": {
            "type": "array",
            "description": "module_versions is a list of module names with their consensus versions.",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "title": "name of the app module",
                  "type": "string"
                },
                "version": {
                  "title": "consensus version of the app module",
                  "type": "string",
                  "format": "uint64"
                }
              },
              "description": "ModuleVersion specifies a module and its consensus version.\n\nSince: cosmos-sdk 0.43"
            }
          }
        },
        "description": "QueryModuleVersionsResponse is the response type for the Query/ModuleVersions\nRPC method.\n\nSince: cosmos-sdk 0.43"
      },
      "cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse": {
        "type": "object",
        "properties": {
          "upgraded_consensus_state": {
            "title": "Since: cosmos-sdk 0.43",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          }
        },
        "description": "QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState\nRPC method."
      },
      "cosmos.authz.v1beta1.Grant": {
        "type": "object",
        "properties": {
          "authorization": {
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
          },
          "expiration": {
            "title": "time when the grant will expire and will be pruned. If null, then the grant\ndoesn't have a time expiration (other conditions  in `authorization`\nmay apply to invalidate the grant)",
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Grant gives permissions to execute\nthe provide method with expiration time."
      },
      "cosmos.authz.v1beta1.GrantAuthorization": {
        "title": "GrantAuthorization extends a grant with both the addresses of the grantee and granter.\nIt is used in genesis.proto and query.proto",
        "type": "object",
        "properties": {
          "granter": {
            "type": "string"
          },
          "grantee": {
            "type": "string"
          },
          "authorization": {
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "cosmos.authz.v1beta1.QueryGranteeGrantsResponse": {
        "type": "object",
        "properties": {
          "grants": {
            "type": "array",
            "description": "grants is a list of grants granted to the grantee.",
            "items": {
              "title": "GrantAuthorization extends a grant with both the addresses of the grantee and granter.\nIt is used in genesis.proto and query.proto",
              "type": "object",
              "properties": {
                "granter": {
                  "type": "string"
                },
                "grantee": {
                  "type": "string"
                },
                "authorization": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                },
                "expiration": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines an pagination for the response."
          }
        },
        "description": "QueryGranteeGrantsResponse is the response type for the Query/GranteeGrants RPC method."
      },
      "cosmos.authz.v1beta1.QueryGranterGrantsResponse": {
        "type": "object",
        "properties": {
          "grants": {
            "type": "array",
            "description": "grants is a list of grants granted by the granter.",
            "items": {
              "title": "GrantAuthorization extends a grant with both the addresses of the grantee and granter.\nIt is used in genesis.proto and query.proto",
              "type": "object",
              "properties": {
                "granter": {
                  "type": "string"
                },
                "grantee": {
                  "type": "string"
                },
                "authorization": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                },
                "expiration": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines an pagination for the response."
          }
        },
        "description": "QueryGranterGrantsResponse is the response type for the Query/GranterGrants RPC method."
      },
      "cosmos.authz.v1beta1.QueryGrantsResponse": {
        "type": "object",
        "properties": {
          "grants": {
            "type": "array",
            "description": "authorizations is a list of grants granted for grantee by granter.",
            "items": {
              "type": "object",
              "properties": {
                "authorization": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                },
                "expiration": {
                  "title": "time when the grant will expire and will be pruned. If null, then the grant\ndoesn't have a time expiration (other conditions  in `authorization`\nmay apply to invalidate the grant)",
                  "type": "string",
                  "format": "date-time"
                }
              },
              "description": "Grant gives permissions to execute\nthe provide method with expiration time."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines an pagination for the response."
          }
        },
        "description": "QueryGrantsResponse is the response type for the Query/Authorizations RPC method."
      },
      "cosmos.feegrant.v1beta1.Grant": {
        "title": "Grant is stored in the KVStore to record a grant with full context",
        "type": "object",
        "properties": {
          "granter": {
            "type": "string",
            "description": "granter is the address of the user granting an allowance of their funds."
          },
          "grantee": {
            "type": "string",
            "description": "grantee is the address of the user being granted an allowance of another user's funds."
          },
          "allowance": {
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "allowance can be any of basic, periodic, allowed fee allowance."
          }
        }
      },
      "cosmos.feegrant.v1beta1.QueryAllowanceResponse": {
        "type": "object",
        "properties": {
          "allowance": {
            "title": "Grant is stored in the KVStore to record a grant with full context",
            "type": "object",
            "properties": {
              "granter": {
                "type": "string",
                "description": "granter is the address of the user granting an allowance of their funds."
              },
              "grantee": {
                "type": "string",
                "description": "grantee is the address of the user being granted an allowance of another user's funds."
              },
              "allowance": {
                "type": "object",
                "properties": {
                  "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                  },
                  "value": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                  }
                },
                "description": "allowance can be any of basic, periodic, allowed fee allowance."
              }
            },
            "description": "allowance is a allowance granted for grantee by granter."
          }
        },
        "description": "QueryAllowanceResponse is the response type for the Query/Allowance RPC method."
      },
      "cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse": {
        "type": "object",
        "properties": {
          "allowances": {
            "type": "array",
            "description": "allowances that have been issued by the granter.",
            "items": {
              "title": "Grant is stored in the KVStore to record a grant with full context",
              "type": "object",
              "properties": {
                "granter": {
                  "type": "string",
                  "description": "granter is the address of the user granting an allowance of their funds."
                },
                "grantee": {
                  "type": "string",
                  "description": "grantee is the address of the user being granted an allowance of another user's funds."
                },
                "allowance": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "allowance can be any of basic, periodic, allowed fee allowance."
                }
              }
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines an pagination for the response."
          }
        },
        "description": "QueryAllowancesByGranterResponse is the response type for the Query/AllowancesByGranter RPC method.\n\nSince: cosmos-sdk 0.46"
      },
      "cosmos.feegrant.v1beta1.QueryAllowancesResponse": {
        "type": "object",
        "properties": {
          "allowances": {
            "type": "array",
            "description": "allowances are allowance's granted for grantee by granter.",
            "items": {
              "title": "Grant is stored in the KVStore to record a grant with full context",
              "type": "object",
              "properties": {
                "granter": {
                  "type": "string",
                  "description": "granter is the address of the user granting an allowance of their funds."
                },
                "grantee": {
                  "type": "string",
                  "description": "grantee is the address of the user being granted an allowance of another user's funds."
                },
                "allowance": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "allowance can be any of basic, periodic, allowed fee allowance."
                }
              }
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines an pagination for the response."
          }
        },
        "description": "QueryAllowancesResponse is the response type for the Query/Allowances RPC method."
      },
      "cosmos.nft.v1beta1.Class": {
        "type": "object",
        "properties": {
          "id": {
            "title": "id defines the unique identifier of the NFT classification, similar to the contract address of ERC721",
            "type": "string"
          },
          "name": {
            "title": "name defines the human-readable name of the NFT classification. Optional",
            "type": "string"
          },
          "symbol": {
            "title": "symbol is an abbreviated name for nft classification. Optional",
            "type": "string"
          },
          "description": {
            "title": "description is a brief description of nft classification. Optional",
            "type": "string"
          },
          "uri": {
            "title": "uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional",
            "type": "string"
          },
          "uri_hash": {
            "title": "uri_hash is a hash of the document pointed by uri. Optional",
            "type": "string"
          },
          "data": {
            "title": "data is the app specific metadata of the NFT class. Optional",
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
          }
        },
        "description": "Class defines the class of the nft type."
      },
      "cosmos.nft.v1beta1.NFT": {
        "type": "object",
        "properties": {
          "class_id": {
            "title": "class_id associated with the NFT, similar to the contract address of ERC721",
            "type": "string"
          },
          "id": {
            "title": "id is a unique identifier of the NFT",
            "type": "string"
          },
          "uri": {
            "title": "uri for the NFT metadata stored off chain",
            "type": "string"
          },
          "uri_hash": {
            "title": "uri_hash is a hash of the document pointed by uri",
            "type": "string"
          },
          "data": {
            "title": "data is an app specific data of the NFT. Optional",
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
          }
        },
        "description": "NFT defines the NFT."
      },
      "cosmos.nft.v1beta1.QueryBalanceResponse": {
        "title": "QueryBalanceResponse is the response type for the Query/Balance RPC method",
        "type": "object",
        "properties": {
          "amount": {
            "title": "amount is the number of all NFTs of a given class owned by the owner",
            "type": "string",
            "format": "uint64"
          }
        }
      },
      "cosmos.nft.v1beta1.QueryClassResponse": {
        "title": "QueryClassResponse is the response type for the Query/Class RPC method",
        "type": "object",
        "properties": {
          "class": {
            "type": "object",
            "properties": {
              "id": {
                "title": "id defines the unique identifier of the NFT classification, similar to the contract address of ERC721",
                "type": "string"
              },
              "name": {
                "title": "name defines the human-readable name of the NFT classification. Optional",
                "type": "string"
              },
              "symbol": {
                "title": "symbol is an abbreviated name for nft classification. Optional",
                "type": "string"
              },
              "description": {
                "title": "description is a brief description of nft classification. Optional",
                "type": "string"
              },
              "uri": {
                "title": "uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional",
                "type": "string"
              },
              "uri_hash": {
                "title": "uri_hash is a hash of the document pointed by uri. Optional",
                "type": "string"
              },
              "data": {
                "title": "data is the app specific metadata of the NFT class. Optional",
                "type": "object",
                "properties": {
                  "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                  },
                  "value": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                  }
                },
                "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
              }
            },
            "description": "Class defines the class of the nft type."
          }
        }
      },
      "cosmos.nft.v1beta1.QueryClassesResponse": {
        "title": "QueryClassesResponse is the response type for the Query/Classes RPC method",
        "type": "object",
        "properties": {
          "classes": {
            "type": "array",
            "description": "class defines the class of the nft type.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "title": "id defines the unique identifier of the NFT classification, similar to the contract address of ERC721",
                  "type": "string"
                },
                "name": {
                  "title": "name defines the human-readable name of the NFT classification. Optional",
                  "type": "string"
                },
                "symbol": {
                  "title": "symbol is an abbreviated name for nft classification. Optional",
                  "type": "string"
                },
                "description": {
                  "title": "description is a brief description of nft classification. Optional",
                  "type": "string"
                },
                "uri": {
                  "title": "uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional",
                  "type": "string"
                },
                "uri_hash": {
                  "title": "uri_hash is a hash of the document pointed by uri. Optional",
                  "type": "string"
                },
                "data": {
                  "title": "data is the app specific metadata of the NFT class. Optional",
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                }
              },
              "description": "Class defines the class of the nft type."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        }
      },
      "cosmos.nft.v1beta1.QueryNFTResponse": {
        "title": "QueryNFTResponse is the response type for the Query/NFT RPC method",
        "type": "object",
        "properties": {
          "nft": {
            "title": "owner is the owner address of the nft",
            "type": "object",
            "properties": {
              "class_id": {
                "title": "class_id associated with the NFT, similar to the contract address of ERC721",
                "type": "string"
              },
              "id": {
                "title": "id is a unique identifier of the NFT",
                "type": "string"
              },
              "uri": {
                "title": "uri for the NFT metadata stored off chain",
                "type": "string"
              },
              "uri_hash": {
                "title": "uri_hash is a hash of the document pointed by uri",
                "type": "string"
              },
              "data": {
                "title": "data is an app specific data of the NFT. Optional",
                "type": "object",
                "properties": {
                  "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                  },
                  "value": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                  }
                },
                "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
              }
            },
            "description": "NFT defines the NFT."
          }
        }
      },
      "cosmos.nft.v1beta1.QueryNFTsResponse": {
        "title": "QueryNFTsResponse is the response type for the Query/NFTs RPC methods",
        "type": "object",
        "properties": {
          "nfts": {
            "title": "NFT defines the NFT",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "class_id": {
                  "title": "class_id associated with the NFT, similar to the contract address of ERC721",
                  "type": "string"
                },
                "id": {
                  "title": "id is a unique identifier of the NFT",
                  "type": "string"
                },
                "uri": {
                  "title": "uri for the NFT metadata stored off chain",
                  "type": "string"
                },
                "uri_hash": {
                  "title": "uri_hash is a hash of the document pointed by uri",
                  "type": "string"
                },
                "data": {
                  "title": "data is an app specific data of the NFT. Optional",
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                }
              },
              "description": "NFT defines the NFT."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        }
      },
      "cosmos.nft.v1beta1.QueryOwnerResponse": {
        "title": "QueryOwnerResponse is the response type for the Query/Owner RPC method",
        "type": "object",
        "properties": {
          "owner": {
            "title": "owner is the owner address of the nft",
            "type": "string"
          }
        }
      },
      "cosmos.nft.v1beta1.QuerySupplyResponse": {
        "title": "QuerySupplyResponse is the response type for the Query/Supply RPC method",
        "type": "object",
        "properties": {
          "amount": {
            "title": "amount is the number of all NFTs from the given class",
            "type": "string",
            "format": "uint64"
          }
        }
      },
      "cosmos.group.v1.GroupInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id is the unique ID of the group.",
            "format": "uint64"
          },
          "admin": {
            "type": "string",
            "description": "admin is the account address of the group's admin."
          },
          "metadata": {
            "title": "metadata is any arbitrary metadata to attached to the group.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1",
            "type": "string"
          },
          "version": {
            "title": "version is used to track changes to a group's membership structure that\nwould break existing proposals. Whenever any members weight is changed,\nor any member is added or removed this version is incremented and will\ncause proposals based on older versions of this group to fail",
            "type": "string",
            "format": "uint64"
          },
          "total_weight": {
            "type": "string",
            "description": "total_weight is the sum of the group members' weights."
          },
          "created_at": {
            "type": "string",
            "description": "created_at is a timestamp specifying when a group was created.",
            "format": "date-time"
          }
        },
        "description": "GroupInfo represents the high-level on-chain information for a group."
      },
      "cosmos.group.v1.GroupMember": {
        "type": "object",
        "properties": {
          "group_id": {
            "type": "string",
            "description": "group_id is the unique ID of the group.",
            "format": "uint64"
          },
          "member": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string",
                "description": "address is the member's account address."
              },
              "weight": {
                "type": "string",
                "description": "weight is the member's voting weight that should be greater than 0."
              },
              "metadata": {
                "type": "string",
                "description": "metadata is any arbitrary metadata attached to the member."
              },
              "added_at": {
                "type": "string",
                "description": "added_at is a timestamp specifying when a member was added.",
                "format": "date-time"
              }
            },
            "description": "member is the member data."
          }
        },
        "description": "GroupMember represents the relationship between a group and a member."
      },
      "cosmos.group.v1.GroupPolicyInfo": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "address is the account address of group policy."
          },
          "group_id": {
            "type": "string",
            "description": "group_id is the unique ID of the group.",
            "format": "uint64"
          },
          "admin": {
            "type": "string",
            "description": "admin is the account address of the group admin."
          },
          "metadata": {
            "title": "metadata is any arbitrary metadata attached to the group policy.\nthe recommended format of the metadata is to be found here:\nhttps://docs.cosmos.network/v0.47/modules/group#decision-policy-1",
            "type": "string"
          },
          "version": {
            "type": "string",
            "description": "version is used to track changes to a group's GroupPolicyInfo structure that\nwould create a different result on a running proposal.",
            "format": "uint64"
          },
          "decision_policy": {
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
          },
          "created_at": {
            "type": "string",
            "description": "created_at is a timestamp specifying when a group policy was created.",
            "format": "date-time"
          }
        },
        "description": "GroupPolicyInfo represents the high-level on-chain information for a group policy."
      },
      "cosmos.group.v1.Member": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "address is the member's account address."
          },
          "weight": {
            "type": "string",
            "description": "weight is the member's voting weight that should be greater than 0."
          },
          "metadata": {
            "type": "string",
            "description": "metadata is any arbitrary metadata attached to the member."
          },
          "added_at": {
            "type": "string",
            "description": "added_at is a timestamp specifying when a member was added.",
            "format": "date-time"
          }
        },
        "description": "Member represents a group member with an account address,\nnon-zero weight, metadata and added_at timestamp."
      },
      "cosmos.group.v1.Proposal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id is the unique id of the proposal.",
            "format": "uint64"
          },
          "group_policy_address": {
            "type": "string",
            "description": "group_policy_address is the account address of group policy."
          },
          "metadata": {
            "title": "metadata is any arbitrary metadata attached to the proposal.\nthe recommended format of the metadata is to be found here:\nhttps://docs.cosmos.network/v0.47/modules/group#proposal-4",
            "type": "string"
          },
          "proposers": {
            "type": "array",
            "description": "proposers are the account addresses of the proposers.",
            "items": {
              "type": "string"
            }
          },
          "submit_time": {
            "type": "string",
            "description": "submit_time is a timestamp specifying when a proposal was submitted.",
            "format": "date-time"
          },
          "group_version": {
            "type": "string",
            "description": "group_version tracks the version of the group at proposal submission.\nThis field is here for informational purposes only.",
            "format": "uint64"
          },
          "group_policy_version": {
            "type": "string",
            "description": "group_policy_version tracks the version of the group policy at proposal submission.\nWhen a decision policy is changed, existing proposals from previous policy\nversions will become invalid with the `ABORTED` status.\nThis field is here for informational purposes only.",
            "format": "uint64"
          },
          "status": {
            "type": "string",
            "description": "status represents the high level position in the life cycle of the proposal. Initial value is Submitted.",
            "default": "PROPOSAL_STATUS_UNSPECIFIED",
            "enum": [
              "PROPOSAL_STATUS_UNSPECIFIED",
              "PROPOSAL_STATUS_SUBMITTED",
              "PROPOSAL_STATUS_ACCEPTED",
              "PROPOSAL_STATUS_REJECTED",
              "PROPOSAL_STATUS_ABORTED",
              "PROPOSAL_STATUS_WITHDRAWN"
            ]
          },
          "final_tally_result": {
            "type": "object",
            "properties": {
              "yes_count": {
                "type": "string",
                "description": "yes_count is the weighted sum of yes votes."
              },
              "abstain_count": {
                "type": "string",
                "description": "abstain_count is the weighted sum of abstainers."
              },
              "no_count": {
                "type": "string",
                "description": "no_count is the weighted sum of no votes."
              },
              "no_with_veto_count": {
                "type": "string",
                "description": "no_with_veto_count is the weighted sum of veto."
              }
            },
            "description": "final_tally_result contains the sums of all weighted votes for this\nproposal for each vote option. It is empty at submission, and only\npopulated after tallying, at voting period end or at proposal execution,\nwhichever happens first."
          },
          "voting_period_end": {
            "type": "string",
            "description": "voting_period_end is the timestamp before which voting must be done.\nUnless a successful MsgExec is called before (to execute a proposal whose\ntally is successful before the voting period ends), tallying will be done\nat this point, and the `final_tally_result`and `status` fields will be\naccordingly updated.",
            "format": "date-time"
          },
          "executor_result": {
            "type": "string",
            "description": "executor_result is the final result of the proposal execution. Initial value is NotRun.",
            "default": "PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED",
            "enum": [
              "PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED",
              "PROPOSAL_EXECUTOR_RESULT_NOT_RUN",
              "PROPOSAL_EXECUTOR_RESULT_SUCCESS",
              "PROPOSAL_EXECUTOR_RESULT_FAILURE"
            ]
          },
          "messages": {
            "type": "array",
            "description": "messages is a list of `sdk.Msg`s that will be executed if the proposal passes.",
            "items": {
              "type": "object",
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "byte"
                }
              },
              "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
            }
          },
          "title": {
            "title": "title is the title of the proposal",
            "type": "string",
            "description": "Since: cosmos-sdk 0.47"
          },
          "summary": {
            "title": "summary is a short summary of the proposal",
            "type": "string",
            "description": "Since: cosmos-sdk 0.47"
          }
        },
        "description": "Proposal defines a group proposal. Any member of a group can submit a proposal\nfor a group policy to decide upon.\nA proposal consists of a set of `sdk.Msg`s that will be executed if the proposal\npasses as well as some optional metadata associated with the proposal."
      },
      "cosmos.group.v1.ProposalExecutorResult": {
        "type": "string",
        "description": "ProposalExecutorResult defines types of proposal executor results.\n\n - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED: An empty value is not allowed.\n - PROPOSAL_EXECUTOR_RESULT_NOT_RUN: We have not yet run the executor.\n - PROPOSAL_EXECUTOR_RESULT_SUCCESS: The executor was successful and proposed action updated state.\n - PROPOSAL_EXECUTOR_RESULT_FAILURE: The executor returned an error and proposed action didn't update state.",
        "default": "PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED",
        "enum": [
          "PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED",
          "PROPOSAL_EXECUTOR_RESULT_NOT_RUN",
          "PROPOSAL_EXECUTOR_RESULT_SUCCESS",
          "PROPOSAL_EXECUTOR_RESULT_FAILURE"
        ]
      },
      "cosmos.group.v1.ProposalStatus": {
        "type": "string",
        "description": "ProposalStatus defines proposal statuses.\n\n - PROPOSAL_STATUS_UNSPECIFIED: An empty value is invalid and not allowed.\n - PROPOSAL_STATUS_SUBMITTED: Initial status of a proposal when submitted.\n - PROPOSAL_STATUS_ACCEPTED: Final status of a proposal when the final tally is done and the outcome\npasses the group policy's decision policy.\n - PROPOSAL_STATUS_REJECTED: Final status of a proposal when the final tally is done and the outcome\nis rejected by the group policy's decision policy.\n - PROPOSAL_STATUS_ABORTED: Final status of a proposal when the group policy is modified before the\nfinal tally.\n - PROPOSAL_STATUS_WITHDRAWN: A proposal can be withdrawn before the voting start time by the owner.\nWhen this happens the final status is Withdrawn.",
        "default": "PROPOSAL_STATUS_UNSPECIFIED",
        "enum": [
          "PROPOSAL_STATUS_UNSPECIFIED",
          "PROPOSAL_STATUS_SUBMITTED",
          "PROPOSAL_STATUS_ACCEPTED",
          "PROPOSAL_STATUS_REJECTED",
          "PROPOSAL_STATUS_ABORTED",
          "PROPOSAL_STATUS_WITHDRAWN"
        ]
      },
      "cosmos.group.v1.QueryGroupInfoResponse": {
        "type": "object",
        "properties": {
          "info": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "id is the unique ID of the group.",
                "format": "uint64"
              },
              "admin": {
                "type": "string",
                "description": "admin is the account address of the group's admin."
              },
              "metadata": {
                "title": "metadata is any arbitrary metadata to attached to the group.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1",
                "type": "string"
              },
              "version": {
                "title": "version is used to track changes to a group's membership structure that\nwould break existing proposals. Whenever any members weight is changed,\nor any member is added or removed this version is incremented and will\ncause proposals based on older versions of this group to fail",
                "type": "string",
                "format": "uint64"
              },
              "total_weight": {
                "type": "string",
                "description": "total_weight is the sum of the group members' weights."
              },
              "created_at": {
                "type": "string",
                "description": "created_at is a timestamp specifying when a group was created.",
                "format": "date-time"
              }
            },
            "description": "info is the GroupInfo of the group."
          }
        },
        "description": "QueryGroupInfoResponse is the Query/GroupInfo response type."
      },
      "cosmos.group.v1.QueryGroupMembersResponse": {
        "type": "object",
        "properties": {
          "members": {
            "type": "array",
            "description": "members are the members of the group with given group_id.",
            "items": {
              "type": "object",
              "properties": {
                "group_id": {
                  "type": "string",
                  "description": "group_id is the unique ID of the group.",
                  "format": "uint64"
                },
                "member": {
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string",
                      "description": "address is the member's account address."
                    },
                    "weight": {
                      "type": "string",
                      "description": "weight is the member's voting weight that should be greater than 0."
                    },
                    "metadata": {
                      "type": "string",
                      "description": "metadata is any arbitrary metadata attached to the member."
                    },
                    "added_at": {
                      "type": "string",
                      "description": "added_at is a timestamp specifying when a member was added.",
                      "format": "date-time"
                    }
                  },
                  "description": "member is the member data."
                }
              },
              "description": "GroupMember represents the relationship between a group and a member."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryGroupMembersResponse is the Query/GroupMembersResponse response type."
      },
      "cosmos.group.v1.QueryGroupPoliciesByAdminResponse": {
        "type": "object",
        "properties": {
          "group_policies": {
            "type": "array",
            "description": "group_policies are the group policies info with provided admin.",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "address is the account address of group policy."
                },
                "group_id": {
                  "type": "string",
                  "description": "group_id is the unique ID of the group.",
                  "format": "uint64"
                },
                "admin": {
                  "type": "string",
                  "description": "admin is the account address of the group admin."
                },
                "metadata": {
                  "title": "metadata is any arbitrary metadata attached to the group policy.\nthe recommended format of the metadata is to be found here:\nhttps://docs.cosmos.network/v0.47/modules/group#decision-policy-1",
                  "type": "string"
                },
                "version": {
                  "type": "string",
                  "description": "version is used to track changes to a group's GroupPolicyInfo structure that\nwould create a different result on a running proposal.",
                  "format": "uint64"
                },
                "decision_policy": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                },
                "created_at": {
                  "type": "string",
                  "description": "created_at is a timestamp specifying when a group policy was created.",
                  "format": "date-time"
                }
              },
              "description": "GroupPolicyInfo represents the high-level on-chain information for a group policy."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryGroupPoliciesByAdminResponse is the Query/GroupPoliciesByAdmin response type."
      },
      "cosmos.group.v1.QueryGroupPoliciesByGroupResponse": {
        "type": "object",
        "properties": {
          "group_policies": {
            "type": "array",
            "description": "group_policies are the group policies info associated with the provided group.",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "address is the account address of group policy."
                },
                "group_id": {
                  "type": "string",
                  "description": "group_id is the unique ID of the group.",
                  "format": "uint64"
                },
                "admin": {
                  "type": "string",
                  "description": "admin is the account address of the group admin."
                },
                "metadata": {
                  "title": "metadata is any arbitrary metadata attached to the group policy.\nthe recommended format of the metadata is to be found here:\nhttps://docs.cosmos.network/v0.47/modules/group#decision-policy-1",
                  "type": "string"
                },
                "version": {
                  "type": "string",
                  "description": "version is used to track changes to a group's GroupPolicyInfo structure that\nwould create a different result on a running proposal.",
                  "format": "uint64"
                },
                "decision_policy": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                },
                "created_at": {
                  "type": "string",
                  "description": "created_at is a timestamp specifying when a group policy was created.",
                  "format": "date-time"
                }
              },
              "description": "GroupPolicyInfo represents the high-level on-chain information for a group policy."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryGroupPoliciesByGroupResponse is the Query/GroupPoliciesByGroup response type."
      },
      "cosmos.group.v1.QueryGroupPolicyInfoResponse": {
        "type": "object",
        "properties": {
          "info": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string",
                "description": "address is the account address of group policy."
              },
              "group_id": {
                "type": "string",
                "description": "group_id is the unique ID of the group.",
                "format": "uint64"
              },
              "admin": {
                "type": "string",
                "description": "admin is the account address of the group admin."
              },
              "metadata": {
                "title": "metadata is any arbitrary metadata attached to the group policy.\nthe recommended format of the metadata is to be found here:\nhttps://docs.cosmos.network/v0.47/modules/group#decision-policy-1",
                "type": "string"
              },
              "version": {
                "type": "string",
                "description": "version is used to track changes to a group's GroupPolicyInfo structure that\nwould create a different result on a running proposal.",
                "format": "uint64"
              },
              "decision_policy": {
                "type": "object",
                "properties": {
                  "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                  },
                  "value": {
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                  }
                },
                "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
              },
              "created_at": {
                "type": "string",
                "description": "created_at is a timestamp specifying when a group policy was created.",
                "format": "date-time"
              }
            },
            "description": "GroupPolicyInfo represents the high-level on-chain information for a group policy."
          }
        },
        "description": "QueryGroupPolicyInfoResponse is the Query/GroupPolicyInfo response type."
      },
      "cosmos.group.v1.QueryGroupsByAdminResponse": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "description": "groups are the groups info with the provided admin.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "id is the unique ID of the group.",
                  "format": "uint64"
                },
                "admin": {
                  "type": "string",
                  "description": "admin is the account address of the group's admin."
                },
                "metadata": {
                  "title": "metadata is any arbitrary metadata to attached to the group.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1",
                  "type": "string"
                },
                "version": {
                  "title": "version is used to track changes to a group's membership structure that\nwould break existing proposals. Whenever any members weight is changed,\nor any member is added or removed this version is incremented and will\ncause proposals based on older versions of this group to fail",
                  "type": "string",
                  "format": "uint64"
                },
                "total_weight": {
                  "type": "string",
                  "description": "total_weight is the sum of the group members' weights."
                },
                "created_at": {
                  "type": "string",
                  "description": "created_at is a timestamp specifying when a group was created.",
                  "format": "date-time"
                }
              },
              "description": "GroupInfo represents the high-level on-chain information for a group."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryGroupsByAdminResponse is the Query/GroupsByAdminResponse response type."
      },
      "cosmos.group.v1.QueryGroupsByMemberResponse": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "description": "groups are the groups info with the provided group member.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "id is the unique ID of the group.",
                  "format": "uint64"
                },
                "admin": {
                  "type": "string",
                  "description": "admin is the account address of the group's admin."
                },
                "metadata": {
                  "title": "metadata is any arbitrary metadata to attached to the group.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1",
                  "type": "string"
                },
                "version": {
                  "title": "version is used to track changes to a group's membership structure that\nwould break existing proposals. Whenever any members weight is changed,\nor any member is added or removed this version is incremented and will\ncause proposals based on older versions of this group to fail",
                  "type": "string",
                  "format": "uint64"
                },
                "total_weight": {
                  "type": "string",
                  "description": "total_weight is the sum of the group members' weights."
                },
                "created_at": {
                  "type": "string",
                  "description": "created_at is a timestamp specifying when a group was created.",
                  "format": "date-time"
                }
              },
              "description": "GroupInfo represents the high-level on-chain information for a group."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryGroupsByMemberResponse is the Query/GroupsByMember response type."
      },
      "cosmos.group.v1.QueryGroupsResponse": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "description": "`groups` is all the groups present in state.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "id is the unique ID of the group.",
                  "format": "uint64"
                },
                "admin": {
                  "type": "string",
                  "description": "admin is the account address of the group's admin."
                },
                "metadata": {
                  "title": "metadata is any arbitrary metadata to attached to the group.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1",
                  "type": "string"
                },
                "version": {
                  "title": "version is used to track changes to a group's membership structure that\nwould break existing proposals. Whenever any members weight is changed,\nor any member is added or removed this version is incremented and will\ncause proposals based on older versions of this group to fail",
                  "type": "string",
                  "format": "uint64"
                },
                "total_weight": {
                  "type": "string",
                  "description": "total_weight is the sum of the group members' weights."
                },
                "created_at": {
                  "type": "string",
                  "description": "created_at is a timestamp specifying when a group was created.",
                  "format": "date-time"
                }
              },
              "description": "GroupInfo represents the high-level on-chain information for a group."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryGroupsResponse is the Query/Groups response type.\n\nSince: cosmos-sdk 0.47.1"
      },
      "cosmos.group.v1.QueryProposalResponse": {
        "type": "object",
        "properties": {
          "proposal": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "id is the unique id of the proposal.",
                "format": "uint64"
              },
              "group_policy_address": {
                "type": "string",
                "description": "group_policy_address is the account address of group policy."
              },
              "metadata": {
                "title": "metadata is any arbitrary metadata attached to the proposal.\nthe recommended format of the metadata is to be found here:\nhttps://docs.cosmos.network/v0.47/modules/group#proposal-4",
                "type": "string"
              },
              "proposers": {
                "type": "array",
                "description": "proposers are the account addresses of the proposers.",
                "items": {
                  "type": "string"
                }
              },
              "submit_time": {
                "type": "string",
                "description": "submit_time is a timestamp specifying when a proposal was submitted.",
                "format": "date-time"
              },
              "group_version": {
                "type": "string",
                "description": "group_version tracks the version of the group at proposal submission.\nThis field is here for informational purposes only.",
                "format": "uint64"
              },
              "group_policy_version": {
                "type": "string",
                "description": "group_policy_version tracks the version of the group policy at proposal submission.\nWhen a decision policy is changed, existing proposals from previous policy\nversions will become invalid with the `ABORTED` status.\nThis field is here for informational purposes only.",
                "format": "uint64"
              },
              "status": {
                "type": "string",
                "description": "status represents the high level position in the life cycle of the proposal. Initial value is Submitted.",
                "default": "PROPOSAL_STATUS_UNSPECIFIED",
                "enum": [
                  "PROPOSAL_STATUS_UNSPECIFIED",
                  "PROPOSAL_STATUS_SUBMITTED",
                  "PROPOSAL_STATUS_ACCEPTED",
                  "PROPOSAL_STATUS_REJECTED",
                  "PROPOSAL_STATUS_ABORTED",
                  "PROPOSAL_STATUS_WITHDRAWN"
                ]
              },
              "final_tally_result": {
                "type": "object",
                "properties": {
                  "yes_count": {
                    "type": "string",
                    "description": "yes_count is the weighted sum of yes votes."
                  },
                  "abstain_count": {
                    "type": "string",
                    "description": "abstain_count is the weighted sum of abstainers."
                  },
                  "no_count": {
                    "type": "string",
                    "description": "no_count is the weighted sum of no votes."
                  },
                  "no_with_veto_count": {
                    "type": "string",
                    "description": "no_with_veto_count is the weighted sum of veto."
                  }
                },
                "description": "final_tally_result contains the sums of all weighted votes for this\nproposal for each vote option. It is empty at submission, and only\npopulated after tallying, at voting period end or at proposal execution,\nwhichever happens first."
              },
              "voting_period_end": {
                "type": "string",
                "description": "voting_period_end is the timestamp before which voting must be done.\nUnless a successful MsgExec is called before (to execute a proposal whose\ntally is successful before the voting period ends), tallying will be done\nat this point, and the `final_tally_result`and `status` fields will be\naccordingly updated.",
                "format": "date-time"
              },
              "executor_result": {
                "type": "string",
                "description": "executor_result is the final result of the proposal execution. Initial value is NotRun.",
                "default": "PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED",
                "enum": [
                  "PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED",
                  "PROPOSAL_EXECUTOR_RESULT_NOT_RUN",
                  "PROPOSAL_EXECUTOR_RESULT_SUCCESS",
                  "PROPOSAL_EXECUTOR_RESULT_FAILURE"
                ]
              },
              "messages": {
                "type": "array",
                "description": "messages is a list of `sdk.Msg`s that will be executed if the proposal passes.",
                "items": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                }
              },
              "title": {
                "title": "title is the title of the proposal",
                "type": "string",
                "description": "Since: cosmos-sdk 0.47"
              },
              "summary": {
                "title": "summary is a short summary of the proposal",
                "type": "string",
                "description": "Since: cosmos-sdk 0.47"
              }
            },
            "description": "proposal is the proposal info."
          }
        },
        "description": "QueryProposalResponse is the Query/Proposal response type."
      },
      "cosmos.group.v1.QueryProposalsByGroupPolicyResponse": {
        "type": "object",
        "properties": {
          "proposals": {
            "type": "array",
            "description": "proposals are the proposals with given group policy.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "id is the unique id of the proposal.",
                  "format": "uint64"
                },
                "group_policy_address": {
                  "type": "string",
                  "description": "group_policy_address is the account address of group policy."
                },
                "metadata": {
                  "title": "metadata is any arbitrary metadata attached to the proposal.\nthe recommended format of the metadata is to be found here:\nhttps://docs.cosmos.network/v0.47/modules/group#proposal-4",
                  "type": "string"
                },
                "proposers": {
                  "type": "array",
                  "description": "proposers are the account addresses of the proposers.",
                  "items": {
                    "type": "string"
                  }
                },
                "submit_time": {
                  "type": "string",
                  "description": "submit_time is a timestamp specifying when a proposal was submitted.",
                  "format": "date-time"
                },
                "group_version": {
                  "type": "string",
                  "description": "group_version tracks the version of the group at proposal submission.\nThis field is here for informational purposes only.",
                  "format": "uint64"
                },
                "group_policy_version": {
                  "type": "string",
                  "description": "group_policy_version tracks the version of the group policy at proposal submission.\nWhen a decision policy is changed, existing proposals from previous policy\nversions will become invalid with the `ABORTED` status.\nThis field is here for informational purposes only.",
                  "format": "uint64"
                },
                "status": {
                  "type": "string",
                  "description": "status represents the high level position in the life cycle of the proposal. Initial value is Submitted.",
                  "default": "PROPOSAL_STATUS_UNSPECIFIED",
                  "enum": [
                    "PROPOSAL_STATUS_UNSPECIFIED",
                    "PROPOSAL_STATUS_SUBMITTED",
                    "PROPOSAL_STATUS_ACCEPTED",
                    "PROPOSAL_STATUS_REJECTED",
                    "PROPOSAL_STATUS_ABORTED",
                    "PROPOSAL_STATUS_WITHDRAWN"
                  ]
                },
                "final_tally_result": {
                  "type": "object",
                  "properties": {
                    "yes_count": {
                      "type": "string",
                      "description": "yes_count is the weighted sum of yes votes."
                    },
                    "abstain_count": {
                      "type": "string",
                      "description": "abstain_count is the weighted sum of abstainers."
                    },
                    "no_count": {
                      "type": "string",
                      "description": "no_count is the weighted sum of no votes."
                    },
                    "no_with_veto_count": {
                      "type": "string",
                      "description": "no_with_veto_count is the weighted sum of veto."
                    }
                  },
                  "description": "final_tally_result contains the sums of all weighted votes for this\nproposal for each vote option. It is empty at submission, and only\npopulated after tallying, at voting period end or at proposal execution,\nwhichever happens first."
                },
                "voting_period_end": {
                  "type": "string",
                  "description": "voting_period_end is the timestamp before which voting must be done.\nUnless a successful MsgExec is called before (to execute a proposal whose\ntally is successful before the voting period ends), tallying will be done\nat this point, and the `final_tally_result`and `status` fields will be\naccordingly updated.",
                  "format": "date-time"
                },
                "executor_result": {
                  "type": "string",
                  "description": "executor_result is the final result of the proposal execution. Initial value is NotRun.",
                  "default": "PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED",
                  "enum": [
                    "PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED",
                    "PROPOSAL_EXECUTOR_RESULT_NOT_RUN",
                    "PROPOSAL_EXECUTOR_RESULT_SUCCESS",
                    "PROPOSAL_EXECUTOR_RESULT_FAILURE"
                  ]
                },
                "messages": {
                  "type": "array",
                  "description": "messages is a list of `sdk.Msg`s that will be executed if the proposal passes.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type_url": {
                        "type": "string",
                        "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                      },
                      "value": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "description": "Must be a valid serialized protocol buffer of the above specified type.",
                        "format": "byte"
                      }
                    },
                    "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
                  }
                },
                "title": {
                  "title": "title is the title of the proposal",
                  "type": "string",
                  "description": "Since: cosmos-sdk 0.47"
                },
                "summary": {
                  "title": "summary is a short summary of the proposal",
                  "type": "string",
                  "description": "Since: cosmos-sdk 0.47"
                }
              },
              "description": "Proposal defines a group proposal. Any member of a group can submit a proposal\nfor a group policy to decide upon.\nA proposal consists of a set of `sdk.Msg`s that will be executed if the proposal\npasses as well as some optional metadata associated with the proposal."
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryProposalsByGroupPolicyResponse is the Query/ProposalByGroupPolicy response type."
      },
      "cosmos.group.v1.QueryTallyResultResponse": {
        "type": "object",
        "properties": {
          "tally": {
            "type": "object",
            "properties": {
              "yes_count": {
                "type": "string",
                "description": "yes_count is the weighted sum of yes votes."
              },
              "abstain_count": {
                "type": "string",
                "description": "abstain_count is the weighted sum of abstainers."
              },
              "no_count": {
                "type": "string",
                "description": "no_count is the weighted sum of no votes."
              },
              "no_with_veto_count": {
                "type": "string",
                "description": "no_with_veto_count is the weighted sum of veto."
              }
            },
            "description": "tally defines the requested tally."
          }
        },
        "description": "QueryTallyResultResponse is the Query/TallyResult response type."
      },
      "cosmos.group.v1.QueryVoteByProposalVoterResponse": {
        "type": "object",
        "properties": {
          "vote": {
            "title": "Vote represents a vote for a proposal.string metadata",
            "type": "object",
            "properties": {
              "proposal_id": {
                "type": "string",
                "description": "proposal is the unique ID of the proposal.",
                "format": "uint64"
              },
              "voter": {
                "type": "string",
                "description": "voter is the account address of the voter."
              },
              "option": {
                "type": "string",
                "description": "option is the voter's choice on the proposal.",
                "default": "VOTE_OPTION_UNSPECIFIED",
                "enum": [
                  "VOTE_OPTION_UNSPECIFIED",
                  "VOTE_OPTION_YES",
                  "VOTE_OPTION_ABSTAIN",
                  "VOTE_OPTION_NO",
                  "VOTE_OPTION_NO_WITH_VETO"
                ]
              },
              "metadata": {
                "title": "metadata is any arbitrary metadata attached to the vote.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2",
                "type": "string"
              },
              "submit_time": {
                "type": "string",
                "description": "submit_time is the timestamp when the vote was submitted.",
                "format": "date-time"
              }
            },
            "description": "vote is the vote with given proposal_id and voter."
          }
        },
        "description": "QueryVoteByProposalVoterResponse is the Query/VoteByProposalVoter response type."
      },
      "cosmos.group.v1.QueryVotesByProposalResponse": {
        "type": "object",
        "properties": {
          "votes": {
            "type": "array",
            "description": "votes are the list of votes for given proposal_id.",
            "items": {
              "title": "Vote represents a vote for a proposal.string metadata",
              "type": "object",
              "properties": {
                "proposal_id": {
                  "type": "string",
                  "description": "proposal is the unique ID of the proposal.",
                  "format": "uint64"
                },
                "voter": {
                  "type": "string",
                  "description": "voter is the account address of the voter."
                },
                "option": {
                  "type": "string",
                  "description": "option is the voter's choice on the proposal.",
                  "default": "VOTE_OPTION_UNSPECIFIED",
                  "enum": [
                    "VOTE_OPTION_UNSPECIFIED",
                    "VOTE_OPTION_YES",
                    "VOTE_OPTION_ABSTAIN",
                    "VOTE_OPTION_NO",
                    "VOTE_OPTION_NO_WITH_VETO"
                  ]
                },
                "metadata": {
                  "title": "metadata is any arbitrary metadata attached to the vote.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2",
                  "type": "string"
                },
                "submit_time": {
                  "type": "string",
                  "description": "submit_time is the timestamp when the vote was submitted.",
                  "format": "date-time"
                }
              }
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryVotesByProposalResponse is the Query/VotesByProposal response type."
      },
      "cosmos.group.v1.QueryVotesByVoterResponse": {
        "type": "object",
        "properties": {
          "votes": {
            "type": "array",
            "description": "votes are the list of votes by given voter.",
            "items": {
              "title": "Vote represents a vote for a proposal.string metadata",
              "type": "object",
              "properties": {
                "proposal_id": {
                  "type": "string",
                  "description": "proposal is the unique ID of the proposal.",
                  "format": "uint64"
                },
                "voter": {
                  "type": "string",
                  "description": "voter is the account address of the voter."
                },
                "option": {
                  "type": "string",
                  "description": "option is the voter's choice on the proposal.",
                  "default": "VOTE_OPTION_UNSPECIFIED",
                  "enum": [
                    "VOTE_OPTION_UNSPECIFIED",
                    "VOTE_OPTION_YES",
                    "VOTE_OPTION_ABSTAIN",
                    "VOTE_OPTION_NO",
                    "VOTE_OPTION_NO_WITH_VETO"
                  ]
                },
                "metadata": {
                  "title": "metadata is any arbitrary metadata attached to the vote.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2",
                  "type": "string"
                },
                "submit_time": {
                  "type": "string",
                  "description": "submit_time is the timestamp when the vote was submitted.",
                  "format": "date-time"
                }
              }
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "QueryVotesByVoterResponse is the Query/VotesByVoter response type."
      },
      "cosmos.group.v1.TallyResult": {
        "type": "object",
        "properties": {
          "yes_count": {
            "type": "string",
            "description": "yes_count is the weighted sum of yes votes."
          },
          "abstain_count": {
            "type": "string",
            "description": "abstain_count is the weighted sum of abstainers."
          },
          "no_count": {
            "type": "string",
            "description": "no_count is the weighted sum of no votes."
          },
          "no_with_veto_count": {
            "type": "string",
            "description": "no_with_veto_count is the weighted sum of veto."
          }
        },
        "description": "TallyResult represents the sum of weighted votes for each vote option."
      },
      "cosmos.group.v1.Vote": {
        "title": "Vote represents a vote for a proposal.string metadata",
        "type": "object",
        "properties": {
          "proposal_id": {
            "type": "string",
            "description": "proposal is the unique ID of the proposal.",
            "format": "uint64"
          },
          "voter": {
            "type": "string",
            "description": "voter is the account address of the voter."
          },
          "option": {
            "type": "string",
            "description": "option is the voter's choice on the proposal.",
            "default": "VOTE_OPTION_UNSPECIFIED",
            "enum": [
              "VOTE_OPTION_UNSPECIFIED",
              "VOTE_OPTION_YES",
              "VOTE_OPTION_ABSTAIN",
              "VOTE_OPTION_NO",
              "VOTE_OPTION_NO_WITH_VETO"
            ]
          },
          "metadata": {
            "title": "metadata is any arbitrary metadata attached to the vote.\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2",
            "type": "string"
          },
          "submit_time": {
            "type": "string",
            "description": "submit_time is the timestamp when the vote was submitted.",
            "format": "date-time"
          }
        }
      },
      "cosmos.group.v1.VoteOption": {
        "type": "string",
        "description": "VoteOption enumerates the valid vote options for a given proposal.\n\n - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines an unspecified vote option which will\nreturn an error.\n - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.\n - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.\n - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.\n - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.",
        "default": "VOTE_OPTION_UNSPECIFIED",
        "enum": [
          "VOTE_OPTION_UNSPECIFIED",
          "VOTE_OPTION_YES",
          "VOTE_OPTION_ABSTAIN",
          "VOTE_OPTION_NO",
          "VOTE_OPTION_NO_WITH_VETO"
        ]
      },
      "cosmos.circuit.v1.AccountResponse": {
        "type": "object",
        "properties": {
          "permission": {
            "type": "object",
            "properties": {
              "level": {
                "type": "string",
                "description": "level is the level of permissions granted to this account.",
                "default": "LEVEL_NONE_UNSPECIFIED",
                "enum": [
                  "LEVEL_NONE_UNSPECIFIED",
                  "LEVEL_SOME_MSGS",
                  "LEVEL_ALL_MSGS",
                  "LEVEL_SUPER_ADMIN"
                ]
              },
              "limit_type_urls": {
                "type": "array",
                "description": "limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type\nURLs that the account can trip. It is an error to use limit_type_urls with\na level other than LEVEL_SOME_MSGS.",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": "Permissions are the permissions that an account has to trip\nor reset the circuit breaker."
          }
        },
        "description": "AccountResponse is the response type for the Query/Account RPC method."
      },
      "cosmos.circuit.v1.AccountsResponse": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "title": "GenesisAccountPermissions is the account permissions for the circuit breaker in genesis",
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "permissions": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string",
                      "description": "level is the level of permissions granted to this account.",
                      "default": "LEVEL_NONE_UNSPECIFIED",
                      "enum": [
                        "LEVEL_NONE_UNSPECIFIED",
                        "LEVEL_SOME_MSGS",
                        "LEVEL_ALL_MSGS",
                        "LEVEL_SUPER_ADMIN"
                      ]
                    },
                    "limit_type_urls": {
                      "type": "array",
                      "description": "limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type\nURLs that the account can trip. It is an error to use limit_type_urls with\na level other than LEVEL_SOME_MSGS.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Permissions are the permissions that an account has to trip\nor reset the circuit breaker."
                }
              }
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next_key": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results.",
                "format": "byte"
              },
              "total": {
                "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise",
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "pagination defines the pagination in the response."
          }
        },
        "description": "AccountsResponse is the response type for the Query/Accounts RPC method."
      },
      "cosmos.circuit.v1.DisabledListResponse": {
        "type": "object",
        "properties": {
          "disabled_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "DisabledListResponse is the response type for the Query/DisabledList RPC method."
      },
      "cosmos.circuit.v1.GenesisAccountPermissions": {
        "title": "GenesisAccountPermissions is the account permissions for the circuit breaker in genesis",
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "level": {
                "type": "string",
                "description": "level is the level of permissions granted to this account.",
                "default": "LEVEL_NONE_UNSPECIFIED",
                "enum": [
                  "LEVEL_NONE_UNSPECIFIED",
                  "LEVEL_SOME_MSGS",
                  "LEVEL_ALL_MSGS",
                  "LEVEL_SUPER_ADMIN"
                ]
              },
              "limit_type_urls": {
                "type": "array",
                "description": "limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type\nURLs that the account can trip. It is an error to use limit_type_urls with\na level other than LEVEL_SOME_MSGS.",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": "Permissions are the permissions that an account has to trip\nor reset the circuit breaker."
          }
        }
      },
      "cosmos.circuit.v1.Permissions": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "level is the level of permissions granted to this account.",
            "default": "LEVEL_NONE_UNSPECIFIED",
            "enum": [
              "LEVEL_NONE_UNSPECIFIED",
              "LEVEL_SOME_MSGS",
              "LEVEL_ALL_MSGS",
              "LEVEL_SUPER_ADMIN"
            ]
          },
          "limit_type_urls": {
            "type": "array",
            "description": "limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type\nURLs that the account can trip. It is an error to use limit_type_urls with\na level other than LEVEL_SOME_MSGS.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Permissions are the permissions that an account has to trip\nor reset the circuit breaker."
      },
      "cosmos.circuit.v1.Permissions.Level": {
        "type": "string",
        "description": "Level is the permission level.\n\n - LEVEL_NONE_UNSPECIFIED: LEVEL_NONE_UNSPECIFIED indicates that the account will have no circuit\nbreaker permissions.\n - LEVEL_SOME_MSGS: LEVEL_SOME_MSGS indicates that the account will have permission to\ntrip or reset the circuit breaker for some Msg type URLs. If this level\nis chosen, a non-empty list of Msg type URLs must be provided in\nlimit_type_urls.\n - LEVEL_ALL_MSGS: LEVEL_ALL_MSGS indicates that the account can trip or reset the circuit\nbreaker for Msg's of all type URLs.\n - LEVEL_SUPER_ADMIN: LEVEL_SUPER_ADMIN indicates that the account can take all circuit breaker\nactions and can grant permissions to other accounts.",
        "default": "LEVEL_NONE_UNSPECIFIED",
        "enum": [
          "LEVEL_NONE_UNSPECIFIED",
          "LEVEL_SOME_MSGS",
          "LEVEL_ALL_MSGS",
          "LEVEL_SUPER_ADMIN"
        ]
      },
      "cosmos.consensus.v1.QueryParamsResponse": {
        "type": "object",
        "properties": {
          "params": {
            "type": "object",
            "properties": {
              "block": {
                "type": "object",
                "properties": {
                  "max_bytes": {
                    "title": "Max block size, in bytes.\nNote: must be greater than 0",
                    "type": "string",
                    "format": "int64"
                  },
                  "max_gas": {
                    "title": "Max gas per block.\nNote: must be greater or equal to -1",
                    "type": "string",
                    "format": "int64"
                  }
                },
                "description": "BlockParams contains limits on the block size."
              },
              "evidence": {
                "type": "object",
                "properties": {
                  "max_age_num_blocks": {
                    "type": "string",
                    "description": "Max age of evidence, in blocks.\n\nThe basic formula for calculating this is: MaxAgeDuration / {average block\ntime}.",
                    "format": "int64"
                  },
                  "max_age_duration": {
                    "type": "string",
                    "description": "Max age of evidence, in time.\n\nIt should correspond with an app's \"unbonding period\" or other similar\nmechanism for handling [Nothing-At-Stake\nattacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed)."
                  },
                  "max_bytes": {
                    "title": "This sets the maximum size of total evidence in bytes that can be committed in a single block.\nand should fall comfortably under the max block bytes.\nDefault is 1048576 or 1MB",
                    "type": "string",
                    "format": "int64"
                  }
                },
                "description": "EvidenceParams determine how we handle evidence of malfeasance."
              },
              "validator": {
                "type": "object",
                "properties": {
                  "pub_key_types": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": "ValidatorParams restrict the public key types validators can use.\nNOTE: uses ABCI pubkey naming, not Amino names."
              },
              "version": {
                "type": "object",
                "properties": {
                  "app": {
                    "type": "string",
                    "format": "uint64"
                  }
                },
                "description": "VersionParams contains the ABCI application version."
              },
              "abci": {
                "type": "object",
                "properties": {
                  "vote_extensions_enable_height": {
                    "type": "string",
                    "description": "vote_extensions_enable_height configures the first height during which\nvote extensions will be enabled. During this specified height, and for all\nsubsequent heights, precommit messages that do not contain valid extension data\nwill be considered invalid. Prior to this height, vote extensions will not\nbe used or accepted by validators on the network.\n\nOnce enabled, vote extensions will be created by the application in ExtendVote,\npassed to the application for validation in VerifyVoteExtension and given\nto the application to use when proposing a block during PrepareProposal.",
                    "format": "int64"
                  }
                },
                "description": "ABCIParams configure functionality specific to the Application Blockchain Interface."
              }
            },
            "description": "params are the tendermint consensus params stored in the consensus module.\nPlease note that `params.version` is not populated in this response, it is\ntracked separately in the x/upgrade module."
          }
        },
        "description": "QueryParamsResponse defines the response type for querying x/consensus parameters."
      },
      "tendermint.types.ABCIParams": {
        "type": "object",
        "properties": {
          "vote_extensions_enable_height": {
            "type": "string",
            "description": "vote_extensions_enable_height configures the first height during which\nvote extensions will be enabled. During this specified height, and for all\nsubsequent heights, precommit messages that do not contain valid extension data\nwill be considered invalid. Prior to this height, vote extensions will not\nbe used or accepted by validators on the network.\n\nOnce enabled, vote extensions will be created by the application in ExtendVote,\npassed to the application for validation in VerifyVoteExtension and given\nto the application to use when proposing a block during PrepareProposal.",
            "format": "int64"
          }
        },
        "description": "ABCIParams configure functionality specific to the Application Blockchain Interface."
      },
      "tendermint.types.BlockParams": {
        "type": "object",
        "properties": {
          "max_bytes": {
            "title": "Max block size, in bytes.\nNote: must be greater than 0",
            "type": "string",
            "format": "int64"
          },
          "max_gas": {
            "title": "Max gas per block.\nNote: must be greater or equal to -1",
            "type": "string",
            "format": "int64"
          }
        },
        "description": "BlockParams contains limits on the block size."
      },
      "tendermint.types.ConsensusParams": {
        "type": "object",
        "properties": {
          "block": {
            "type": "object",
            "properties": {
              "max_bytes": {
                "title": "Max block size, in bytes.\nNote: must be greater than 0",
                "type": "string",
                "format": "int64"
              },
              "max_gas": {
                "title": "Max gas per block.\nNote: must be greater or equal to -1",
                "type": "string",
                "format": "int64"
              }
            },
            "description": "BlockParams contains limits on the block size."
          },
          "evidence": {
            "type": "object",
            "properties": {
              "max_age_num_blocks": {
                "type": "string",
                "description": "Max age of evidence, in blocks.\n\nThe basic formula for calculating this is: MaxAgeDuration / {average block\ntime}.",
                "format": "int64"
              },
              "max_age_duration": {
                "type": "string",
                "description": "Max age of evidence, in time.\n\nIt should correspond with an app's \"unbonding period\" or other similar\nmechanism for handling [Nothing-At-Stake\nattacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed)."
              },
              "max_bytes": {
                "title": "This sets the maximum size of total evidence in bytes that can be committed in a single block.\nand should fall comfortably under the max block bytes.\nDefault is 1048576 or 1MB",
                "type": "string",
                "format": "int64"
              }
            },
            "description": "EvidenceParams determine how we handle evidence of malfeasance."
          },
          "validator": {
            "type": "object",
            "properties": {
              "pub_key_types": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": "ValidatorParams restrict the public key types validators can use.\nNOTE: uses ABCI pubkey naming, not Amino names."
          },
          "version": {
            "type": "object",
            "properties": {
              "app": {
                "type": "string",
                "format": "uint64"
              }
            },
            "description": "VersionParams contains the ABCI application version."
          },
          "abci": {
            "type": "object",
            "properties": {
              "vote_extensions_enable_height": {
                "type": "string",
                "description": "vote_extensions_enable_height configures the first height during which\nvote extensions will be enabled. During this specified height, and for all\nsubsequent heights, precommit messages that do not contain valid extension data\nwill be considered invalid. Prior to this height, vote extensions will not\nbe used or accepted by validators on the network.\n\nOnce enabled, vote extensions will be created by the application in ExtendVote,\npassed to the application for validation in VerifyVoteExtension and given\nto the application to use when proposing a block during PrepareProposal.",
                "format": "int64"
              }
            },
            "description": "ABCIParams configure functionality specific to the Application Blockchain Interface."
          }
        },
        "description": "ConsensusParams contains consensus critical parameters that determine the\nvalidity of blocks."
      },
      "tendermint.types.EvidenceParams": {
        "type": "object",
        "properties": {
          "max_age_num_blocks": {
            "type": "string",
            "description": "Max age of evidence, in blocks.\n\nThe basic formula for calculating this is: MaxAgeDuration / {average block\ntime}.",
            "format": "int64"
          },
          "max_age_duration": {
            "type": "string",
            "description": "Max age of evidence, in time.\n\nIt should correspond with an app's \"unbonding period\" or other similar\nmechanism for handling [Nothing-At-Stake\nattacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed)."
          },
          "max_bytes": {
            "title": "This sets the maximum size of total evidence in bytes that can be committed in a single block.\nand should fall comfortably under the max block bytes.\nDefault is 1048576 or 1MB",
            "type": "string",
            "format": "int64"
          }
        },
        "description": "EvidenceParams determine how we handle evidence of malfeasance."
      },
      "tendermint.types.ValidatorParams": {
        "type": "object",
        "properties": {
          "pub_key_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "ValidatorParams restrict the public key types validators can use.\nNOTE: uses ABCI pubkey naming, not Amino names."
      },
      "tendermint.types.VersionParams": {
        "type": "object",
        "properties": {
          "app": {
            "type": "string",
            "format": "uint64"
          }
        },
        "description": "VersionParams contains the ABCI application version."
      },
      "cosmos.app.v1alpha1.Config": {
        "type": "object",
        "properties": {
          "modules": {
            "type": "array",
            "description": "modules are the module configurations for the app.",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "name is the unique name of the module within the app. It should be a name\nthat persists between different versions of a module so that modules\ncan be smoothly upgraded to new versions.\n\nFor example, for the module cosmos.bank.module.v1.Module, we may chose\nto simply name the module \"bank\" in the app. When we upgrade to\ncosmos.bank.module.v2.Module, the app-specific name \"bank\" stays the same\nand the framework knows that the v2 module should receive all the same state\nthat the v1 module had. Note: modules should provide info on which versions\nthey can migrate from in the ModuleDescriptor.can_migration_from field."
                },
                "config": {
                  "type": "object",
                  "properties": {
                    "type_url": {
                      "type": "string",
                      "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    },
                    "value": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte"
                    }
                  },
                  "description": "config is the config object for the module. Module config messages should\ndefine a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension."
                },
                "golang_bindings": {
                  "type": "array",
                  "description": "golang_bindings specifies explicit interface to implementation type bindings which\ndepinject uses to resolve interface inputs to provider functions.  The scope of this\nfield's configuration is module specific.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "interface_type": {
                        "title": "interface_type is the interface type which will be bound to a specific implementation type",
                        "type": "string"
                      },
                      "implementation": {
                        "title": "implementation is the implementing type which will be supplied when an input of type interface is requested",
                        "type": "string"
                      }
                    },
                    "description": "GolangBinding is an explicit interface type to implementing type binding for dependency injection."
                  }
                }
              },
              "description": "ModuleConfig is a module configuration for an app."
            }
          },
          "golang_bindings": {
            "type": "array",
            "description": "golang_bindings specifies explicit interface to implementation type bindings which\ndepinject uses to resolve interface inputs to provider functions.  The scope of this\nfield's configuration is global (not module specific).",
            "items": {
              "type": "object",
              "properties": {
                "interface_type": {
                  "title": "interface_type is the interface type which will be bound to a specific implementation type",
                  "type": "string"
                },
                "implementation": {
                  "title": "implementation is the implementing type which will be supplied when an input of type interface is requested",
                  "type": "string"
                }
              },
              "description": "GolangBinding is an explicit interface type to implementing type binding for dependency injection."
            }
          }
        },
        "description": "Config represents the configuration for a Cosmos SDK ABCI app.\nIt is intended that all state machine logic including the version of\nbaseapp and tx handlers (and possibly even Tendermint) that an app needs\ncan be described in a config object. For compatibility, the framework should\nallow a mixture of declarative and imperative app wiring, however, apps\nthat strive for the maximum ease of maintainability should be able to describe\ntheir state machine with a config object alone."
      },
      "cosmos.app.v1alpha1.GolangBinding": {
        "type": "object",
        "properties": {
          "interface_type": {
            "title": "interface_type is the interface type which will be bound to a specific implementation type",
            "type": "string"
          },
          "implementation": {
            "title": "implementation is the implementing type which will be supplied when an input of type interface is requested",
            "type": "string"
          }
        },
        "description": "GolangBinding is an explicit interface type to implementing type binding for dependency injection."
      },
      "cosmos.app.v1alpha1.ModuleConfig": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name is the unique name of the module within the app. It should be a name\nthat persists between different versions of a module so that modules\ncan be smoothly upgraded to new versions.\n\nFor example, for the module cosmos.bank.module.v1.Module, we may chose\nto simply name the module \"bank\" in the app. When we upgrade to\ncosmos.bank.module.v2.Module, the app-specific name \"bank\" stays the same\nand the framework knows that the v2 module should receive all the same state\nthat the v1 module had. Note: modules should provide info on which versions\nthey can migrate from in the ModuleDescriptor.can_migration_from field."
          },
          "config": {
            "type": "object",
            "properties": {
              "type_url": {
                "type": "string",
                "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
              },
              "value": {
                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                "type": "string",
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte"
              }
            },
            "description": "config is the config object for the module. Module config messages should\ndefine a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension."
          },
          "golang_bindings": {
            "type": "array",
            "description": "golang_bindings specifies explicit interface to implementation type bindings which\ndepinject uses to resolve interface inputs to provider functions.  The scope of this\nfield's configuration is module specific.",
            "items": {
              "type": "object",
              "properties": {
                "interface_type": {
                  "title": "interface_type is the interface type which will be bound to a specific implementation type",
                  "type": "string"
                },
                "implementation": {
                  "title": "implementation is the implementing type which will be supplied when an input of type interface is requested",
                  "type": "string"
                }
              },
              "description": "GolangBinding is an explicit interface type to implementing type binding for dependency injection."
            }
          }
        },
        "description": "ModuleConfig is a module configuration for an app."
      },
      "cosmos.app.v1alpha1.QueryConfigResponse": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "properties": {
              "modules": {
                "type": "array",
                "description": "modules are the module configurations for the app.",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "name is the unique name of the module within the app. It should be a name\nthat persists between different versions of a module so that modules\ncan be smoothly upgraded to new versions.\n\nFor example, for the module cosmos.bank.module.v1.Module, we may chose\nto simply name the module \"bank\" in the app. When we upgrade to\ncosmos.bank.module.v2.Module, the app-specific name \"bank\" stays the same\nand the framework knows that the v2 module should receive all the same state\nthat the v1 module had. Note: modules should provide info on which versions\nthey can migrate from in the ModuleDescriptor.can_migration_from field."
                    },
                    "config": {
                      "type": "object",
                      "properties": {
                        "type_url": {
                          "type": "string",
                          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                        },
                        "value": {
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                          "type": "string",
                          "description": "Must be a valid serialized protocol buffer of the above specified type.",
                          "format": "byte"
                        }
                      },
                      "description": "config is the config object for the module. Module config messages should\ndefine a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension."
                    },
                    "golang_bindings": {
                      "type": "array",
                      "description": "golang_bindings specifies explicit interface to implementation type bindings which\ndepinject uses to resolve interface inputs to provider functions.  The scope of this\nfield's configuration is module specific.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "interface_type": {
                            "title": "interface_type is the interface type which will be bound to a specific implementation type",
                            "type": "string"
                          },
                          "implementation": {
                            "title": "implementation is the implementing type which will be supplied when an input of type interface is requested",
                            "type": "string"
                          }
                        },
                        "description": "GolangBinding is an explicit interface type to implementing type binding for dependency injection."
                      }
                    }
                  },
                  "description": "ModuleConfig is a module configuration for an app."
                }
              },
              "golang_bindings": {
                "type": "array",
                "description": "golang_bindings specifies explicit interface to implementation type bindings which\ndepinject uses to resolve interface inputs to provider functions.  The scope of this\nfield's configuration is global (not module specific).",
                "items": {
                  "type": "object",
                  "properties": {
                    "interface_type": {
                      "title": "interface_type is the interface type which will be bound to a specific implementation type",
                      "type": "string"
                    },
                    "implementation": {
                      "title": "implementation is the implementing type which will be supplied when an input of type interface is requested",
                      "type": "string"
                    }
                  },
                  "description": "GolangBinding is an explicit interface type to implementing type binding for dependency injection."
                }
              }
            },
            "description": "config is the current app config."
          }
        },
        "description": "QueryConfigRequest is the Query/Config response type."
      }
    }
  }
}
